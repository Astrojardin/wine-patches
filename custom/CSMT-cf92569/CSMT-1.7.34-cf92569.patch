diff --git a/configure b/configure
index 6c87c03..817ddd7 100755
--- a/configure
+++ b/configure
@@ -1321,6 +1321,7 @@ enable_wuapi
 enable_wuaueng
 enable_x3daudio1_7
 enable_xapofx1_1
+enable_xaudio2_7
 enable_xinput1_1
 enable_xinput1_2
 enable_xinput1_3
@@ -17544,6 +17545,7 @@ wine_fn_config_dll wuapi enable_wuapi clean
 wine_fn_config_dll wuaueng enable_wuaueng
 wine_fn_config_dll x3daudio1_7 enable_x3daudio1_7
 wine_fn_config_dll xapofx1_1 enable_xapofx1_1
+wine_fn_config_dll xaudio2_7 enable_xaudio2_7
 wine_fn_config_dll xinput1_1 enable_xinput1_1
 wine_fn_config_dll xinput1_2 enable_xinput1_2
 wine_fn_config_dll xinput1_3 enable_xinput1_3 implib xinput
diff --git a/configure.ac b/configure.ac
index 8263c66..df3c37b 100644
--- a/configure.ac
+++ b/configure.ac
@@ -3368,6 +3368,7 @@ WINE_CONFIG_DLL(wuapi,,[clean])
 WINE_CONFIG_DLL(wuaueng)
 WINE_CONFIG_DLL(x3daudio1_7)
 WINE_CONFIG_DLL(xapofx1_1)
+WINE_CONFIG_DLL(xaudio2_7)
 WINE_CONFIG_DLL(xinput1_1)
 WINE_CONFIG_DLL(xinput1_2)
 WINE_CONFIG_DLL(xinput1_3,,[implib],[xinput])
diff --git a/dlls/atl/atl_ax.c b/dlls/atl/atl_ax.c
index d7cf074..d16cdfd 100644
--- a/dlls/atl/atl_ax.c
+++ b/dlls/atl/atl_ax.c
@@ -55,6 +55,8 @@ typedef struct IOCS {
     BOOL fActive, fInPlace, fWindowless;
 } IOCS;
 
+static const WCHAR wine_atl_iocsW[] = {'_','_','W','I','N','E','_','A','T','L','_','I','O','C','S','\0'};
+
 /**********************************************************************
  * AtlAxWin class window procedure
  */
@@ -150,7 +152,7 @@ static HRESULT IOCS_Detach( IOCS *This ) /* remove subclassing */
     if ( This->hWnd )
     {
         SetWindowLongPtrW( This->hWnd, GWLP_WNDPROC, (ULONG_PTR) This->OrigWndProc );
-        SetWindowLongPtrW( This->hWnd, GWLP_USERDATA, 0 );
+        RemovePropW( This->hWnd, wine_atl_iocsW);
         This->hWnd = NULL;
     }
     if ( This->control )
@@ -906,7 +908,7 @@ static LRESULT IOCS_OnWndProc( IOCS *This, HWND hWnd, UINT uMsg, WPARAM wParam,
 
 static LRESULT CALLBACK AtlHost_wndproc( HWND hWnd, UINT wMsg, WPARAM wParam, LPARAM lParam )
 {
-    IOCS *This = (IOCS*) GetWindowLongPtrW( hWnd, GWLP_USERDATA );
+    IOCS *This = (IOCS*) GetPropW( hWnd, wine_atl_iocsW );
     return IOCS_OnWndProc( This, hWnd, wMsg, wParam, lParam );
 }
 
@@ -915,7 +917,7 @@ static HRESULT IOCS_Attach( IOCS *This, HWND hWnd, IUnknown *pUnkControl ) /* su
     This->hWnd = hWnd;
     IUnknown_QueryInterface( pUnkControl, &IID_IOleObject, (void**)&This->control );
     IOleObject_SetClientSite( This->control, &This->IOleClientSite_iface );
-    SetWindowLongPtrW( hWnd, GWLP_USERDATA, (ULONG_PTR) This );
+    SetPropW( hWnd, wine_atl_iocsW, This );
     This->OrigWndProc = (WNDPROC)SetWindowLongPtrW( hWnd, GWLP_WNDPROC, (ULONG_PTR) AtlHost_wndproc );
 
     return S_OK;
@@ -1328,7 +1330,7 @@ HRESULT WINAPI AtlAxGetHost(HWND hWnd, IUnknown **host)
 
     *host = NULL;
 
-    This = (IOCS*) GetWindowLongPtrW( hWnd, GWLP_USERDATA );
+    This = (IOCS*) GetPropW( hWnd, wine_atl_iocsW );
     if ( !This )
     {
         WARN("No container attached to %p\n", hWnd );
@@ -1350,7 +1352,7 @@ HRESULT WINAPI AtlAxGetControl(HWND hWnd, IUnknown **pUnk)
 
     *pUnk = NULL;
 
-    This = (IOCS*) GetWindowLongPtrW( hWnd, GWLP_USERDATA );
+    This = (IOCS*) GetPropW( hWnd, wine_atl_iocsW );
     if ( !This || !This->control )
     {
         WARN("No control attached to %p\n", hWnd );
diff --git a/dlls/atl100/tests/atl.c b/dlls/atl100/tests/atl.c
index 96abf57..8cf0a32 100644
--- a/dlls/atl100/tests/atl.c
+++ b/dlls/atl100/tests/atl.c
@@ -25,6 +25,7 @@
 #include <windef.h>
 #include <winbase.h>
 #include <winuser.h>
+#include <exdisp.h>
 
 #include <atlbase.h>
 #include <mshtml.h>
@@ -591,32 +592,270 @@ static void test_source_iface(void)
 
 static void test_ax_win(void)
 {
-    BOOL ret;
+    DWORD ret, ret_size, i;
+    HRESULT res;
+    HWND hwnd;
+    HANDLE hfile;
+    IUnknown *control;
+    WNDPROC wndproc[2] = {NULL, NULL};
+    WCHAR file_uri1W[MAX_PATH], pathW[MAX_PATH];
     WNDCLASSEXW wcex;
-    static const WCHAR AtlAxWin100[] = {'A','t','l','A','x','W','i','n','1','0','0',0};
-    static const WCHAR AtlAxWinLic100[] = {'A','t','l','A','x','W','i','n','L','i','c','1','0','0',0};
     static HMODULE hinstance = 0;
+    static const WCHAR emptyW[] = {'\0'};
+    static const WCHAR randomW[] = {'r','a','n','d','o','m','\0'};
+    static const WCHAR progid1W[] = {'S','h','e','l','l','.','E','x','p','l','o','r','e','r','.','2','\0'};
+    static const WCHAR clsid1W[] = {'{','8','8','5','6','f','9','6','1','-','3','4','0','a','-',
+                                    '1','1','d','0','-','a','9','6','b','-',
+                                    '0','0','c','0','4','f','d','7','0','5','a','2','}','\0'};
+    static const WCHAR url1W[] = {'h','t','t','p',':','/','/','t','e','s','t','.','w','i','n','e','h','q',
+                                  '.','o','r','g','/','t','e','s','t','s','/','w','i','n','e','h','q','_',
+                                  's','n','a','p','s','h','o','t','/','\0'};
+    static const WCHAR mshtml1W[] = {'m','s','h','t','m','l',':','<','h','t','m','l','>','<','b','o','d','y','>',
+                                     't','e','s','t','<','/','b','o','d','y','>','<','/','h','t','m','l','>','\0'};
+    static const WCHAR mshtml2W[] = {'M','S','H','T','M','L',':','<','h','t','m','l','>','<','b','o','d','y','>',
+                                     't','e','s','t','<','/','b','o','d','y','>','<','/','h','t','m','l','>','\0'};
+    static const WCHAR mshtml3W[] = {'<','h','t','m','l','>','<','b','o','d','y','>', 't','e','s','t',
+                                     '<','/','b','o','d','y','>','<','/','h','t','m','l','>','\0'};
+    static const WCHAR fileW[] = {'f','i','l','e',':','/','/','/','\0'};
+    static const WCHAR html_fileW[] = {'t','e','s','t','.','h','t','m','l','\0'};
+    static const char html_str[] = "<html><body>test</body><html>";
+    static const WCHAR cls_names[][16] =
+    {
+        {'A','t','l','A','x','W','i','n','1','0','0',0},
+        {'A','t','l','A','x','W','i','n','L','i','c','1','0','0',0}
+    };
 
     ret = AtlAxWinInit();
     ok(ret, "AtlAxWinInit failed\n");
 
     hinstance = GetModuleHandleA(NULL);
 
-    memset(&wcex, 0, sizeof(wcex));
-    wcex.cbSize = sizeof(wcex);
-    ret = GetClassInfoExW(hinstance, AtlAxWin100, &wcex);
-    ok(ret, "AtlAxWin100 has not registered\n");
-    ok(wcex.style == (CS_GLOBALCLASS | CS_DBLCLKS), "wcex.style %08x\n", wcex.style);
+    for (i = 0; i < 2; i++)
+    {
+        memset(&wcex, 0, sizeof(wcex));
+        wcex.cbSize = sizeof(wcex);
+        ret = GetClassInfoExW(hinstance, cls_names[i], &wcex);
+        ok(ret, "%s has not registered\n", wine_dbgstr_w(cls_names[i]));
+        ok(wcex.style == (CS_GLOBALCLASS | CS_DBLCLKS), "wcex.style %08x\n", wcex.style);
+        wndproc[i] = wcex.lpfnWndProc;
+
+        hwnd = CreateWindowW(cls_names[i], NULL, 0, 100, 100, 100, 100, NULL, NULL, NULL, NULL);
+        ok(hwnd != NULL, "CreateWindow failed!\n");
+        control = (IUnknown *)0xdeadbeef;
+        res = AtlAxGetControl(hwnd, &control);
+        todo_wine ok(res == E_FAIL, "Expected E_FAIL, returned %08x\n", res);
+        todo_wine ok(!control, "returned %p\n", control);
+        if (control) IUnknown_Release(control);
+        DestroyWindow(hwnd);
+
+        hwnd = CreateWindowW(cls_names[i], emptyW, 0, 100, 100, 100, 100, NULL, NULL, NULL, NULL);
+        ok(hwnd != NULL, "CreateWindow failed!\n");
+        control = (IUnknown *)0xdeadbeef;
+        res = AtlAxGetControl(hwnd, &control);
+        todo_wine ok(res == E_FAIL, "Expected E_FAIL, returned %08x\n", res);
+        todo_wine ok(!control, "returned %p\n", control);
+        if (control) IUnknown_Release(control);
+        DestroyWindow(hwnd);
+
+        hwnd = CreateWindowW(cls_names[i], randomW, 0, 100, 100, 100, 100, NULL, NULL, NULL, NULL);
+        todo_wine ok(!hwnd, "returned %p\n", hwnd);
+        if(hwnd) DestroyWindow(hwnd);
+
+        hwnd = CreateWindowW(cls_names[i], progid1W, 0, 100, 100, 100, 100, NULL, NULL, NULL, NULL);
+        ok(hwnd != NULL, "CreateWindow failed!\n");
+        control = NULL;
+        res = AtlAxGetControl(hwnd, &control);
+        ok(res == S_OK, "AtlAxGetControl failed with res %08x\n", res);
+        ok(control != NULL, "AtlAxGetControl failed!\n");
+        IUnknown_Release(control);
+        DestroyWindow(hwnd);
+
+        hwnd = CreateWindowW(cls_names[i], clsid1W, 0, 100, 100, 100, 100, NULL, NULL, NULL, NULL);
+        ok(hwnd != NULL, "CreateWindow failed!\n");
+        control = NULL;
+        res = AtlAxGetControl(hwnd, &control);
+        ok(res == S_OK, "AtlAxGetControl failed with res %08x\n", res);
+        ok(control != NULL, "AtlAxGetControl failed!\n");
+        IUnknown_Release(control);
+        DestroyWindow(hwnd);
+
+        hwnd = CreateWindowW(cls_names[i], url1W, 0, 100, 100, 100, 100, NULL, NULL, NULL, NULL);
+        ok(hwnd != NULL, "CreateWindow failed!\n");
+        control = NULL;
+        res = AtlAxGetControl(hwnd, &control);
+        ok(res == S_OK, "AtlAxGetControl failed with res %08x\n", res);
+        ok(control != NULL, "AtlAxGetControl failed!\n");
+        IUnknown_Release(control);
+        DestroyWindow(hwnd);
+
+        /* test html stream with "MSHTML:" prefix */
+        hwnd = CreateWindowW(cls_names[i], mshtml1W, 0, 100, 100, 100, 100, NULL, NULL, NULL, NULL);
+        ok(hwnd != NULL, "CreateWindow failed!\n");
+        control = NULL;
+        res = AtlAxGetControl(hwnd, &control);
+        ok(res == S_OK, "AtlAxGetControl failed with res %08x\n", res);
+        ok(control != NULL, "AtlAxGetControl failed!\n");
+        IUnknown_Release(control);
+        DestroyWindow(hwnd);
+
+        hwnd = CreateWindowW(cls_names[i], mshtml2W, 0, 100, 100, 100, 100, NULL, NULL, NULL, NULL);
+        ok(hwnd != NULL, "CreateWindow failed!\n");
+        control = NULL;
+        res = AtlAxGetControl(hwnd, &control);
+        ok(res == S_OK, "AtlAxGetControl failed with res %08x\n", res);
+        ok(control != NULL, "AtlAxGetControl failed!\n");
+        IUnknown_Release(control);
+        DestroyWindow(hwnd);
+
+        /* test html stream without "MSHTML:" prefix */
+        hwnd = CreateWindowW(cls_names[i], mshtml3W, 0, 100, 100, 100, 100, NULL, NULL, NULL, NULL);
+        todo_wine ok(!hwnd, "returned %p\n", hwnd);
+        if(hwnd) DestroyWindow(hwnd);
+
+        ret = GetTempPathW(MAX_PATH, pathW);
+        ok(ret, "GetTempPath failed!\n");
+        lstrcatW(pathW, html_fileW);
+        hfile = CreateFileW(pathW, GENERIC_WRITE, 0, NULL, CREATE_NEW, 0, 0);
+        ok(hfile != INVALID_HANDLE_VALUE, "failed to create file\n");
+        ret = WriteFile(hfile, html_str, sizeof(html_str), &ret_size, NULL);
+        ok(ret, "WriteFile failed\n");
+        CloseHandle(hfile);
+
+        /* test C:// scheme */
+        hwnd = CreateWindowW(cls_names[i], pathW, 0, 100, 100, 100, 100, NULL, NULL, NULL, NULL);
+        ok(hwnd != NULL, "CreateWindow failed!\n");
+        control = NULL;
+        res = AtlAxGetControl(hwnd, &control);
+        ok(res == S_OK, "AtlAxGetControl failed with res %08x\n", res);
+        ok(control != NULL, "AtlAxGetControl failed!\n");
+        IUnknown_Release(control);
+        DestroyWindow(hwnd);
+
+        /* test file:// scheme */
+        lstrcpyW(file_uri1W, fileW);
+        lstrcatW(file_uri1W, pathW);
+        hwnd = CreateWindowW(cls_names[i], file_uri1W, 0, 100, 100, 100, 100, NULL, NULL, NULL, NULL);
+        ok(hwnd != NULL, "CreateWindow failed!\n");
+        control = NULL;
+        res = AtlAxGetControl(hwnd, &control);
+        ok(res == S_OK, "AtlAxGetControl failed with res %08x\n", res);
+        ok(control != NULL, "AtlAxGetControl failed!\n");
+        IUnknown_Release(control);
+        DestroyWindow(hwnd);
+
+        /* test file:// scheme on non-existent file */
+        ret = DeleteFileW(pathW);
+        ok(ret, "DeleteFile failed!\n");
+        hwnd = CreateWindowW(cls_names[i], file_uri1W, 0, 100, 100, 100, 100, NULL, NULL, NULL, NULL);
+        ok(hwnd != NULL, "CreateWindow failed!\n");
+        control = NULL;
+        res = AtlAxGetControl(hwnd, &control);
+        ok(res == S_OK, "AtlAxGetControl failed with res %08x\n", res);
+        ok(control != NULL, "AtlAxGetControl failed!\n");
+        IUnknown_Release(control);
+        DestroyWindow(hwnd);
+    }
+    todo_wine ok(wndproc[0] != wndproc[1], "expected different proc!\n");
+}
+
+static ATOM register_class(void)
+{
+    WNDCLASSA wndclassA;
+
+    wndclassA.style = 0;
+    wndclassA.lpfnWndProc = DefWindowProcA;
+    wndclassA.cbClsExtra = 0;
+    wndclassA.cbWndExtra = 0;
+    wndclassA.hInstance = GetModuleHandleA(NULL);
+    wndclassA.hIcon = NULL;
+    wndclassA.hCursor = LoadCursorA(NULL, (LPSTR)IDC_ARROW);
+    wndclassA.hbrBackground = (HBRUSH)(COLOR_BTNFACE+1);
+    wndclassA.lpszMenuName = NULL;
+    wndclassA.lpszClassName = "WineAtlTestClass";
+
+    return RegisterClassA(&wndclassA);
+}
+
+static HWND create_container_window(void)
+{
+    return CreateWindowA("WineAtlTestClass", "Wine ATL Test Window", 0,
+                              CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
+                              CW_USEDEFAULT, NULL, NULL, NULL, NULL);
+}
+
+static void test_AtlAxAttachControl(void)
+{
+    HWND hwnd;
+    HRESULT hr;
+    IUnknown *control, *container;
+    LONG val;
+
+    hr = AtlAxAttachControl(NULL, NULL, NULL);
+    ok(hr == E_INVALIDARG, "Expected AtlAxAttachControl to return E_INVALIDARG, got 0x%08x\n", hr);
+
+    container = (IUnknown *)0xdeadbeef;
+    hr = AtlAxAttachControl(NULL, NULL, &container);
+    ok(hr == E_INVALIDARG, "Expected AtlAxAttachControl to return E_INVALIDARG, got 0x%08x\n", hr);
+    ok(container == (IUnknown *)0xdeadbeef,
+       "Expected the output container pointer to be untouched, got %p\n", container);
+
+    hwnd = create_container_window();
+    hr = AtlAxAttachControl(NULL, hwnd, NULL);
+    ok(hr == E_INVALIDARG, "Expected AtlAxAttachControl to return E_INVALIDARG, got 0x%08x\n", hr);
+    DestroyWindow(hwnd);
+
+    hwnd = create_container_window();
+    container = (IUnknown *)0xdeadbeef;
+    hr = AtlAxAttachControl(NULL, hwnd, &container);
+    ok(hr == E_INVALIDARG, "Expected AtlAxAttachControl to return E_INVALIDARG, got 0x%08x\n", hr);
+    ok(container == (IUnknown *)0xdeadbeef, "returned %p\n", container);
+    DestroyWindow(hwnd);
 
-    memset(&wcex, 0, sizeof(wcex));
-    wcex.cbSize = sizeof(wcex);
-    ret = GetClassInfoExW(hinstance, AtlAxWinLic100, &wcex);
-    ok(ret, "AtlAxWinLic100 has not registered\n");
-    ok(wcex.style == (CS_GLOBALCLASS | CS_DBLCLKS), "wcex.style %08x\n", wcex.style);
+    hr = CoCreateInstance(&CLSID_WebBrowser, NULL, CLSCTX_INPROC_SERVER | CLSCTX_INPROC_HANDLER,
+                          &IID_IOleObject, (void **)&control);
+    ok(hr == S_OK, "Expected CoCreateInstance to return S_OK, got 0x%08x\n", hr);
+
+    if (FAILED(hr))
+    {
+        skip("Couldn't obtain a test IOleObject instance\n");
+        return;
+    }
+
+    hr = AtlAxAttachControl(control, NULL, NULL);
+    ok(hr == S_FALSE, "Expected AtlAxAttachControl to return S_FALSE, got 0x%08x\n", hr);
+
+    container = NULL;
+    hr = AtlAxAttachControl(control, NULL, &container);
+    ok(hr == S_FALSE, "Expected AtlAxAttachControl to return S_FALSE, got 0x%08x\n", hr);
+    ok(container != NULL, "got %p\n", container);
+    IUnknown_Release(container);
+
+    hwnd = create_container_window();
+    SetWindowLongW(hwnd, GWLP_USERDATA, 0xdeadbeef);
+    hr = AtlAxAttachControl(control, hwnd, NULL);
+    ok(hr == S_OK, "Expected AtlAxAttachControl to return S_OK, got 0x%08x\n", hr);
+    val = GetWindowLongW(hwnd, GWLP_USERDATA);
+    ok(val == 0xdeadbeef, "returned %08x\n", val);
+    DestroyWindow(hwnd);
+
+    hwnd = create_container_window();
+    SetWindowLongW(hwnd, GWLP_USERDATA, 0xdeadbeef);
+    container = NULL;
+    hr = AtlAxAttachControl(control, hwnd, &container);
+    ok(hr == S_OK, "Expected AtlAxAttachControl to return S_OK, got 0x%08x\n", hr);
+    ok(container != NULL, "Expected not NULL!\n");
+    val = GetWindowLongW(hwnd, GWLP_USERDATA);
+    ok(val == 0xdeadbeef, "Expected unchanged, returned %08x\n", val);
+    DestroyWindow(hwnd);
+
+    IUnknown_Release(control);
 }
 
 START_TEST(atl)
 {
+    if (!register_class())
+        return;
+
     CoInitialize(NULL);
 
     test_winmodule();
@@ -625,6 +864,7 @@ START_TEST(atl)
     test_cp();
     test_source_iface();
     test_ax_win();
+    test_AtlAxAttachControl();
 
     CoUninitialize();
 }
diff --git a/dlls/combase/string.c b/dlls/combase/string.c
index 9ec05c6..7054af6 100644
--- a/dlls/combase/string.c
+++ b/dlls/combase/string.c
@@ -99,13 +99,13 @@ HRESULT WINAPI WindowsCreateStringReference(LPCWSTR ptr, UINT32 len,
         return E_INVALIDARG;
     if (ptr == NULL && len > 0)
         return E_POINTER;
-    if (ptr[len] != '\0')
-        return E_INVALIDARG;
     if (len == 0)
     {
         *out = NULL;
         return S_OK;
     }
+    if (ptr[len] != '\0')
+        return E_INVALIDARG;
     priv->buffer = (LPWSTR)ptr;
     priv->length = len;
     priv->reference = TRUE;
diff --git a/dlls/comctl32/header.c b/dlls/comctl32/header.c
index e8dc107..ac924fd 100644
--- a/dlls/comctl32/header.c
+++ b/dlls/comctl32/header.c
@@ -413,7 +413,7 @@ HEADER_DrawItem (HEADER_INFO *infoPtr, HDC hdc, INT iItem, BOOL bHotTrack, LRESU
 	BITMAP bmp;
 
         HEADER_PrepareCallbackItems(infoPtr, iItem, HDI_TEXT|HDI_IMAGE);
-	cw = tw = iw = bw = 0;
+        cw = iw = bw = 0;
 	rw = r.right - r.left;
 	rh = r.bottom - r.top;
 
diff --git a/dlls/comdlg32/printdlg.c b/dlls/comdlg32/printdlg.c
index 83b22c3..acdb46c 100644
--- a/dlls/comdlg32/printdlg.c
+++ b/dlls/comdlg32/printdlg.c
@@ -838,8 +838,7 @@ static BOOL PRINTDLG_SetUpPaperComboBoxA(HWND hDlg,
 
     Names = HeapAlloc(GetProcessHeap(),0, NrOfEntries*sizeof(char)*NamesSize);
     Words = HeapAlloc(GetProcessHeap(),0, NrOfEntries*sizeof(WORD));
-    NrOfEntries = DeviceCapabilitiesA(PrinterName, PortName,
-                                      fwCapability_Names, Names, dm);
+    DeviceCapabilitiesA(PrinterName, PortName, fwCapability_Names, Names, dm);
     NrOfEntries = DeviceCapabilitiesA(PrinterName, PortName,
 				      fwCapability_Words, (LPSTR)Words, dm);
 
@@ -949,8 +948,7 @@ static BOOL PRINTDLG_SetUpPaperComboBoxW(HWND hDlg,
 
     Names = HeapAlloc(GetProcessHeap(),0, NrOfEntries*sizeof(WCHAR)*NamesSize);
     Words = HeapAlloc(GetProcessHeap(),0, NrOfEntries*sizeof(WORD));
-    NrOfEntries = DeviceCapabilitiesW(PrinterName, PortName,
-                                      fwCapability_Names, Names, dm);
+    DeviceCapabilitiesW(PrinterName, PortName, fwCapability_Names, Names, dm);
     NrOfEntries = DeviceCapabilitiesW(PrinterName, PortName,
                                       fwCapability_Words, Words, dm);
 
diff --git a/dlls/d3d10core/state.c b/dlls/d3d10core/state.c
index c816803..460bc8d 100644
--- a/dlls/d3d10core/state.c
+++ b/dlls/d3d10core/state.c
@@ -24,6 +24,12 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(d3d10core);
 
+#define D3D10_FILTER_MIP_MASK       0x01
+#define D3D10_FILTER_MAG_MASK       0x04
+#define D3D10_FILTER_MIN_MASK       0x10
+#define D3D10_FILTER_ANISO_MASK     0x40
+#define D3D10_FILTER_COMPARE_MASK   0x80
+
 static inline struct d3d10_blend_state *impl_from_ID3D10BlendState(ID3D10BlendState *iface)
 {
     return CONTAINING_RECORD(iface, struct d3d10_blend_state, ID3D10BlendState_iface);
@@ -590,16 +596,68 @@ static const struct ID3D10SamplerStateVtbl d3d10_sampler_state_vtbl =
     d3d10_sampler_state_GetDesc,
 };
 
+static enum wined3d_texture_address wined3d_texture_address_from_d3d10core(enum D3D10_TEXTURE_ADDRESS_MODE t)
+{
+    return (enum wined3d_texture_address)t;
+}
+
+static enum wined3d_texture_filter_type wined3d_texture_filter_mip_from_d3d10core(enum D3D10_FILTER f)
+{
+    if (f & D3D10_FILTER_MIP_MASK)
+        return WINED3D_TEXF_LINEAR;
+    return WINED3D_TEXF_POINT;
+}
+
+static enum wined3d_texture_filter_type wined3d_texture_filter_mag_from_d3d10core(enum D3D10_FILTER f)
+{
+    if (f & D3D10_FILTER_MAG_MASK)
+        return WINED3D_TEXF_LINEAR;
+    return WINED3D_TEXF_POINT;
+}
+
+static enum wined3d_texture_filter_type wined3d_texture_filter_min_from_d3d10core(enum D3D10_FILTER f)
+{
+    if (f & D3D10_FILTER_MIN_MASK)
+        return WINED3D_TEXF_LINEAR;
+    return WINED3D_TEXF_POINT;
+}
+
+static BOOL wined3d_texture_compare_from_d3d10core(enum D3D10_FILTER f)
+{
+    return f & D3D10_FILTER_COMPARE_MASK;
+}
+
+static enum wined3d_cmp_func wined3d_cmp_func_from_d3d10core(D3D10_COMPARISON_FUNC f)
+{
+    return (enum wined3d_cmp_func)f;
+}
+
 HRESULT d3d10_sampler_state_init(struct d3d10_sampler_state *state, struct d3d10_device *device,
         const D3D10_SAMPLER_DESC *desc)
 {
+    struct wined3d_sampler_desc wined3d_desc;
     HRESULT hr;
 
     state->ID3D10SamplerState_iface.lpVtbl = &d3d10_sampler_state_vtbl;
     state->refcount = 1;
     state->desc = *desc;
 
-    if (FAILED(hr = wined3d_sampler_create(state, &state->wined3d_sampler)))
+    wined3d_desc.address_u = wined3d_texture_address_from_d3d10core(desc->AddressU);
+    wined3d_desc.address_v = wined3d_texture_address_from_d3d10core(desc->AddressV);
+    wined3d_desc.address_w = wined3d_texture_address_from_d3d10core(desc->AddressW);
+    memcpy(wined3d_desc.border_color, desc->BorderColor, sizeof(wined3d_desc.border_color));
+    wined3d_desc.mag_filter = wined3d_texture_filter_mag_from_d3d10core(desc->Filter);
+    wined3d_desc.min_filter = wined3d_texture_filter_min_from_d3d10core(desc->Filter);
+    wined3d_desc.mip_filter = wined3d_texture_filter_mip_from_d3d10core(desc->Filter);
+    wined3d_desc.lod_bias = desc->MipLODBias;
+    wined3d_desc.min_lod = desc->MinLOD;
+    wined3d_desc.max_lod = desc->MaxLOD;
+    wined3d_desc.max_anisotropy = desc->Filter & D3D10_FILTER_ANISO_MASK ? desc->MaxAnisotropy : 1;
+    wined3d_desc.compare = wined3d_texture_compare_from_d3d10core(desc->Filter);
+    wined3d_desc.comparison_func = wined3d_cmp_func_from_d3d10core(desc->ComparisonFunc);
+    wined3d_desc.srgb_decode = FALSE;
+
+    if (FAILED(hr = wined3d_sampler_create(device->wined3d_device, &wined3d_desc, state, &state->wined3d_sampler)))
     {
         WARN("Failed to create wined3d sampler, hr %#x.\n", hr);
         return hr;
diff --git a/dlls/d3d8/tests/visual.c b/dlls/d3d8/tests/visual.c
index a8a771e..e47e6a8 100644
--- a/dlls/d3d8/tests/visual.c
+++ b/dlls/d3d8/tests/visual.c
@@ -4507,8 +4507,6 @@ static void volume_dxt5_test(void)
     hr = IDirect3DDevice8_EndScene(device);
     ok(SUCCEEDED(hr), "Failed to end scene, hr %#x.\n", hr);
 
-    hr = IDirect3DDevice8_Present(device, NULL, NULL, NULL, NULL);
-    ok(SUCCEEDED(hr), "Failed to present, hr %#x.\n", hr);
     for (i = 0; i < 4; i++)
     {
         color = getPixelColor(device, 80 + 160 * i, 240);
@@ -4516,6 +4514,8 @@ static void volume_dxt5_test(void)
                 "Expected color 0x%08x, got 0x%08x, case %u.\n", expected_colors[i], color, i);
     }
 
+    hr = IDirect3DDevice8_Present(device, NULL, NULL, NULL, NULL);
+    ok(SUCCEEDED(hr), "Failed to present, hr %#x.\n", hr);
     IDirect3DVolumeTexture8_Release(texture);
     refcount = IDirect3DDevice8_Release(device);
     ok(!refcount, "Device has %u references left.\n", refcount);
@@ -5197,8 +5197,6 @@ static void test_3dc_formats(void)
     hr = IDirect3DDevice8_EndScene(device);
     ok(SUCCEEDED(hr), "Failed to end scene, hr %#x.\n", hr);
 
-    hr = IDirect3DDevice8_Present(device, NULL, NULL, NULL, NULL);
-    ok(SUCCEEDED(hr), "Failed to present, hr %#x.\n", hr);
     for (i = 0; i < 4; ++i)
     {
         color = getPixelColor(device, expected_colors[i].position.x, expected_colors[i].position.y);
@@ -5207,6 +5205,8 @@ static void test_3dc_formats(void)
                 expected_colors[i].amd, expected_colors[i].nvidia, color, i);
     }
 
+    hr = IDirect3DDevice8_Present(device, NULL, NULL, NULL, NULL);
+    ok(SUCCEEDED(hr), "Failed to present, hr %#x.\n", hr);
     IDirect3DTexture8_Release(ati2n_texture);
     IDirect3DTexture8_Release(ati1n_texture);
     refcount = IDirect3DDevice8_Release(device);
diff --git a/dlls/d3drm/meshbuilder.c b/dlls/d3drm/meshbuilder.c
index 0a700bc..b3c5dbf 100644
--- a/dlls/d3drm/meshbuilder.c
+++ b/dlls/d3drm/meshbuilder.c
@@ -1078,7 +1078,6 @@ HRESULT load_mesh_data(IDirect3DRMMeshBuilder3 *iface, IDirectXFileData *pData,
     This->nb_vertices = *(DWORD*)ptr;
     This->nb_faces = *(DWORD*)(ptr + sizeof(DWORD) + This->nb_vertices * sizeof(D3DVECTOR));
     faces_vertex_idx_size = size - sizeof(DWORD) - This->nb_vertices * sizeof(D3DVECTOR) - sizeof(DWORD);
-    faces_vertex_idx_ptr = (DWORD*)(ptr + sizeof(DWORD) + This->nb_vertices * sizeof(D3DVECTOR) + sizeof(DWORD));
 
     TRACE("Mesh: nb_vertices = %d, nb_faces = %d, faces_vertex_idx_size = %d\n", This->nb_vertices, This->nb_faces, faces_vertex_idx_size);
 
diff --git a/dlls/d3dx9_36/tests/core.c b/dlls/d3dx9_36/tests/core.c
index b55f7ea..6c1bab3 100644
--- a/dlls/d3dx9_36/tests/core.c
+++ b/dlls/d3dx9_36/tests/core.c
@@ -875,6 +875,7 @@ static void test_ID3DXRenderToSurface_device_state(IDirect3DDevice9 *device)
     }
 
     hr = retrieve_device_state(device, &pre_state);
+    ok(SUCCEEDED(hr), "Failed to retrieve device state\n");
 
     hr = D3DXCreateRenderToSurface(device, 256, 256, D3DFMT_A8R8G8B8, TRUE, D3DFMT_D24X8, &render);
     ok(hr == D3D_OK, "D3DXCreateRenderToSurface returned %#x, expected %#x\n", hr, D3D_OK);
@@ -1100,6 +1101,7 @@ static void test_ID3DXRenderToEnvMap_cube_map(IDirect3DDevice9 *device)
     }
 
     hr = retrieve_device_state(device, &pre_state);
+    ok(SUCCEEDED(hr), "Failed to retrieve device state\n");
 
     hr = D3DXCreateRenderToEnvMap(device, 256, 0, D3DFMT_A8R8G8B8, TRUE, D3DFMT_D24X8, &render);
     ok(hr == D3D_OK, "D3DCreateRenderToEnvMap returned %#x, expected %#x\n", hr, D3D_OK);
diff --git a/dlls/devenum/devenum_main.c b/dlls/devenum/devenum_main.c
index 716a05d..cb4b454 100644
--- a/dlls/devenum/devenum_main.c
+++ b/dlls/devenum/devenum_main.c
@@ -95,6 +95,8 @@ HRESULT WINAPI DllRegisterServer(void)
     TRACE("\n");
 
     res = __wine_register_resources( DEVENUM_hInstance );
+    if (FAILED(res))
+        return res;
 
 /*** ActiveMovieFilter Categories ***/
 
diff --git a/dlls/dmband/tests/dmband.c b/dlls/dmband/tests/dmband.c
index cfbf34d..e2ba8d8 100644
--- a/dlls/dmband/tests/dmband.c
+++ b/dlls/dmband/tests/dmband.c
@@ -126,7 +126,7 @@ static void test_COM_bandtrack(void)
     ok(hr == S_OK, "QueryInterface for IID_IPersistStream failed: %08x\n", hr);
     refcount = IPersistStream_AddRef(ps);
     ok(refcount == 4, "refcount == %u, expected 4\n", refcount);
-    refcount = IPersistStream_Release(ps);
+    IPersistStream_Release(ps);
 
     hr = IDirectMusicTrack_QueryInterface(dmbt, &IID_IUnknown, (void**)&unk);
     ok(hr == S_OK, "QueryInterface for IID_IUnknown failed: %08x\n", hr);
diff --git a/dlls/dmcompos/tests/dmcompos.c b/dlls/dmcompos/tests/dmcompos.c
index aaaa4ac..16dc75e 100644
--- a/dlls/dmcompos/tests/dmcompos.c
+++ b/dlls/dmcompos/tests/dmcompos.c
@@ -218,7 +218,7 @@ static void test_COM_track(void)
         ok(hr == S_OK, "QueryInterface for IID_IPersistStream failed: %08x\n", hr);
         refcount = IPersistStream_AddRef(ps);
         ok(refcount == 4, "refcount == %u, expected 4\n", refcount);
-        refcount = IPersistStream_Release(ps);
+        IPersistStream_Release(ps);
 
         hr = IDirectMusicTrack8_QueryInterface(dmt8, &IID_IUnknown, (void**)&unk);
         ok(hr == S_OK, "QueryInterface for IID_IUnknown failed: %08x\n", hr);
diff --git a/dlls/dmime/tests/dmime.c b/dlls/dmime/tests/dmime.c
index 03b0a37..f7c018f 100644
--- a/dlls/dmime/tests/dmime.c
+++ b/dlls/dmime/tests/dmime.c
@@ -133,7 +133,7 @@ static void test_COM_audiopathconfig(void)
     ok(hr == S_OK, "QueryInterface for IID_IPersistStream failed: %08x\n", hr);
     refcount = IPersistStream_AddRef(ps);
     ok(refcount == 4, "refcount == %u, expected 4\n", refcount);
-    refcount = IPersistStream_Release(ps);
+    IPersistStream_Release(ps);
 
     hr = IDirectMusicObject_QueryInterface(dmo, &IID_IUnknown, (void**)&unk);
     ok(hr == S_OK, "QueryInterface for IID_IUnknown failed: %08x\n", hr);
@@ -358,7 +358,7 @@ static void test_COM_track(void)
         ok(hr == S_OK, "QueryInterface for IID_IPersistStream failed: %08x\n", hr);
         refcount = IPersistStream_AddRef(ps);
         ok(refcount == 4, "refcount == %u, expected 4\n", refcount);
-        refcount = IPersistStream_Release(ps);
+        IPersistStream_Release(ps);
 
         hr = IDirectMusicTrack8_QueryInterface(dmt8, &IID_IUnknown, (void**)&unk);
         ok(hr == S_OK, "QueryInterface for IID_IUnknown failed: %08x\n", hr);
diff --git a/dlls/dmloader/tests/loader.c b/dlls/dmloader/tests/loader.c
index 46a2b93..3083ac5 100644
--- a/dlls/dmloader/tests/loader.c
+++ b/dlls/dmloader/tests/loader.c
@@ -47,6 +47,7 @@ static void test_release_object(void)
     IDirectMusicLoader8* loader = NULL;
 
     hr = CoCreateInstance(&CLSID_DirectMusicLoader, NULL, CLSCTX_INPROC, &IID_IDirectMusicLoader8, (void**)&loader);
+    ok(hr == S_OK, "Couldn't create Loader %08x\n", hr);
 
     hr = IDirectMusicLoader_ReleaseObject(loader, NULL);
     ok(hr == E_POINTER, "Expected E_POINTER, received %#x\n", hr);
diff --git a/dlls/dmscript/tests/dmscript.c b/dlls/dmscript/tests/dmscript.c
index 02fddc3..59858d5 100644
--- a/dlls/dmscript/tests/dmscript.c
+++ b/dlls/dmscript/tests/dmscript.c
@@ -164,7 +164,7 @@ static void test_COM_scripttrack(void)
     ok(hr == S_OK, "QueryInterface for IID_IPersistStream failed: %08x\n", hr);
     refcount = IPersistStream_AddRef(ps);
     ok(refcount == 4, "refcount == %u, expected 4\n", refcount);
-    refcount = IPersistStream_Release(ps);
+    IPersistStream_Release(ps);
 
     hr = IDirectMusicTrack_QueryInterface(dmt, &IID_IUnknown, (void**)&unk);
     ok(hr == S_OK, "QueryInterface for IID_IUnknown failed: %08x\n", hr);
diff --git a/dlls/dmstyle/tests/dmstyle.c b/dlls/dmstyle/tests/dmstyle.c
index be9de42..1401d75 100644
--- a/dlls/dmstyle/tests/dmstyle.c
+++ b/dlls/dmstyle/tests/dmstyle.c
@@ -129,7 +129,7 @@ static void test_COM_section(void)
     ok(hr == S_OK, "QueryInterface for IID_IPersistStream failed: %08x\n", hr);
     refcount = IPersistStream_AddRef(ps);
     ok(refcount == 4, "refcount == %u, expected 4\n", refcount);
-    refcount = IPersistStream_Release(ps);
+    IPersistStream_Release(ps);
 
     hr = IDirectMusicObject_QueryInterface(dmo, &IID_IUnknown, (void**)&unk);
     ok(hr == S_OK, "QueryInterface for IID_IUnknown failed: %08x\n", hr);
@@ -196,7 +196,7 @@ static void test_COM_track(void)
         ok(hr == S_OK, "QueryInterface for IID_IPersistStream failed: %08x\n", hr);
         refcount = IPersistStream_AddRef(ps);
         ok(refcount == 4, "refcount == %u, expected 4\n", refcount);
-        refcount = IPersistStream_Release(ps);
+        IPersistStream_Release(ps);
 
         hr = IDirectMusicTrack8_QueryInterface(dmt8, &IID_IUnknown, (void**)&unk);
         ok(hr == S_OK, "QueryInterface for IID_IUnknown failed: %08x\n", hr);
diff --git a/dlls/dmusic/tests/dmusic.c b/dlls/dmusic/tests/dmusic.c
index b28a187..5a0c095 100644
--- a/dlls/dmusic/tests/dmusic.c
+++ b/dlls/dmusic/tests/dmusic.c
@@ -248,7 +248,7 @@ static void test_COM(void)
     ok(hr == S_OK, "QueryInterface for IID_IDirectMusic failed: %08x\n", hr);
     refcount = IDirectMusic_AddRef(dm);
     ok(refcount == 4, "refcount == %u, expected 4\n", refcount);
-    refcount = IDirectMusic_Release(dm);
+    IDirectMusic_Release(dm);
 
     hr = IDirectMusic8_QueryInterface(dm8, &IID_IUnknown, (void**)&unk);
     ok(hr == S_OK, "QueryInterface for IID_IUnknown failed: %08x\n", hr);
diff --git a/dlls/dplayx/dplay.c b/dlls/dplayx/dplay.c
index 36e97a6..bae6a15 100644
--- a/dlls/dplayx/dplay.c
+++ b/dlls/dplayx/dplay.c
@@ -5785,6 +5785,11 @@ static HRESULT DirectPlayEnumerateAW(LPDPENUMDPCALLBACKA lpEnumCallbackA,
     DWORD max_sizeOfDescriptionA = 0;
     WCHAR *descriptionW = NULL;
     DWORD max_sizeOfDescriptionW = 0;
+    DWORD sizeOfSubKeyName;
+    WCHAR subKeyName[255]; /* 255 is the maximum key size according to MSDN */
+    LONG  ret_value;
+    static GUID *guid_cache;
+    static int cache_count;
     
     if (!lpEnumCallbackA && !lpEnumCallbackW)
     {
@@ -5799,19 +5804,37 @@ static HRESULT DirectPlayEnumerateAW(LPDPENUMDPCALLBACKA lpEnumCallbackA,
 	ERR(": no service provider key in the registry - check your Wine installation !!!\n");
 	return DPERR_GENERIC;
     }
-    
+
+    dwIndex = 0;
+    do
+    {
+	sizeOfSubKeyName = sizeof(subKeyName) / sizeof(WCHAR);
+	ret_value = RegEnumKeyW(hkResult, dwIndex, subKeyName, sizeOfSubKeyName);
+	dwIndex++;
+    }
+    while (ret_value == ERROR_SUCCESS);
+    /* The game Swing from bug 37185 expects GUID values to persist after
+     * the end of the enumeration. */
+    if (cache_count < dwIndex)
+    {
+	HeapFree(GetProcessHeap(), 0, guid_cache);
+	guid_cache = HeapAlloc(GetProcessHeap(), 0, sizeof(GUID) * dwIndex);
+	if (!guid_cache)
+	{
+	    ERR(": failed to alloc required memory.\n");
+	    return DPERR_EXCEPTION;
+	}
+	cache_count = dwIndex;
+    }
     /* Traverse all the service providers we have available */
     dwIndex = 0;
     while (1)
     {
-	WCHAR subKeyName[255]; /* 255 is the maximum key size according to MSDN */
-	DWORD sizeOfSubKeyName = sizeof(subKeyName) / sizeof(WCHAR);
 	HKEY  hkServiceProvider;
-	GUID  serviceProviderGUID;
 	WCHAR guidKeyContent[(2 * 16) + 1 + 6 /* This corresponds to '{....-..-..-..-......}' */ ];
 	DWORD sizeOfGuidKeyContent = sizeof(guidKeyContent);
-	LONG  ret_value;
 	
+	sizeOfSubKeyName = sizeof(subKeyName) / sizeof(WCHAR);
 	ret_value = RegEnumKeyExW(hkResult, dwIndex, subKeyName, &sizeOfSubKeyName,
 				  NULL, NULL, NULL, &filetime);
 	if (ret_value == ERROR_NO_MORE_ITEMS)
@@ -5842,7 +5865,7 @@ static HRESULT DirectPlayEnumerateAW(LPDPENUMDPCALLBACKA lpEnumCallbackA,
 	    ERR(": invalid format for the GUID registry data member for service provider %s (%s).\n", debugstr_w(subKeyName), debugstr_w(guidKeyContent));
 	    continue;
 	}
-	CLSIDFromString(guidKeyContent, &serviceProviderGUID );
+	CLSIDFromString(guidKeyContent, &guid_cache[dwIndex]);
 	
 	/* The enumeration will return FALSE if we are not to continue.
 	 *
@@ -5870,7 +5893,7 @@ static HRESULT DirectPlayEnumerateAW(LPDPENUMDPCALLBACKA lpEnumCallbackA,
 	    RegQueryValueExA(hkServiceProvider, "DescriptionA",
 			     NULL, NULL, (LPBYTE) descriptionA, &sizeOfDescription);
 	    
-	    if (!lpEnumCallbackA(&serviceProviderGUID, descriptionA, 6, 0, lpContext))
+	    if (!lpEnumCallbackA(&guid_cache[dwIndex], descriptionA, 6, 0, lpContext))
 		goto end;
 	}
 	else
@@ -5892,7 +5915,7 @@ static HRESULT DirectPlayEnumerateAW(LPDPENUMDPCALLBACKA lpEnumCallbackA,
 	    RegQueryValueExW(hkServiceProvider, descW,
 			     NULL, NULL, (LPBYTE) descriptionW, &sizeOfDescription);
 
-	    if (!lpEnumCallbackW(&serviceProviderGUID, descriptionW, 6, 0, lpContext))
+	    if (!lpEnumCallbackW(&guid_cache[dwIndex], descriptionW, 6, 0, lpContext))
 		goto end;
 	}
       
diff --git a/dlls/dplayx/tests/dplayx.c b/dlls/dplayx/tests/dplayx.c
index fb6646d..236e1a8 100644
--- a/dlls/dplayx/tests/dplayx.c
+++ b/dlls/dplayx/tests/dplayx.c
@@ -72,6 +72,13 @@ typedef struct tagCallbackData
     UINT dpidSize;
 } CallbackData, *lpCallbackData;
 
+struct provider_data
+{
+    int call_count;
+    GUID *guid_ptr[10];
+    GUID guid_data[10];
+    BOOL ret_value;
+};
 
 static LPSTR get_temp_buffer(void)
 {
@@ -749,6 +756,113 @@ static void test_DirectPlayCreate(void)
 
 }
 
+static BOOL CALLBACK callback_providersA(GUID* guid, char *name, DWORD major, DWORD minor, void *arg)
+{
+    struct provider_data *prov = arg;
+
+    if (!prov) return TRUE;
+
+    if (prov->call_count < sizeof(prov->guid_data) / sizeof(prov->guid_data[0]))
+    {
+        prov->guid_ptr[prov->call_count] = guid;
+        prov->guid_data[prov->call_count] = *guid;
+
+        prov->call_count++;
+    }
+
+    if (prov->ret_value) /* Only trace when looping all providers */
+        trace("Provider #%d '%s' (%d.%d)\n", prov->call_count, name, major, minor);
+    return prov->ret_value;
+}
+
+static BOOL CALLBACK callback_providersW(GUID* guid, WCHAR *name, DWORD major, DWORD minor, void *arg)
+{
+    struct provider_data *prov = arg;
+
+    if (!prov) return TRUE;
+
+    if (prov->call_count < sizeof(prov->guid_data) / sizeof(prov->guid_data[0]))
+    {
+        prov->guid_ptr[prov->call_count] = guid;
+        prov->guid_data[prov->call_count] = *guid;
+
+        prov->call_count++;
+    }
+
+    return prov->ret_value;
+}
+
+static void test_EnumerateProviders(void)
+{
+    HRESULT hr;
+    int i;
+    struct provider_data arg;
+
+    memset(&arg, 0, sizeof(arg));
+    arg.ret_value = TRUE;
+
+    hr = DirectPlayEnumerateA(callback_providersA, NULL);
+    ok(SUCCEEDED(hr), "DirectPlayEnumerateA failed\n");
+
+    SetLastError(0xdeadbeef);
+    hr = DirectPlayEnumerateA(NULL, &arg);
+    ok(FAILED(hr), "DirectPlayEnumerateA expected to fail\n");
+    ok(GetLastError() == 0xdeadbeef, "Expected 0xdeadbeef, got 0x%x\n", GetLastError());
+
+    SetLastError(0xdeadbeef);
+    hr = DirectPlayEnumerateA(NULL, NULL);
+    ok(FAILED(hr), "DirectPlayEnumerateA expected to fail\n");
+    ok(GetLastError() == 0xdeadbeef, "Expected 0xdeadbeef, got 0x%x\n", GetLastError());
+
+    hr = DirectPlayEnumerateA(callback_providersA, &arg);
+    ok(SUCCEEDED(hr), "DirectPlayEnumerateA failed\n");
+    ok(arg.call_count > 0, "Expected at least one valid provider\n");
+    trace("Found %d providers\n", arg.call_count);
+
+    /* The returned GUID values must have persisted after enumeration (bug 37185) */
+    for(i = 0; i < arg.call_count; i++)
+    {
+        ok(IsEqualGUID(arg.guid_ptr[i], &arg.guid_data[i]), "#%d Expected equal GUID values\n", i);
+    }
+
+    memset(&arg, 0, sizeof(arg));
+    arg.ret_value = FALSE;
+    hr = DirectPlayEnumerateA(callback_providersA, &arg);
+    ok(SUCCEEDED(hr), "DirectPlayEnumerateA failed\n");
+    ok(arg.call_count == 1, "Expected 1, got %d\n", arg.call_count);
+
+    hr = DirectPlayEnumerateW(callback_providersW, NULL);
+    ok(SUCCEEDED(hr), "DirectPlayEnumerateW failed\n");
+
+    SetLastError(0xdeadbeef);
+    hr = DirectPlayEnumerateW(NULL, &arg);
+    ok(FAILED(hr), "DirectPlayEnumerateW expected to fail\n");
+    ok(GetLastError() == 0xdeadbeef, "Expected 0xdeadbeef, got 0x%x\n", GetLastError());
+
+    SetLastError(0xdeadbeef);
+    hr = DirectPlayEnumerateW(NULL, NULL);
+    ok(FAILED(hr), "DirectPlayEnumerateW expected to fail\n");
+    ok(GetLastError() == 0xdeadbeef, "Expected 0xdeadbeef, got 0x%x\n", GetLastError());
+
+    memset(&arg, 0, sizeof(arg));
+    arg.ret_value = TRUE;
+    hr = DirectPlayEnumerateW(callback_providersW, &arg);
+    ok(SUCCEEDED(hr), "DirectPlayEnumerateW failed\n");
+    ok(arg.call_count > 0, "Expected at least one valid provider\n");
+
+    /* The returned GUID values must have persisted after enumeration (bug 37185) */
+    for(i = 0; i < arg.call_count; i++)
+    {
+        ok(IsEqualGUID(arg.guid_ptr[i], &arg.guid_data[i]), "#%d Expected equal GUID values\n", i);
+    }
+
+    memset(&arg, 0, sizeof(arg));
+    arg.ret_value = FALSE;
+    hr = DirectPlayEnumerateW(callback_providersW, &arg);
+    ok(SUCCEEDED(hr), "DirectPlayEnumerateW failed\n");
+    ok(arg.call_count == 1, "Expected 1, got %d\n", arg.call_count);
+}
+
 /* EnumConnections */
 
 static BOOL CALLBACK EnumAddress_cb2( REFGUID guidDataType,
@@ -6544,6 +6658,7 @@ START_TEST(dplayx)
 
     test_COM();
     test_COM_dplobby();
+    test_EnumerateProviders();
 
     if (!winetest_interactive)
     {
diff --git a/dlls/dsound/buffer.c b/dlls/dsound/buffer.c
index 36ec132..b1eb9a3 100644
--- a/dlls/dsound/buffer.c
+++ b/dlls/dsound/buffer.c
@@ -994,6 +994,9 @@ void secondarybuffer_destroy(IDirectSoundBufferImpl *This)
     if (ref > 1)
         WARN("Destroying buffer with %u in use interfaces\n", ref - 1);
 
+    if (This->dsbd.dwFlags & DSBCAPS_LOCHARDWARE)
+        This->device->drvcaps.dwFreeHwMixingAllBuffers++;
+
     DirectSoundDevice_RemoveBuffer(This->device, This);
     RtlDeleteResource(&This->lock);
 
diff --git a/dlls/dsound/dsound.c b/dlls/dsound/dsound.c
index 8df778a..ab050b5 100644
--- a/dlls/dsound/dsound.c
+++ b/dlls/dsound/dsound.c
@@ -271,8 +271,15 @@ static HRESULT WINAPI IDirectSound8Impl_GetCaps(IDirectSound8 *iface, DSCAPS *ds
     dscaps->dwMaxHwMixingStaticBuffers     = This->device->drvcaps.dwMaxHwMixingStaticBuffers;
     dscaps->dwMaxHwMixingStreamingBuffers  = This->device->drvcaps.dwMaxHwMixingStreamingBuffers;
     dscaps->dwFreeHwMixingAllBuffers       = This->device->drvcaps.dwFreeHwMixingAllBuffers;
-    dscaps->dwFreeHwMixingStaticBuffers    = This->device->drvcaps.dwFreeHwMixingStaticBuffers;
-    dscaps->dwFreeHwMixingStreamingBuffers = This->device->drvcaps.dwFreeHwMixingStreamingBuffers;
+
+    if (This->device->drvcaps.dwFreeHwMixingAllBuffers > 0) {
+        dscaps->dwFreeHwMixingStaticBuffers    = This->device->drvcaps.dwFreeHwMixingStaticBuffers;
+        dscaps->dwFreeHwMixingStreamingBuffers = This->device->drvcaps.dwFreeHwMixingStreamingBuffers;
+    } else {
+        dscaps->dwFreeHwMixingStaticBuffers    = 0;
+        dscaps->dwFreeHwMixingStreamingBuffers = 0;
+    }
+
     dscaps->dwMaxHw3DAllBuffers            = This->device->drvcaps.dwMaxHw3DAllBuffers;
     dscaps->dwMaxHw3DStaticBuffers         = This->device->drvcaps.dwMaxHw3DStaticBuffers;
     dscaps->dwMaxHw3DStreamingBuffers      = This->device->drvcaps.dwMaxHw3DStreamingBuffers;
@@ -913,9 +920,12 @@ HRESULT DirectSoundDevice_Initialize(DirectSoundDevice ** ppDevice, LPCGUID lpcG
     device->drvcaps.dwPrimaryBuffers = 1;
     device->drvcaps.dwMinSecondarySampleRate = DSBFREQUENCY_MIN;
     device->drvcaps.dwMaxSecondarySampleRate = DSBFREQUENCY_MAX;
-    device->drvcaps.dwMaxHwMixingAllBuffers = 1;
+    device->drvcaps.dwMaxHwMixingAllBuffers = 16;
     device->drvcaps.dwMaxHwMixingStaticBuffers = 1;
     device->drvcaps.dwMaxHwMixingStreamingBuffers = 1;
+    device->drvcaps.dwFreeHwMixingAllBuffers = device->drvcaps.dwMaxHwMixingAllBuffers;
+    device->drvcaps.dwFreeHwMixingStaticBuffers = device->drvcaps.dwMaxHwMixingStaticBuffers;
+    device->drvcaps.dwFreeHwMixingStreamingBuffers = device->drvcaps.dwMaxHwMixingStreamingBuffers;
 
     ZeroMemory(&device->volpan, sizeof(device->volpan));
 
@@ -975,10 +985,12 @@ HRESULT DirectSoundDevice_CreateSoundBuffer(
         TRACE("(lpwfxFormat=%p)\n",dsbd->lpwfxFormat);
     }
 
-    if (dsbd->dwFlags & DSBCAPS_LOCHARDWARE &&
-            !(dsbd->dwFlags & DSBCAPS_PRIMARYBUFFER)) {
-        TRACE("LOCHARDWARE is not supported, returning E_NOTIMPL\n");
-        return E_NOTIMPL;
+    if (!(dsbd->dwFlags & DSBCAPS_PRIMARYBUFFER) &&
+        dsbd->dwFlags & DSBCAPS_LOCHARDWARE &&
+        device->drvcaps.dwFreeHwMixingAllBuffers == 0)
+    {
+        WARN("ran out of emulated hardware buffers\n");
+        return DSERR_ALLOCATED;
     }
 
     if (dsbd->dwFlags & DSBCAPS_PRIMARYBUFFER) {
@@ -1062,9 +1074,11 @@ HRESULT DirectSoundDevice_CreateSoundBuffer(
         }
 
         hres = IDirectSoundBufferImpl_Create(device, &dsb, dsbd);
-        if (dsb)
+        if (dsb) {
             *ppdsb = (IDirectSoundBuffer*)&dsb->IDirectSoundBuffer8_iface;
-        else
+            if (dsbd->dwFlags & DSBCAPS_LOCHARDWARE)
+                device->drvcaps.dwFreeHwMixingAllBuffers--;
+        } else
             WARN("IDirectSoundBufferImpl_Create failed\n");
    }
 
diff --git a/dlls/dsound/dsound_private.h b/dlls/dsound/dsound_private.h
index af2034a..52b2847 100644
--- a/dlls/dsound/dsound_private.h
+++ b/dlls/dsound/dsound_private.h
@@ -219,6 +219,7 @@ HRESULT DSOUND_PrimaryGetPosition(DirectSoundDevice *device, LPDWORD playpos, LP
 LPWAVEFORMATEX DSOUND_CopyFormat(LPCWAVEFORMATEX wfex) DECLSPEC_HIDDEN;
 HRESULT DSOUND_ReopenDevice(DirectSoundDevice *device, BOOL forcewave) DECLSPEC_HIDDEN;
 HRESULT DSOUND_PrimaryOpen(DirectSoundDevice *device) DECLSPEC_HIDDEN;
+DWORD DSOUND_FindSpeakerConfig(IMMDevice *mmdevice, int channels) DECLSPEC_HIDDEN;
 HRESULT primarybuffer_create(DirectSoundDevice *device, IDirectSoundBufferImpl **ppdsb,
     const DSBUFFERDESC *dsbd) DECLSPEC_HIDDEN;
 void primarybuffer_destroy(IDirectSoundBufferImpl *This) DECLSPEC_HIDDEN;
diff --git a/dlls/dsound/primary.c b/dlls/dsound/primary.c
index d3c2689..7d05efd 100644
--- a/dlls/dsound/primary.c
+++ b/dlls/dsound/primary.c
@@ -93,7 +93,10 @@ static HRESULT DSOUND_WaveFormat(DirectSoundDevice *device, IAudioClient *client
         if (FAILED(hr))
             return hr;
 
-        if (mixwfe->Format.nChannels > device->num_speakers) {
+        if (mixwfe->Format.nChannels < device->num_speakers) {
+            device->speaker_config = DSOUND_FindSpeakerConfig(device->mmdevice, mixwfe->Format.nChannels);
+            DSOUND_ParseSpeakerConfig(device);
+        } else if (mixwfe->Format.nChannels > device->num_speakers) {
             mixwfe->Format.nChannels = device->num_speakers;
             mixwfe->Format.nBlockAlign = mixwfe->Format.nChannels * mixwfe->Format.wBitsPerSample / 8;
             mixwfe->Format.nAvgBytesPerSec = mixwfe->Format.nSamplesPerSec * mixwfe->Format.nBlockAlign;
@@ -163,7 +166,7 @@ static HRESULT DSOUND_WaveFormat(DirectSoundDevice *device, IAudioClient *client
     return S_OK;
 }
 
-static DWORD DSOUND_FindSpeakerConfig(IMMDevice *mmdevice)
+DWORD DSOUND_FindSpeakerConfig(IMMDevice *mmdevice, int channels)
 {
     IPropertyStore *store;
     HRESULT hr;
@@ -198,13 +201,13 @@ static DWORD DSOUND_FindSpeakerConfig(IMMDevice *mmdevice)
     PropVariantClear(&pv);
     IPropertyStore_Release(store);
 
-    if ((phys_speakers & KSAUDIO_SPEAKER_5POINT1) == KSAUDIO_SPEAKER_5POINT1)
+    if ((channels >= 6 || channels == 0) && (phys_speakers & KSAUDIO_SPEAKER_5POINT1) == KSAUDIO_SPEAKER_5POINT1)
         return DSSPEAKER_5POINT1_BACK;
-    else if ((phys_speakers & KSAUDIO_SPEAKER_5POINT1_SURROUND) == KSAUDIO_SPEAKER_5POINT1_SURROUND)
+    else if ((channels >= 6 || channels == 0) && (phys_speakers & KSAUDIO_SPEAKER_5POINT1_SURROUND) == KSAUDIO_SPEAKER_5POINT1_SURROUND)
         return DSSPEAKER_5POINT1_SURROUND;
-    else if ((phys_speakers & KSAUDIO_SPEAKER_QUAD) == KSAUDIO_SPEAKER_QUAD)
+    else if ((channels >= 4 || channels == 0) && (phys_speakers & KSAUDIO_SPEAKER_QUAD) == KSAUDIO_SPEAKER_QUAD)
         return DSSPEAKER_QUAD;
-    else if ((phys_speakers & KSAUDIO_SPEAKER_STEREO) == KSAUDIO_SPEAKER_STEREO)
+    else if ((channels >= 2 || channels == 0) && (phys_speakers & KSAUDIO_SPEAKER_STEREO) == KSAUDIO_SPEAKER_STEREO)
         return DSSPEAKER_COMBINED(DSSPEAKER_STEREO, DSSPEAKER_GEOMETRY_WIDE);
     else if ((phys_speakers & KSAUDIO_SPEAKER_MONO) == KSAUDIO_SPEAKER_MONO)
         return DSSPEAKER_MONO;
@@ -247,7 +250,7 @@ HRESULT DSOUND_ReopenDevice(DirectSoundDevice *device, BOOL forcewave)
         return hres;
     }
 
-    device->speaker_config = DSOUND_FindSpeakerConfig(device->mmdevice);
+    device->speaker_config = DSOUND_FindSpeakerConfig(device->mmdevice, 0);
 
     DSOUND_ParseSpeakerConfig(device);
 
diff --git a/dlls/dswave/tests/dswave.c b/dlls/dswave/tests/dswave.c
index 1a96548..ce36d37 100644
--- a/dlls/dswave/tests/dswave.c
+++ b/dlls/dswave/tests/dswave.c
@@ -69,7 +69,7 @@ static void test_COM(void)
     ok(hr == S_OK, "QueryInterface for IID_IPersistStream failed: %08x\n", hr);
     refcount = IPersistStream_AddRef(ps);
     ok(refcount == 4, "refcount == %u, expected 4\n", refcount);
-    refcount = IPersistStream_Release(ps);
+    IPersistStream_Release(ps);
 
     hr = IDirectMusicObject_QueryInterface(dmo, &IID_IUnknown, (void**)&unk);
     ok(hr == S_OK, "QueryInterface for IID_IUnknown failed: %08x\n", hr);
diff --git a/dlls/gdiplus/tests/graphics.c b/dlls/gdiplus/tests/graphics.c
index c9cc463..8ce372b 100644
--- a/dlls/gdiplus/tests/graphics.c
+++ b/dlls/gdiplus/tests/graphics.c
@@ -3769,6 +3769,7 @@ static void test_font_height_scaling(void)
 
     hdc = CreateCompatibleDC(0);
     status = GdipCreateFromHDC(hdc, &graphics);
+    expect(Ok, status);
 
     status = GdipGetDpiY(graphics, &dpi);
     expect(Ok, status);
diff --git a/dlls/hnetcfg/apps.c b/dlls/hnetcfg/apps.c
index dded141..a0530e1 100644
--- a/dlls/hnetcfg/apps.c
+++ b/dlls/hnetcfg/apps.c
@@ -144,6 +144,7 @@ HRESULT get_typeinfo( enum type_id tid, ITypeInfo **ret )
             ITypeInfo_Release( info );
     }
     *ret = typeinfo[tid];
+    ITypeInfo_AddRef(typeinfo[tid]);
     return S_OK;
 }
 
@@ -256,8 +257,12 @@ static HRESULT WINAPI fw_app_get_IpVersion(
 {
     fw_app *This = impl_from_INetFwAuthorizedApplication( iface );
 
-    FIXME("%p, %p\n", This, ipVersion);
-    return E_NOTIMPL;
+    TRACE("%p, %p\n", This, ipVersion);
+
+    if (!ipVersion)
+        return E_POINTER;
+    *ipVersion = NET_FW_IP_VERSION_ANY;
+    return S_OK;
 }
 
 static HRESULT WINAPI fw_app_put_IpVersion(
@@ -266,8 +271,8 @@ static HRESULT WINAPI fw_app_put_IpVersion(
 {
     fw_app *This = impl_from_INetFwAuthorizedApplication( iface );
 
-    FIXME("%p, %u\n", This, ipVersion);
-    return E_NOTIMPL;
+    TRACE("%p, %u\n", This, ipVersion);
+    return S_OK;
 }
 
 static HRESULT WINAPI fw_app_get_Scope(
diff --git a/dlls/iphlpapi/iphlpapi.spec b/dlls/iphlpapi/iphlpapi.spec
index fcb6d72..228f64f 100644
--- a/dlls/iphlpapi/iphlpapi.spec
+++ b/dlls/iphlpapi/iphlpapi.spec
@@ -66,7 +66,7 @@
 #@ stub FlushIpNetTable2
 @ stub FlushIpNetTableFromStack
 #@ stub FlushIpPathTable
-#@ stub FreeMibTable
+@ stdcall FreeMibTable( ptr )
 @ stdcall GetAdapterIndex( wstr ptr )
 @ stub GetAdapterOrderMap
 @ stdcall GetAdaptersAddresses( long long ptr ptr ptr )
diff --git a/dlls/iphlpapi/iphlpapi_main.c b/dlls/iphlpapi/iphlpapi_main.c
index f04e12a..d2f36fe 100644
--- a/dlls/iphlpapi/iphlpapi_main.c
+++ b/dlls/iphlpapi/iphlpapi_main.c
@@ -442,6 +442,20 @@ DWORD WINAPI FlushIpNetTable(DWORD dwIfIndex)
   return ERROR_NOT_SUPPORTED;
 }
 
+/******************************************************************
+ *    FreeMibTable (IPHLPAPI.@)
+ *
+ * Free buffer allocated by network functions
+ *
+ * PARAMS
+ *  ptr     [In] pointer to the buffer to free
+ *
+ */
+void WINAPI FreeMibTable(void *ptr)
+{
+  TRACE("(%p)\n", ptr);
+  HeapFree(GetProcessHeap(), 0, ptr);
+}
 
 /******************************************************************
  *    GetAdapterIndex (IPHLPAPI.@)
@@ -590,6 +604,12 @@ DWORD WINAPI GetAdaptersInfo(PIP_ADAPTER_INFO pAdapterInfo, PULONG pOutBufLen)
                   }
                 }
               }
+              /* If no IP was found it probably means that the interface is not
+               * configured. In this case we have to return a zeroed IP and mask. */
+              if (firstIPAddr) {
+                strcpy(ptr->IpAddressList.IpAddress.String, "0.0.0.0");
+                strcpy(ptr->IpAddressList.IpMask.String, "0.0.0.0");
+              }
               /* Find first router through this interface, which we'll assume
                * is the default gateway for this adapter */
               for (i = 0; i < routeTable->dwNumEntries; i++)
diff --git a/dlls/iphlpapi/tests/iphlpapi.c b/dlls/iphlpapi/tests/iphlpapi.c
index b2d81c0..14bbc5d 100644
--- a/dlls/iphlpapi/tests/iphlpapi.c
+++ b/dlls/iphlpapi/tests/iphlpapi.c
@@ -1118,12 +1118,20 @@ static void testGetAdaptersInfo(void)
     if (apiReturn == ERROR_NO_DATA)
       ; /* no adapter's, that's okay */
     else if (apiReturn == ERROR_BUFFER_OVERFLOW) {
-      PIP_ADAPTER_INFO buf = HeapAlloc(GetProcessHeap(), 0, len);
+      PIP_ADAPTER_INFO ptr, buf = HeapAlloc(GetProcessHeap(), 0, len);
 
       apiReturn = pGetAdaptersInfo(buf, &len);
       ok(apiReturn == NO_ERROR,
        "GetAdaptersInfo(buf, &dwSize) returned %d, expected NO_ERROR\n",
        apiReturn);
+      ptr = buf;
+      while (ptr) {
+        ok(ptr->IpAddressList.IpAddress.String[0], "A valid IP must be present\n");
+        ok(ptr->IpAddressList.IpMask.String[0], "A valid mask must be present\n");
+        trace("Adapter '%s', IP %s, Mask %s\n", ptr->AdapterName,
+              ptr->IpAddressList.IpAddress.String, ptr->IpAddressList.IpMask.String);
+        ptr = ptr->Next;
+      }
       HeapFree(GetProcessHeap(), 0, buf);
     }
   }
diff --git a/dlls/jscript/function.c b/dlls/jscript/function.c
index 276c4f9..43ade98 100644
--- a/dlls/jscript/function.c
+++ b/dlls/jscript/function.c
@@ -205,6 +205,11 @@ static HRESULT invoke_source(script_ctx_t *ctx, FunctionInstance *function, IDis
     scope_chain_t *scope;
     HRESULT hres;
 
+    if(ctx->state == SCRIPTSTATE_UNINITIALIZED || ctx->state == SCRIPTSTATE_CLOSED) {
+        WARN("Script engine state does not allow running code.\n");
+        return E_UNEXPECTED;
+    }
+
     if(!function->func_code) {
         FIXME("no source\n");
         return E_FAIL;
diff --git a/dlls/jscript/tests/run.c b/dlls/jscript/tests/run.c
index c0a62b8..1b895bb 100644
--- a/dlls/jscript/tests/run.c
+++ b/dlls/jscript/tests/run.c
@@ -139,6 +139,7 @@ DEFINE_EXPECT(DeleteMemberByDispID_false);
 #define DISPID_GLOBAL_TESTNORES     0x1019
 #define DISPID_GLOBAL_DISPEXFUNC    0x101a
 #define DISPID_GLOBAL_TESTPROPPUTREF 0x101b
+#define DISPID_GLOBAL_GETSCRIPTSTATE 0x101c
 
 #define DISPID_GLOBAL_TESTPROPDELETE    0x2000
 #define DISPID_GLOBAL_TESTNOPROPDELETE  0x2001
@@ -161,6 +162,7 @@ static const char *test_name = "(null)";
 static IDispatch *script_disp;
 static int invoke_version;
 static IActiveScriptError *script_error;
+static IActiveScript *script_engine;
 static const CLSID *engine_clsid = &CLSID_JScript;
 
 /* Returns true if the user interface is in English. Note that this does not
@@ -756,6 +758,11 @@ static HRESULT WINAPI Global_GetDispID(IDispatchEx *iface, BSTR bstrName, DWORD
         return S_OK;
     }
 
+    if(!strcmp_wa(bstrName, "getScriptState")) {
+        *pid = DISPID_GLOBAL_GETSCRIPTSTATE;
+        return S_OK;
+    }
+
     if(strict_dispid_check && strcmp_wa(bstrName, "t"))
         ok(0, "unexpected call %s\n", wine_dbgstr_w(bstrName));
     return DISP_E_UNKNOWNNAME;
@@ -1108,6 +1115,18 @@ static HRESULT WINAPI Global_InvokeEx(IDispatchEx *iface, DISPID id, LCID lcid,
 
         return S_OK;
 
+    case DISPID_GLOBAL_GETSCRIPTSTATE: {
+        SCRIPTSTATE state;
+        HRESULT hres;
+
+        hres = IActiveScript_GetScriptState(script_engine, &state);
+        ok(hres == S_OK, "GetScriptState failed: %08x\n", hres);
+
+        V_VT(pvarRes) = VT_I4;
+        V_I4(pvarRes) = state;
+        return S_OK;
+    }
+
     case DISPID_GLOBAL_PROPARGPUT:
         CHECK_EXPECT(global_propargput_i);
         ok(wFlags == INVOKE_PROPERTYPUT, "wFlags = %x\n", wFlags);
@@ -1908,7 +1927,48 @@ static void test_isvisible(BOOL global_members)
     IActiveScriptParse_Release(parser);
 }
 
-static HRESULT parse_script_expr(const char *expr, VARIANT *res)
+static void test_start(void)
+{
+    IActiveScriptParse *parser;
+    IActiveScript *engine;
+    BSTR str;
+    HRESULT hres;
+
+    script_engine = engine = create_script();
+    if(!engine)
+        return;
+
+    hres = IActiveScript_QueryInterface(engine, &IID_IActiveScriptParse, (void**)&parser);
+    ok(hres == S_OK, "Could not get IActiveScriptParse: %08x\n", hres);
+
+    hres = IActiveScriptParse_InitNew(parser);
+    ok(hres == S_OK, "InitNew failed: %08x\n", hres);
+
+    hres = IActiveScript_SetScriptSite(engine, &ActiveScriptSite);
+    ok(hres == S_OK, "SetScriptSite failed: %08x\n", hres);
+
+    hres = IActiveScript_AddNamedItem(engine, testW, SCRIPTITEM_ISVISIBLE|SCRIPTITEM_ISSOURCE|SCRIPTITEM_GLOBALMEMBERS);
+    ok(hres == S_OK, "AddNamedItem failed: %08x\n", hres);
+
+    str = a2bstr("ok(getScriptState() === 5, \"getScriptState = \" + getScriptState());\n"
+                 "reportSuccess();");
+    hres = IActiveScriptParse_ParseScriptText(parser, str, NULL, NULL, NULL, 0, 0, 0, NULL, NULL);
+    ok(hres == S_OK, "ParseScriptText failed: %08x\n", hres);
+    SysFreeString(str);
+
+    SET_EXPECT(global_success_d);
+    SET_EXPECT(global_success_i);
+    hres = IActiveScript_SetScriptState(engine, SCRIPTSTATE_STARTED);
+    ok(hres == S_OK, "SetScriptState(SCRIPTSTATE_STARTED) failed: %08x\n", hres);
+    CHECK_CALLED(global_success_d);
+    CHECK_CALLED(global_success_i);
+
+    IActiveScript_Release(engine);
+    IActiveScriptParse_Release(parser);
+    script_engine = NULL;
+}
+
+static HRESULT parse_script_expr(const char *expr, VARIANT *res, IActiveScript **engine_ret)
 {
     IActiveScriptParse *parser;
     IActiveScript *engine;
@@ -1939,9 +1999,14 @@ static HRESULT parse_script_expr(const char *expr, VARIANT *res)
     hres = IActiveScriptParse_ParseScriptText(parser, str, NULL, NULL, NULL, 0, 0, SCRIPTTEXT_ISEXPRESSION, res, NULL);
     SysFreeString(str);
 
-    IActiveScript_Release(engine);
     IActiveScriptParse_Release(parser);
 
+    if(engine_ret) {
+        *engine_ret = engine;
+    }else {
+        IActiveScript_Close(engine);
+        IActiveScript_Release(engine);
+    }
     return hres;
 }
 
@@ -1952,7 +2017,7 @@ static void test_default_value(void)
     VARIANT v;
     HRESULT hres;
 
-    hres = parse_script_expr("new Date()", &v);
+    hres = parse_script_expr("new Date()", &v, NULL);
     ok(hres == S_OK, "parse_script_expr failed: %08x\n", hres);
     ok(V_VT(&v) == VT_DISPATCH, "V_VT(v) = %d\n", V_VT(&v));
     disp = V_DISPATCH(&v);
@@ -1976,38 +2041,38 @@ static void test_script_exprs(void)
 
     testing_expr = TRUE;
 
-    hres = parse_script_expr("true", &v);
+    hres = parse_script_expr("true", &v, NULL);
     ok(hres == S_OK, "parse_script_expr failed: %08x\n", hres);
     ok(V_VT(&v) == VT_BOOL, "V_VT(v) = %d\n", V_VT(&v));
     ok(V_BOOL(&v) == VARIANT_TRUE, "V_BOOL(v) = %x\n", V_BOOL(&v));
 
-    hres = parse_script_expr("false, true", &v);
+    hres = parse_script_expr("false, true", &v, NULL);
     ok(hres == S_OK, "parse_script_expr failed: %08x\n", hres);
     ok(V_VT(&v) == VT_BOOL, "V_VT(v) = %d\n", V_VT(&v));
     ok(V_BOOL(&v) == VARIANT_TRUE, "V_BOOL(v) = %x\n", V_BOOL(&v));
 
     SET_EXPECT(global_success_d);
     SET_EXPECT(global_success_i);
-    hres = parse_script_expr("reportSuccess(); true", &v);
+    hres = parse_script_expr("reportSuccess(); true", &v, NULL);
     ok(hres == S_OK, "parse_script_expr failed: %08x\n", hres);
     ok(V_VT(&v) == VT_BOOL, "V_VT(v) = %d\n", V_VT(&v));
     ok(V_BOOL(&v) == VARIANT_TRUE, "V_BOOL(v) = %x\n", V_BOOL(&v));
     CHECK_CALLED(global_success_d);
     CHECK_CALLED(global_success_i);
 
-    hres = parse_script_expr("if(false) true", &v);
+    hres = parse_script_expr("if(false) true", &v, NULL);
     ok(hres == S_OK, "parse_script_expr failed: %08x\n", hres);
     ok(V_VT(&v) == VT_EMPTY, "V_VT(v) = %d\n", V_VT(&v));
 
-    hres = parse_script_expr("return testPropGet", &v);
+    hres = parse_script_expr("return testPropGet", &v, NULL);
     ok(hres == 0x800a03fa, "parse_script_expr failed: %08x\n", hres);
 
-    hres = parse_script_expr("reportSuccess(); return true", &v);
+    hres = parse_script_expr("reportSuccess(); return true", &v, NULL);
     ok(hres == 0x800a03fa, "parse_script_expr failed: %08x\n", hres);
 
     SET_EXPECT(global_success_d);
     SET_EXPECT(global_success_i);
-    hres = parse_script_expr("reportSuccess(); true", NULL);
+    hres = parse_script_expr("reportSuccess(); true", NULL, NULL);
     ok(hres == S_OK, "parse_script_expr failed: %08x\n", hres);
     CHECK_CALLED(global_success_d);
     CHECK_CALLED(global_success_i);
@@ -2017,6 +2082,64 @@ static void test_script_exprs(void)
     testing_expr = FALSE;
 }
 
+static void test_invokeex(void)
+{
+    DISPID func_id, prop_id;
+    DISPPARAMS dp = {NULL};
+    IActiveScript *script;
+    IDispatchEx *dispex;
+    VARIANT v;
+    BSTR str;
+    HRESULT hres;
+
+    hres = parse_script_expr("var o = {func: function() {return 3;}, prop: 6}; o", &v, &script);
+    ok(hres == S_OK, "parse_script_expr failed: %08x\n", hres);
+    ok(V_VT(&v) == VT_DISPATCH, "V_VT(v) = %d\n", V_VT(&v));
+
+    hres = IDispatch_QueryInterface(V_DISPATCH(&v), &IID_IDispatchEx, (void**)&dispex);
+    ok(hres == S_OK, "Could not get IDispatchEx iface: %08x\n", hres);
+    VariantClear(&v);
+
+    str = a2bstr("func");
+    hres = IDispatchEx_GetDispID(dispex, str, 0, &func_id);
+    SysFreeString(str);
+    ok(hres == S_OK, "GetDispID failed: %08x\n", hres);
+
+    str = a2bstr("prop");
+    hres = IDispatchEx_GetDispID(dispex, str, 0, &prop_id);
+    SysFreeString(str);
+    ok(hres == S_OK, "GetDispID failed: %08x\n", hres);
+
+    hres = IDispatchEx_InvokeEx(dispex, func_id, 0, DISPATCH_METHOD, &dp, &v, NULL, NULL);
+    ok(hres == S_OK, "InvokeEx failed: %08x\n", hres);
+    ok(V_VT(&v) == VT_I4, "V_VT(v) = %d\n", V_VT(&v));
+    ok(V_I4(&v) == 3, "V_I4(v) = %d\n", V_I4(&v));
+
+    hres = IDispatchEx_InvokeEx(dispex, prop_id, 0, DISPATCH_PROPERTYGET, &dp, &v, NULL, NULL);
+    ok(hres == S_OK, "InvokeEx failed: %08x\n", hres);
+    ok(V_VT(&v) == VT_I4, "V_VT(v) = %d\n", V_VT(&v));
+    ok(V_I4(&v) == 6, "V_I4(v) = %d\n", V_I4(&v));
+
+    hres = IActiveScript_SetScriptState(script, SCRIPTSTATE_UNINITIALIZED);
+    ok(hres == S_OK, "SetScriptState(SCRIPTSTATE_STARTED) failed: %08x\n", hres);
+
+    str = a2bstr("func");
+    hres = IDispatchEx_GetDispID(dispex, str, 0, &func_id);
+    SysFreeString(str);
+    ok(hres == S_OK, "GetDispID failed: %08x\n", hres);
+
+    hres = IDispatchEx_InvokeEx(dispex, func_id, 0, DISPATCH_METHOD, &dp, &v, NULL, NULL);
+    ok(hres == E_UNEXPECTED || broken(hres == 0x800a1393), "InvokeEx failed: %08x\n", hres);
+
+    hres = IDispatchEx_InvokeEx(dispex, prop_id, 0, DISPATCH_PROPERTYGET, &dp, &v, NULL, NULL);
+    ok(hres == S_OK, "InvokeEx failed: %08x\n", hres);
+    ok(V_VT(&v) == VT_I4, "V_VT(v) = %d\n", V_VT(&v));
+    ok(V_I4(&v) == 6, "V_I4(v) = %d\n", V_I4(&v));
+
+    IDispatchEx_Release(dispex);
+    IActiveScript_Release(script);
+}
+
 struct bom_test
 {
     WCHAR str[1024];
@@ -2317,6 +2440,7 @@ static BOOL run_tests(void)
 
     test_isvisible(FALSE);
     test_isvisible(TRUE);
+    test_start();
 
     parse_script_af(0, "test.testThis2(this);");
     parse_script_af(0, "(function () { test.testThis2(this); })();");
@@ -2335,6 +2459,7 @@ static BOOL run_tests(void)
     ok(hres != S_OK, "ParseScriptText have not failed\n");
 
     test_script_exprs();
+    test_invokeex();
 
     parse_script_with_error_a(
         "?",
diff --git a/dlls/kernel32/except.c b/dlls/kernel32/except.c
index 77ec91d..bd50e88 100644
--- a/dlls/kernel32/except.c
+++ b/dlls/kernel32/except.c
@@ -461,7 +461,7 @@ LONG WINAPI UnhandledExceptionFilter(PEXCEPTION_POINTERS epointers)
 /***********************************************************************
  *            SetUnhandledExceptionFilter   (KERNEL32.@)
  */
-LPTOP_LEVEL_EXCEPTION_FILTER WINAPI SetUnhandledExceptionFilter(
+LPTOP_LEVEL_EXCEPTION_FILTER WINAPI DECLSPEC_HOTPATCH SetUnhandledExceptionFilter(
                                           LPTOP_LEVEL_EXCEPTION_FILTER filter )
 {
     LPTOP_LEVEL_EXCEPTION_FILTER old = top_filter;
diff --git a/dlls/kernel32/process.c b/dlls/kernel32/process.c
index 0a087ab..396b7d4 100644
--- a/dlls/kernel32/process.c
+++ b/dlls/kernel32/process.c
@@ -3755,7 +3755,7 @@ DWORD WINAPI RegisterServiceProcess(DWORD dwProcessId, DWORD dwType)
  */
 BOOL WINAPI IsWow64Process(HANDLE hProcess, PBOOL Wow64Process)
 {
-    ULONG pbi;
+    ULONG_PTR pbi;
     NTSTATUS status;
 
     status = NtQueryInformationProcess( hProcess, ProcessWow64Information, &pbi, sizeof(pbi), NULL );
diff --git a/dlls/kernel32/tests/process.c b/dlls/kernel32/tests/process.c
index 218a0d3..d7d3148 100644
--- a/dlls/kernel32/tests/process.c
+++ b/dlls/kernel32/tests/process.c
@@ -1863,6 +1863,62 @@ static void test_Handles(void)
     SetStdHandle( STD_ERROR_HANDLE, handle );
 }
 
+static void test_IsWow64Process(void)
+{
+    PROCESS_INFORMATION pi;
+    STARTUPINFOA si;
+    DWORD ret;
+    BOOL is_wow64;
+    static char cmdline[] = "C:\\Program Files\\Internet Explorer\\iexplore.exe";
+    static char cmdline_wow64[] = "C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe";
+
+    if (!pIsWow64Process)
+    {
+        skip("IsWow64Process is not available\n");
+        return;
+    }
+
+    memset(&si, 0, sizeof(si));
+    si.cb = sizeof(si);
+    si.dwFlags = STARTF_USESHOWWINDOW;
+    si.wShowWindow = SW_HIDE;
+    ret = CreateProcessA(NULL, cmdline_wow64, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi);
+    if (ret)
+    {
+        trace("Created process %s\n", cmdline_wow64);
+        is_wow64 = FALSE;
+        ret = pIsWow64Process(pi.hProcess, &is_wow64);
+        ok(ret, "IsWow64Process failed.\n");
+        ok(is_wow64, "is_wow64 returned FALSE.\n");
+
+        ret = TerminateProcess(pi.hProcess, 0);
+        ok(ret, "TerminateProcess error\n");
+
+        CloseHandle(pi.hProcess);
+        CloseHandle(pi.hThread);
+    }
+
+    memset(&si, 0, sizeof(si));
+    si.cb = sizeof(si);
+    si.dwFlags = STARTF_USESHOWWINDOW;
+    si.wShowWindow = SW_HIDE;
+    ret = CreateProcessA(NULL, cmdline, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi);
+    if (ret)
+    {
+        trace("Created process %s\n", cmdline);
+        is_wow64 = TRUE;
+        ret = pIsWow64Process(pi.hProcess, &is_wow64);
+        ok(ret, "IsWow64Process failed.\n");
+        ok(!is_wow64, "is_wow64 returned TRUE.\n");
+
+        ret = TerminateProcess(pi.hProcess, 0);
+        ok(ret, "TerminateProcess error\n");
+
+        CloseHandle(pi.hProcess);
+        CloseHandle(pi.hThread);
+    }
+}
+
 static void test_SystemInfo(void)
 {
     SYSTEM_INFO si, nsi;
@@ -2089,6 +2145,7 @@ START_TEST(process)
     test_QueryFullProcessImageNameA();
     test_QueryFullProcessImageNameW();
     test_Handles();
+    test_IsWow64Process();
     test_SystemInfo();
     test_RegistryQuota();
     test_DuplicateHandle();
diff --git a/dlls/mciwave/mciwave.c b/dlls/mciwave/mciwave.c
index c7992fb..fd4d6f6 100644
--- a/dlls/mciwave/mciwave.c
+++ b/dlls/mciwave/mciwave.c
@@ -1118,7 +1118,7 @@ static DWORD WAVE_mciRecord(MCIDEVICEID wDevID, DWORD_PTR dwFlags, DWORD_PTR pmt
 
     TRACE("Recording (normalized) from byte=%u for %u bytes\n", wmw->dwPosition, end - wmw->dwPosition);
 
-    dwRet = waveInStart(wmw->hWave);
+    waveInStart(wmw->hWave);
 
     if (hEvent) SetEvent(hEvent);
 
diff --git a/dlls/mshtml/dispex.c b/dlls/mshtml/dispex.c
index 7f6d5c5..a97f09d 100644
--- a/dlls/mshtml/dispex.c
+++ b/dlls/mshtml/dispex.c
@@ -345,9 +345,18 @@ static dispex_data_t *preprocess_dispex_data(DispatchEx *This)
     }
 
     data = heap_alloc(sizeof(dispex_data_t));
+    if (!data) {
+        ERR("Out of memory\n");
+        return NULL;
+    }
     data->func_cnt = 0;
     data->func_disp_cnt = 0;
     data->funcs = heap_alloc_zero(size*sizeof(func_info_t));
+    if (!data->funcs) {
+        heap_free (data);
+        ERR("Out of memory\n");
+        return NULL;
+    }
     list_add_tail(&dispex_data_list, &data->entry);
 
     while(*tid) {
diff --git a/dlls/mstask/tests/task_trigger.c b/dlls/mstask/tests/task_trigger.c
index 0b64211..0a68a19 100644
--- a/dlls/mstask/tests/task_trigger.c
+++ b/dlls/mstask/tests/task_trigger.c
@@ -282,7 +282,6 @@ static void test_SetTrigger_GetTrigger(void)
     normal_trigger_state.wStartHour = 24;
     hres = ITaskTrigger_SetTrigger(test_trigger, &normal_trigger_state);
     ok(hres == E_INVALIDARG, "Expected E_INVALIDARG: 0x%08x\n", hres);
-    normal_trigger_state.wStartHour = 3;
     normal_trigger_state.wStartHour = 60;
     hres = ITaskTrigger_SetTrigger(test_trigger, &normal_trigger_state);
     ok(hres == E_INVALIDARG, "Expected E_INVALIDARG: 0x%08x\n", hres);
diff --git a/dlls/ntdll/exception.c b/dlls/ntdll/exception.c
index 5b4abb6..daca45a 100644
--- a/dlls/ntdll/exception.c
+++ b/dlls/ntdll/exception.c
@@ -286,7 +286,7 @@ ULONG WINAPI RtlRemoveVectoredContinueHandler( PVOID handler )
 /*******************************************************************
  *         RtlAddVectoredExceptionHandler   (NTDLL.@)
  */
-PVOID WINAPI RtlAddVectoredExceptionHandler( ULONG first, PVECTORED_EXCEPTION_HANDLER func )
+PVOID WINAPI DECLSPEC_HOTPATCH RtlAddVectoredExceptionHandler( ULONG first, PVECTORED_EXCEPTION_HANDLER func )
 {
     return add_vectored_handler( &vectored_exception_handlers, first, func );
 }
diff --git a/dlls/ntdll/process.c b/dlls/ntdll/process.c
index 633a668..3defb6e 100644
--- a/dlls/ntdll/process.c
+++ b/dlls/ntdll/process.c
@@ -403,10 +403,13 @@ NTSTATUS WINAPI NtQueryInformationProcess(
         break;
 
     case ProcessWow64Information:
-        len = sizeof(DWORD);
-        if (ProcessInformationLength == len)
+        len = sizeof(ULONG_PTR);
+        if (ProcessInformationLength != len) ret = STATUS_INFO_LENGTH_MISMATCH;
+        else if (!ProcessInformation) ret = STATUS_ACCESS_VIOLATION;
+        else if(!ProcessHandle) ret = STATUS_INVALID_HANDLE;
+        else
         {
-            DWORD val = 0;
+            ULONG_PTR val = 0;
 
             if (ProcessHandle == GetCurrentProcess()) val = is_wow64;
             else if (server_cpus & (1 << CPU_x86_64))
@@ -418,9 +421,8 @@ NTSTATUS WINAPI NtQueryInformationProcess(
                 }
                 SERVER_END_REQ;
             }
-            *(DWORD *)ProcessInformation = val;
+            *(ULONG_PTR *)ProcessInformation = val;
         }
-        else ret = STATUS_INFO_LENGTH_MISMATCH;
         break;
     case ProcessImageFileName:
         /* FIXME: this will return a DOS path. Windows returns an NT path. Changing this would require also changing kernel32.QueryFullProcessImageName.
diff --git a/dlls/ntdll/tests/info.c b/dlls/ntdll/tests/info.c
index af00401..5fff490 100644
--- a/dlls/ntdll/tests/info.c
+++ b/dlls/ntdll/tests/info.c
@@ -737,6 +737,84 @@ static void test_query_processor_power_info(void)
     HeapFree(GetProcessHeap(), 0, ppi);
 }
 
+static void test_query_process_wow64(void)
+{
+    NTSTATUS status;
+    ULONG ReturnLength;
+    ULONG_PTR pbi[2], dummy;
+
+    memset(&dummy, 0xcc, sizeof(dummy));
+
+    /* Do not give a handle and buffer */
+    status = pNtQueryInformationProcess(NULL, ProcessWow64Information, NULL, 0, NULL);
+    ok( status == STATUS_INFO_LENGTH_MISMATCH, "Expected STATUS_INFO_LENGTH_MISMATCH, got %08x\n", status);
+
+    /* Use a correct info class and buffer size, but still no handle and buffer */
+    status = pNtQueryInformationProcess(NULL, ProcessWow64Information, NULL, sizeof(ULONG_PTR), NULL);
+    ok( status == STATUS_ACCESS_VIOLATION || status == STATUS_INVALID_HANDLE,
+        "Expected STATUS_ACCESS_VIOLATION or STATUS_INVALID_HANDLE, got %08x\n", status);
+
+    /* Use a correct info class, buffer size and handle, but no buffer */
+    status = pNtQueryInformationProcess(GetCurrentProcess(), ProcessWow64Information, NULL, sizeof(ULONG_PTR), NULL);
+    ok( status == STATUS_ACCESS_VIOLATION , "Expected STATUS_ACCESS_VIOLATION, got %08x\n", status);
+
+    /* Use a correct info class, buffer and buffer size, but no handle */
+    pbi[0] = pbi[1] = dummy;
+    status = pNtQueryInformationProcess(NULL, ProcessWow64Information, pbi, sizeof(ULONG_PTR), NULL);
+    ok( status == STATUS_INVALID_HANDLE, "Expected STATUS_INVALID_HANDLE, got %08x\n", status);
+    ok( pbi[0] == dummy, "pbi[0] changed to %lx\n", pbi[0]);
+    ok( pbi[1] == dummy, "pbi[1] changed to %lx\n", pbi[1]);
+
+    /* Use a greater buffer size */
+    pbi[0] = pbi[1] = dummy;
+    status = pNtQueryInformationProcess(NULL, ProcessWow64Information, pbi, sizeof(ULONG_PTR) + 1, NULL);
+    ok( status == STATUS_INFO_LENGTH_MISMATCH, "Expected STATUS_INFO_LENGTH_MISMATCH, got %08x\n", status);
+    ok( pbi[0] == dummy, "pbi[0] changed to %lx\n", pbi[0]);
+    ok( pbi[1] == dummy, "pbi[1] changed to %lx\n", pbi[1]);
+
+    /* Use no ReturnLength */
+    pbi[0] = pbi[1] = dummy;
+    status = pNtQueryInformationProcess(GetCurrentProcess(), ProcessWow64Information, pbi, sizeof(ULONG_PTR), NULL);
+    ok( status == STATUS_SUCCESS, "Expected STATUS_SUCCESS, got %08x\n", status);
+    trace( "Platform is_wow64 %d, ProcessInformation of ProcessWow64Information %lx\n", is_wow64, pbi[0]);
+    ok( is_wow64 == (pbi[0] != 0), "is_wow64 %x, pbi[0] %lx\n", is_wow64, pbi[0]);
+    ok( pbi[0] != dummy, "pbi[0] %lx\n", pbi[0]);
+    ok( pbi[1] == dummy, "pbi[1] changed to %lx\n", pbi[1]);
+    /* Test written size on 64 bit by checking high 32 bit buffer */
+    if (sizeof(ULONG_PTR) > sizeof(DWORD))
+    {
+        DWORD *ptr = (DWORD *)pbi;
+        ok( ptr[1] != (DWORD)dummy, "ptr[1] unchanged!\n");
+    }
+
+    /* Finally some correct calls */
+    pbi[0] = pbi[1] = dummy;
+    ReturnLength = 0xdeadbeef;
+    status = pNtQueryInformationProcess(GetCurrentProcess(), ProcessWow64Information, pbi, sizeof(ULONG_PTR), &ReturnLength);
+    ok( status == STATUS_SUCCESS, "Expected STATUS_SUCCESS, got %08x\n", status);
+    ok( is_wow64 == (pbi[0] != 0), "is_wow64 %x, pbi[0] %lx\n", is_wow64, pbi[0]);
+    ok( pbi[1] == dummy, "pbi[1] changed to %lx\n", pbi[1]);
+    ok( ReturnLength == sizeof(ULONG_PTR), "Inconsistent length %d\n", ReturnLength);
+
+    /* Everything is correct except a too small buffer size */
+    pbi[0] = pbi[1] = dummy;
+    ReturnLength = 0xdeadbeef;
+    status = pNtQueryInformationProcess(GetCurrentProcess(), ProcessWow64Information, pbi, sizeof(ULONG_PTR) - 1, &ReturnLength);
+    ok( status == STATUS_INFO_LENGTH_MISMATCH, "Expected STATUS_INFO_LENGTH_MISMATCH, got %08x\n", status);
+    ok( pbi[0] == dummy, "pbi[0] changed to %lx\n", pbi[0]);
+    ok( pbi[1] == dummy, "pbi[1] changed to %lx\n", pbi[1]);
+    todo_wine ok( ReturnLength == 0xdeadbeef, "Expected 0xdeadbeef, got %d\n", ReturnLength);
+
+    /* Everything is correct except a too large buffer size */
+    pbi[0] = pbi[1] = dummy;
+    ReturnLength = 0xdeadbeef;
+    status = pNtQueryInformationProcess(GetCurrentProcess(), ProcessWow64Information, pbi, sizeof(ULONG_PTR) + 1, &ReturnLength);
+    ok( status == STATUS_INFO_LENGTH_MISMATCH, "Expected STATUS_INFO_LENGTH_MISMATCH, got %08x\n", status);
+    ok( pbi[0] == dummy, "pbi[0] changed to %lx\n", pbi[0]);
+    ok( pbi[1] == dummy, "pbi[1] changed to %lx\n", pbi[1]);
+    todo_wine ok( ReturnLength == 0xdeadbeef, "Expected 0xdeadbeef, got %d\n", ReturnLength);
+}
+
 static void test_query_process_basic(void)
 {
     NTSTATUS status;
@@ -1714,6 +1792,10 @@ START_TEST(info)
     trace("Starting test_query_process_handlecount()\n");
     test_query_process_handlecount();
 
+    /* 0x1A ProcessWow64Information */
+    trace("Starting test_query_process_wow64()\n");
+    test_query_process_wow64();
+
     /* 0x1B ProcessImageFileName */
     trace("Starting test_query_process_image_file_name()\n");
     test_query_process_image_file_name();
diff --git a/dlls/ntoskrnl.exe/ntoskrnl.c b/dlls/ntoskrnl.exe/ntoskrnl.c
index c10377a..af1626d 100644
--- a/dlls/ntoskrnl.exe/ntoskrnl.c
+++ b/dlls/ntoskrnl.exe/ntoskrnl.c
@@ -143,6 +143,7 @@ static NTSTATUS process_ioctl( DEVICE_OBJECT *device, ULONG code, void *in_buff,
     IRP irp;
     MDL mdl;
     IO_STACK_LOCATION irpsp;
+    FILE_OBJECT file;
     PDRIVER_DISPATCH dispatch = device->DriverObject->MajorFunction[IRP_MJ_DEVICE_CONTROL];
     NTSTATUS status;
     LARGE_INTEGER count;
@@ -153,6 +154,7 @@ static NTSTATUS process_ioctl( DEVICE_OBJECT *device, ULONG code, void *in_buff,
     memset( &irp, 0x55, sizeof(irp) );
     memset( &irpsp, 0x66, sizeof(irpsp) );
     memset( &mdl, 0x77, sizeof(mdl) );
+    memset( &file, 0x88, sizeof(file) );
 
     irp.RequestorMode = UserMode;
     if ((code & 3) == METHOD_BUFFERED)
@@ -167,6 +169,7 @@ static NTSTATUS process_ioctl( DEVICE_OBJECT *device, ULONG code, void *in_buff,
     irp.UserBuffer = out_buff;
     irp.MdlAddress = &mdl;
     irp.Tail.Overlay.s.u2.CurrentStackLocation = &irpsp;
+    irp.Tail.Overlay.OriginalFileObject = &file;
     irp.UserIosb = NULL;
 
     irpsp.MajorFunction = IRP_MJ_DEVICE_CONTROL;
@@ -183,6 +186,9 @@ static NTSTATUS process_ioctl( DEVICE_OBJECT *device, ULONG code, void *in_buff,
     mdl.ByteCount = *out_size;
     mdl.ByteOffset = 0;
 
+    file.FsContext = NULL;
+    file.FsContext2 = NULL;
+
     device->CurrentIrp = &irp;
 
     KeQueryTickCount( &count );  /* update the global KeTickCount */
diff --git a/dlls/ole32/compobj.c b/dlls/ole32/compobj.c
index da466c4..82cc77d 100644
--- a/dlls/ole32/compobj.c
+++ b/dlls/ole32/compobj.c
@@ -1948,7 +1948,7 @@ HRESULT WINAPI CoInitializeEx(LPVOID lpReserved, DWORD dwCoInit)
  * SEE ALSO
  *   CoInitializeEx
  */
-void WINAPI CoUninitialize(void)
+void WINAPI DECLSPEC_HOTPATCH CoUninitialize(void)
 {
   struct oletls * info = COM_CurrentInfo();
   LONG lCOMRefCnt;
diff --git a/dlls/ole32/ole2.c b/dlls/ole32/ole2.c
index 786fdb4..b9cc1f0 100644
--- a/dlls/ole32/ole2.c
+++ b/dlls/ole32/ole2.c
@@ -231,7 +231,7 @@ HRESULT WINAPI OleInitialize(LPVOID reserved)
 /******************************************************************************
  *		OleUninitialize	[OLE32.@]
  */
-void WINAPI OleUninitialize(void)
+void WINAPI DECLSPEC_HOTPATCH OleUninitialize(void)
 {
   TRACE("()\n");
 
@@ -2407,11 +2407,12 @@ static void OLEDD_TrackStateChange(TrackerWindowInfo* trackerInfo)
 	 */
         case DRAGDROP_S_DROP:
           if (*trackerInfo->pdwEffect != DROPEFFECT_NONE)
-            trackerInfo->returnValue =  IDropTarget_Drop(trackerInfo->curDragTarget,
-                                                         trackerInfo->dataObject,
-                                                         trackerInfo->dwKeyState,
-                                                         trackerInfo->curMousePos,
-                                                         trackerInfo->pdwEffect);
+          {
+            hr = IDropTarget_Drop(trackerInfo->curDragTarget, trackerInfo->dataObject,
+                    trackerInfo->dwKeyState, trackerInfo->curMousePos, trackerInfo->pdwEffect);
+            if (FAILED(hr))
+              trackerInfo->returnValue = hr;
+          }
           else
             IDropTarget_DragLeave(trackerInfo->curDragTarget);
           break;
diff --git a/dlls/oleaut32/varformat.c b/dlls/oleaut32/varformat.c
index 0e1c370..ec52a1e 100644
--- a/dlls/oleaut32/varformat.c
+++ b/dlls/oleaut32/varformat.c
@@ -2326,7 +2326,7 @@ HRESULT WINAPI VarFormatNumber(LPVARIANT pVarIn, INT nDigits, INT nLeading, INT
     GetLocaleInfoW(LOCALE_USER_DEFAULT, LOCALE_SDECIMAL, decimal,
                    sizeof(decimal)/sizeof(WCHAR));
     numfmt.lpThousandSep = thousands;
-    GetLocaleInfoW(LOCALE_USER_DEFAULT, LOCALE_SDECIMAL, thousands,
+    GetLocaleInfoW(LOCALE_USER_DEFAULT, LOCALE_STHOUSAND, thousands,
                    sizeof(thousands)/sizeof(WCHAR));
 
     if (GetNumberFormatW(LOCALE_USER_DEFAULT, 0, V_BSTR(&vStr), &numfmt,
diff --git a/dlls/opengl32/make_opengl b/dlls/opengl32/make_opengl
index b0b9c00..9ca5ebd 100755
--- a/dlls/opengl32/make_opengl
+++ b/dlls/opengl32/make_opengl
@@ -250,20 +250,25 @@ sub GenerateThunk($$$$)
     for (my $i = 0; $i < @{$func_ref->[1]}; $i++) {
         my $type = $func_ref->[1]->[$i]->[0];
         my $name = ConvertVarName($func_ref->[1]->[$i]->[1]);
-        $ret .= ConvertType($type) . " $name";
+        my ($base_type, $type_specifier, $name_specifier) = ($type, $type, $name);
+        if ($type =~ /(.*) (.*)/) {
+            $base_type = $2;
+        } elsif ($type =~ /(.*)(\[.*)/) {
+            $base_type = $1;
+            $type_specifier = $1;
+            $name_specifier = $name . $2
+        }
+        $ret .= ConvertType($type_specifier) . " $name_specifier";
         $call_arg .= $name;
-        if ($type =~ /\*/) {
+        if ($type =~ /\*/ || $type =~ /\[/) {
             $trace_arg .= "%p";
             $trace_call_arg .= $name;
-        } elsif (defined $debug_conv{$type}) {
-            if ($debug_conv{$type} =~ /(.*),(.*)/)
-            {
+        } elsif (defined $debug_conv{$base_type}) {
+            if ($debug_conv{$base_type} =~ /(.*),(.*)/) {
                 $trace_arg .= $1;
                 $trace_call_arg .= sprintf $2, $name;
-            }
-            else
-            {
-                $trace_arg .= $debug_conv{$type};
+            } else {
+                $trace_arg .= $debug_conv{$base_type};
                 $trace_call_arg .= $name;
             }
         }
@@ -328,7 +333,14 @@ sub generate_null_func($$)
     for (my $i = 0; $i < @{$func_ref->[1]}; $i++) {
         my $type = $func_ref->[1]->[$i]->[0];
         my $name = ConvertVarName($func_ref->[1]->[$i]->[1]);
-        $ret .= ConvertType($type) . " $name";
+        my $base_type;
+        if ($type =~ /(.*)(\[.*)/) {
+            $base_type = $1;
+            $name .= $2;
+        } else {
+            $base_type = $type;
+        }
+        $ret .= ConvertType($base_type) . " $name";
         $ret .= "," if ($i+1 < @{$func_ref->[1]});
         $ret .= " ";
     }
@@ -619,6 +631,8 @@ sub parse_variable($)
                 my @n = @{$v};
                 $pnamebefore = $n[0];
                 $pnameafter = $n[1] if (@n > 0);
+            } elsif ($v eq 'const ') {
+                $pnamebefore = $v;
             } else {
                 $pnameafter = $v;
             }
diff --git a/dlls/opengl32/opengl_ext.c b/dlls/opengl32/opengl_ext.c
index 81aa43a..9b9dfa7 100644
--- a/dlls/opengl32/opengl_ext.c
+++ b/dlls/opengl32/opengl_ext.c
@@ -14,7 +14,7 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(opengl);
 
-const int extension_registry_size = 2351;
+const int extension_registry_size = 2516;
 
 static void WINAPI glAccumxOES( GLenum op, GLfixed value ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
@@ -166,6 +166,12 @@ static void WINAPI glBeginPerfMonitorAMD( GLuint monitor ) {
   funcs->ext.p_glBeginPerfMonitorAMD( monitor );
 }
 
+static void WINAPI glBeginPerfQueryINTEL( GLuint queryHandle ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d)\n", queryHandle );
+  funcs->ext.p_glBeginPerfQueryINTEL( queryHandle );
+}
+
 static void WINAPI glBeginQuery( GLenum target, GLuint id ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d)\n", target, id );
@@ -430,6 +436,12 @@ static void WINAPI glBindTextureEXT( GLenum target, GLuint texture ) {
   funcs->ext.p_glBindTextureEXT( target, texture );
 }
 
+static void WINAPI glBindTextureUnit( GLuint unit, GLuint texture ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d)\n", unit, texture );
+  funcs->ext.p_glBindTextureUnit( unit, texture );
+}
+
 static GLuint WINAPI glBindTextureUnitParameterEXT( GLenum unit, GLenum value ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d)\n", unit, value );
@@ -568,6 +580,12 @@ static void WINAPI glBitmapxOES( GLsizei width, GLsizei height, GLfixed xorig, G
   funcs->ext.p_glBitmapxOES( width, height, xorig, yorig, xmove, ymove, bitmap );
 }
 
+static void WINAPI glBlendBarrierKHR( void ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("()\n");
+  funcs->ext.p_glBlendBarrierKHR( );
+}
+
 static void WINAPI glBlendBarrierNV( void ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("()\n");
@@ -724,6 +742,12 @@ static void WINAPI glBlitFramebufferEXT( GLint srcX0, GLint srcY0, GLint srcX1,
   funcs->ext.p_glBlitFramebufferEXT( srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter );
 }
 
+static void WINAPI glBlitNamedFramebuffer( GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d)\n", readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter );
+  funcs->ext.p_glBlitNamedFramebuffer( readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter );
+}
+
 static void WINAPI glBufferAddressRangeNV( GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %s, %ld)\n", pname, index, wine_dbgstr_longlong(address), length );
@@ -742,6 +766,12 @@ static void WINAPI glBufferDataARB( GLenum target, GLsizeiptrARB size, const voi
   funcs->ext.p_glBufferDataARB( target, size, data, usage );
 }
 
+static void WINAPI glBufferPageCommitmentARB( GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %ld, %ld, %d)\n", target, offset, size, commit );
+  funcs->ext.p_glBufferPageCommitmentARB( target, offset, size, commit );
+}
+
 static void WINAPI glBufferParameteriAPPLE( GLenum target, GLenum pname, GLint param ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d)\n", target, pname, param );
@@ -784,6 +814,12 @@ static GLenum WINAPI glCheckFramebufferStatusEXT( GLenum target ) {
   return funcs->ext.p_glCheckFramebufferStatusEXT( target );
 }
 
+static GLenum WINAPI glCheckNamedFramebufferStatus( GLuint framebuffer, GLenum target ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d)\n", framebuffer, target );
+  return funcs->ext.p_glCheckNamedFramebufferStatus( framebuffer, target );
+}
+
 static GLenum WINAPI glCheckNamedFramebufferStatusEXT( GLuint framebuffer, GLenum target ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d)\n", framebuffer, target );
@@ -886,16 +922,52 @@ static void WINAPI glClearDepthxOES( GLfixed depth ) {
   funcs->ext.p_glClearDepthxOES( depth );
 }
 
+static void WINAPI glClearNamedBufferData( GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %p)\n", buffer, internalformat, format, type, data );
+  funcs->ext.p_glClearNamedBufferData( buffer, internalformat, format, type, data );
+}
+
 static void WINAPI glClearNamedBufferDataEXT( GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %p)\n", buffer, internalformat, format, type, data );
   funcs->ext.p_glClearNamedBufferDataEXT( buffer, internalformat, format, type, data );
 }
 
-static void WINAPI glClearNamedBufferSubDataEXT( GLuint buffer, GLenum internalformat, GLenum format, GLenum type, GLsizeiptr offset, GLsizeiptr size, const void* data ) {
+static void WINAPI glClearNamedBufferSubData( GLuint buffer, GLenum internalformat, GLintptr offset, GLsizei size, GLenum format, GLenum type, const void* data ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %ld, %d, %d, %d, %p)\n", buffer, internalformat, offset, size, format, type, data );
+  funcs->ext.p_glClearNamedBufferSubData( buffer, internalformat, offset, size, format, type, data );
+}
+
+static void WINAPI glClearNamedBufferSubDataEXT( GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %ld, %ld, %d, %d, %p)\n", buffer, internalformat, offset, size, format, type, data );
+  funcs->ext.p_glClearNamedBufferSubDataEXT( buffer, internalformat, offset, size, format, type, data );
+}
+
+static void WINAPI glClearNamedFramebufferfi( GLuint framebuffer, GLenum buffer, const GLfloat depth, GLint stencil ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %f, %d)\n", framebuffer, buffer, depth, stencil );
+  funcs->ext.p_glClearNamedFramebufferfi( framebuffer, buffer, depth, stencil );
+}
+
+static void WINAPI glClearNamedFramebufferfv( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", framebuffer, buffer, drawbuffer, value );
+  funcs->ext.p_glClearNamedFramebufferfv( framebuffer, buffer, drawbuffer, value );
+}
+
+static void WINAPI glClearNamedFramebufferiv( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", framebuffer, buffer, drawbuffer, value );
+  funcs->ext.p_glClearNamedFramebufferiv( framebuffer, buffer, drawbuffer, value );
+}
+
+static void WINAPI glClearNamedFramebufferuiv( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
-  TRACE("(%d, %d, %d, %d, %ld, %ld, %p)\n", buffer, internalformat, format, type, offset, size, data );
-  funcs->ext.p_glClearNamedBufferSubDataEXT( buffer, internalformat, format, type, offset, size, data );
+  TRACE("(%d, %d, %d, %p)\n", framebuffer, buffer, drawbuffer, value );
+  funcs->ext.p_glClearNamedFramebufferuiv( framebuffer, buffer, drawbuffer, value );
 }
 
 static void WINAPI glClearTexImage( GLuint texture, GLint level, GLenum format, GLenum type, const void* data ) {
@@ -940,6 +1012,12 @@ static GLenum WINAPI glClientWaitSync( GLsync sync, GLbitfield flags, GLuint64 t
   return funcs->ext.p_glClientWaitSync( sync, flags, timeout );
 }
 
+static void WINAPI glClipControl( GLenum origin, GLenum depth ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d)\n", origin, depth );
+  funcs->ext.p_glClipControl( origin, depth );
+}
+
 static void WINAPI glClipPlanefOES( GLenum plane, const GLfloat* equation ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %p)\n", plane, equation );
@@ -1366,18 +1444,36 @@ static void WINAPI glCompressedTextureImage3DEXT( GLuint texture, GLenum target,
   funcs->ext.p_glCompressedTextureImage3DEXT( texture, target, level, internalformat, width, height, depth, border, imageSize, bits );
 }
 
+static void WINAPI glCompressedTextureSubImage1D( GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d, %p)\n", texture, level, xoffset, width, format, imageSize, data );
+  funcs->ext.p_glCompressedTextureSubImage1D( texture, level, xoffset, width, format, imageSize, data );
+}
+
 static void WINAPI glCompressedTextureSubImage1DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* bits ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d, %d, %p)\n", texture, target, level, xoffset, width, format, imageSize, bits );
   funcs->ext.p_glCompressedTextureSubImage1DEXT( texture, target, level, xoffset, width, format, imageSize, bits );
 }
 
+static void WINAPI glCompressedTextureSubImage2D( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d, %d, %d, %p)\n", texture, level, xoffset, yoffset, width, height, format, imageSize, data );
+  funcs->ext.p_glCompressedTextureSubImage2D( texture, level, xoffset, yoffset, width, height, format, imageSize, data );
+}
+
 static void WINAPI glCompressedTextureSubImage2DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* bits ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d, %d, %d, %d, %p)\n", texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits );
   funcs->ext.p_glCompressedTextureSubImage2DEXT( texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits );
 }
 
+static void WINAPI glCompressedTextureSubImage3D( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %p)\n", texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data );
+  funcs->ext.p_glCompressedTextureSubImage3D( texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data );
+}
+
 static void WINAPI glCompressedTextureSubImage3DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* bits ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %p)\n", texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits );
@@ -1564,6 +1660,12 @@ static void WINAPI glCopyMultiTexSubImage3DEXT( GLenum texunit, GLenum target, G
   funcs->ext.p_glCopyMultiTexSubImage3DEXT( texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height );
 }
 
+static void WINAPI glCopyNamedBufferSubData( GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizei size ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %ld, %ld, %d)\n", readBuffer, writeBuffer, readOffset, writeOffset, size );
+  funcs->ext.p_glCopyNamedBufferSubData( readBuffer, writeBuffer, readOffset, writeOffset, size );
+}
+
 static void WINAPI glCopyPathNV( GLuint resultPath, GLuint srcPath ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d)\n", resultPath, srcPath );
@@ -1618,18 +1720,36 @@ static void WINAPI glCopyTextureImage2DEXT( GLuint texture, GLenum target, GLint
   funcs->ext.p_glCopyTextureImage2DEXT( texture, target, level, internalformat, x, y, width, height, border );
 }
 
+static void WINAPI glCopyTextureSubImage1D( GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d)\n", texture, level, xoffset, x, y, width );
+  funcs->ext.p_glCopyTextureSubImage1D( texture, level, xoffset, x, y, width );
+}
+
 static void WINAPI glCopyTextureSubImage1DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d, %d)\n", texture, target, level, xoffset, x, y, width );
   funcs->ext.p_glCopyTextureSubImage1DEXT( texture, target, level, xoffset, x, y, width );
 }
 
+static void WINAPI glCopyTextureSubImage2D( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d, %d, %d)\n", texture, level, xoffset, yoffset, x, y, width, height );
+  funcs->ext.p_glCopyTextureSubImage2D( texture, level, xoffset, yoffset, x, y, width, height );
+}
+
 static void WINAPI glCopyTextureSubImage2DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d, %d, %d, %d)\n", texture, target, level, xoffset, yoffset, x, y, width, height );
   funcs->ext.p_glCopyTextureSubImage2DEXT( texture, target, level, xoffset, yoffset, x, y, width, height );
 }
 
+static void WINAPI glCopyTextureSubImage3D( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d, %d, %d, %d)\n", texture, level, xoffset, yoffset, zoffset, x, y, width, height );
+  funcs->ext.p_glCopyTextureSubImage3D( texture, level, xoffset, yoffset, zoffset, x, y, width, height );
+}
+
 static void WINAPI glCopyTextureSubImage3DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d, %d, %d, %d, %d)\n", texture, target, level, xoffset, yoffset, zoffset, x, y, width, height );
@@ -1660,6 +1780,36 @@ static void WINAPI glCoverStrokePathNV( GLuint path, GLenum coverMode ) {
   funcs->ext.p_glCoverStrokePathNV( path, coverMode );
 }
 
+static void WINAPI glCoverageModulationNV( GLenum components ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d)\n", components );
+  funcs->ext.p_glCoverageModulationNV( components );
+}
+
+static void WINAPI glCoverageModulationTableNV( GLsizei n, const GLfloat* v ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", n, v );
+  funcs->ext.p_glCoverageModulationTableNV( n, v );
+}
+
+static void WINAPI glCreateBuffers( GLsizei n, GLuint* buffers ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", n, buffers );
+  funcs->ext.p_glCreateBuffers( n, buffers );
+}
+
+static void WINAPI glCreateFramebuffers( GLsizei n, GLuint* framebuffers ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", n, framebuffers );
+  funcs->ext.p_glCreateFramebuffers( n, framebuffers );
+}
+
+static void WINAPI glCreatePerfQueryINTEL( GLuint queryId, GLuint* queryHandle ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", queryId, queryHandle );
+  funcs->ext.p_glCreatePerfQueryINTEL( queryId, queryHandle );
+}
+
 static GLuint WINAPI glCreateProgram( void ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("()\n");
@@ -1672,6 +1822,30 @@ static GLhandleARB WINAPI glCreateProgramObjectARB( void ) {
   return funcs->ext.p_glCreateProgramObjectARB( );
 }
 
+static void WINAPI glCreateProgramPipelines( GLsizei n, GLuint* pipelines ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", n, pipelines );
+  funcs->ext.p_glCreateProgramPipelines( n, pipelines );
+}
+
+static void WINAPI glCreateQueries( GLenum target, GLsizei n, GLuint* ids ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", target, n, ids );
+  funcs->ext.p_glCreateQueries( target, n, ids );
+}
+
+static void WINAPI glCreateRenderbuffers( GLsizei n, GLuint* renderbuffers ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", n, renderbuffers );
+  funcs->ext.p_glCreateRenderbuffers( n, renderbuffers );
+}
+
+static void WINAPI glCreateSamplers( GLsizei n, GLuint* samplers ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", n, samplers );
+  funcs->ext.p_glCreateSamplers( n, samplers );
+}
+
 static GLuint WINAPI glCreateShader( GLenum type ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d)\n", type );
@@ -1702,6 +1876,24 @@ static GLsync WINAPI glCreateSyncFromCLeventARB( void* context, void* event, GLb
   return funcs->ext.p_glCreateSyncFromCLeventARB( context, event, flags );
 }
 
+static void WINAPI glCreateTextures( GLenum target, GLsizei n, GLuint* textures ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", target, n, textures );
+  funcs->ext.p_glCreateTextures( target, n, textures );
+}
+
+static void WINAPI glCreateTransformFeedbacks( GLsizei n, GLuint* ids ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", n, ids );
+  funcs->ext.p_glCreateTransformFeedbacks( n, ids );
+}
+
+static void WINAPI glCreateVertexArrays( GLsizei n, GLuint* arrays ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", n, arrays );
+  funcs->ext.p_glCreateVertexArrays( n, arrays );
+}
+
 static void WINAPI glCullParameterdvEXT( GLenum pname, GLdouble* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %p)\n", pname, params );
@@ -1888,6 +2080,12 @@ static void WINAPI glDeletePerfMonitorsAMD( GLsizei n, GLuint* monitors ) {
   funcs->ext.p_glDeletePerfMonitorsAMD( n, monitors );
 }
 
+static void WINAPI glDeletePerfQueryINTEL( GLuint queryHandle ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d)\n", queryHandle );
+  funcs->ext.p_glDeletePerfQueryINTEL( queryHandle );
+}
+
 static void WINAPI glDeleteProgram( GLuint program ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d)\n", program );
@@ -2080,6 +2278,12 @@ static void WINAPI glDisableVariantClientStateEXT( GLuint id ) {
   funcs->ext.p_glDisableVariantClientStateEXT( id );
 }
 
+static void WINAPI glDisableVertexArrayAttrib( GLuint vaobj, GLuint index ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d)\n", vaobj, index );
+  funcs->ext.p_glDisableVertexArrayAttrib( vaobj, index );
+}
+
 static void WINAPI glDisableVertexArrayAttribEXT( GLuint vaobj, GLuint index ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d)\n", vaobj, index );
@@ -2380,6 +2584,12 @@ static void WINAPI glEnableVariantClientStateEXT( GLuint id ) {
   funcs->ext.p_glEnableVariantClientStateEXT( id );
 }
 
+static void WINAPI glEnableVertexArrayAttrib( GLuint vaobj, GLuint index ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d)\n", vaobj, index );
+  funcs->ext.p_glEnableVertexArrayAttrib( vaobj, index );
+}
+
 static void WINAPI glEnableVertexArrayAttribEXT( GLuint vaobj, GLuint index ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d)\n", vaobj, index );
@@ -2452,6 +2662,12 @@ static void WINAPI glEndPerfMonitorAMD( GLuint monitor ) {
   funcs->ext.p_glEndPerfMonitorAMD( monitor );
 }
 
+static void WINAPI glEndPerfQueryINTEL( GLuint queryHandle ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d)\n", queryHandle );
+  funcs->ext.p_glEndPerfQueryINTEL( queryHandle );
+}
+
 static void WINAPI glEndQuery( GLenum target ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d)\n", target );
@@ -2602,6 +2818,12 @@ static void WINAPI glFlushMappedBufferRangeAPPLE( GLenum target, GLintptr offset
   funcs->ext.p_glFlushMappedBufferRangeAPPLE( target, offset, size );
 }
 
+static void WINAPI glFlushMappedNamedBufferRange( GLuint buffer, GLintptr offset, GLsizei length ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %ld, %d)\n", buffer, offset, length );
+  funcs->ext.p_glFlushMappedNamedBufferRange( buffer, offset, length );
+}
+
 static void WINAPI glFlushMappedNamedBufferRangeEXT( GLuint buffer, GLintptr offset, GLsizeiptr length ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %ld, %ld)\n", buffer, offset, length );
@@ -2746,6 +2968,12 @@ static void WINAPI glFragmentColorMaterialSGIX( GLenum face, GLenum mode ) {
   funcs->ext.p_glFragmentColorMaterialSGIX( face, mode );
 }
 
+static void WINAPI glFragmentCoverageColorNV( GLuint color ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d)\n", color );
+  funcs->ext.p_glFragmentCoverageColorNV( color );
+}
+
 static void WINAPI glFragmentLightModelfSGIX( GLenum pname, GLfloat param ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %f)\n", pname, param );
@@ -2866,6 +3094,12 @@ static void WINAPI glFramebufferRenderbufferEXT( GLenum target, GLenum attachmen
   funcs->ext.p_glFramebufferRenderbufferEXT( target, attachment, renderbuffertarget, renderbuffer );
 }
 
+static void WINAPI glFramebufferSampleLocationsfvNV( GLenum target, GLuint start, GLsizei count, const GLfloat* v ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", target, start, count, v );
+  funcs->ext.p_glFramebufferSampleLocationsfvNV( target, start, count, v );
+}
+
 static void WINAPI glFramebufferTexture( GLenum target, GLenum attachment, GLuint texture, GLint level ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d)\n", target, attachment, texture, level );
@@ -3148,6 +3382,12 @@ static void WINAPI glGenerateMultiTexMipmapEXT( GLenum texunit, GLenum target )
   funcs->ext.p_glGenerateMultiTexMipmapEXT( texunit, target );
 }
 
+static void WINAPI glGenerateTextureMipmap( GLuint texture ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d)\n", texture );
+  funcs->ext.p_glGenerateTextureMipmap( texture );
+}
+
 static void WINAPI glGenerateTextureMipmapEXT( GLuint texture, GLenum target ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d)\n", texture, target );
@@ -3442,12 +3682,24 @@ static void WINAPI glGetCompressedTexImageARB( GLenum target, GLint level, void*
   funcs->ext.p_glGetCompressedTexImageARB( target, level, img );
 }
 
+static void WINAPI glGetCompressedTextureImage( GLuint texture, GLint level, GLsizei bufSize, void* pixels ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", texture, level, bufSize, pixels );
+  funcs->ext.p_glGetCompressedTextureImage( texture, level, bufSize, pixels );
+}
+
 static void WINAPI glGetCompressedTextureImageEXT( GLuint texture, GLenum target, GLint lod, void* img ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", texture, target, lod, img );
   funcs->ext.p_glGetCompressedTextureImageEXT( texture, target, lod, img );
 }
 
+static void WINAPI glGetCompressedTextureSubImage( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d, %d, %d, %d, %p)\n", texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels );
+  funcs->ext.p_glGetCompressedTextureSubImage( texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels );
+}
+
 static void WINAPI glGetConvolutionFilter( GLenum target, GLenum format, GLenum type, void* image ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", target, format, type, image );
@@ -3490,6 +3742,12 @@ static void WINAPI glGetConvolutionParameterxvOES( GLenum target, GLenum pname,
   funcs->ext.p_glGetConvolutionParameterxvOES( target, pname, params );
 }
 
+static void WINAPI glGetCoverageModulationTableNV( GLsizei bufsize, GLfloat* v ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", bufsize, v );
+  funcs->ext.p_glGetCoverageModulationTableNV( bufsize, v );
+}
+
 static GLuint WINAPI glGetDebugMessageLog( GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %p, %p, %p, %p, %p, %p)\n", count, bufSize, sources, types, ids, severities, lengths, messageLog );
@@ -3550,6 +3808,12 @@ static void WINAPI glGetFinalCombinerInputParameterivNV( GLenum variable, GLenum
   funcs->ext.p_glGetFinalCombinerInputParameterivNV( variable, pname, params );
 }
 
+static void WINAPI glGetFirstPerfQueryIdINTEL( GLuint* queryId ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%p)\n", queryId );
+  funcs->ext.p_glGetFirstPerfQueryIdINTEL( queryId );
+}
+
 static void WINAPI glGetFixedvOES( GLenum pname, GLfixed* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %p)\n", pname, params );
@@ -3646,6 +3910,12 @@ static void WINAPI glGetFramebufferParameterivEXT( GLuint framebuffer, GLenum pn
   funcs->ext.p_glGetFramebufferParameterivEXT( framebuffer, pname, params );
 }
 
+static GLenum WINAPI glGetGraphicsResetStatus( void ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("()\n");
+  return funcs->ext.p_glGetGraphicsResetStatus( );
+}
+
 static GLenum WINAPI glGetGraphicsResetStatusARB( void ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("()\n");
@@ -3772,6 +4042,12 @@ static void WINAPI glGetIntegerui64vNV( GLenum value, GLuint64EXT* result ) {
   funcs->ext.p_glGetIntegerui64vNV( value, result );
 }
 
+static void WINAPI glGetInternalformatSampleivNV( GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %p)\n", target, internalformat, samples, pname, bufSize, params );
+  funcs->ext.p_glGetInternalformatSampleivNV( target, internalformat, samples, pname, bufSize, params );
+}
+
 static void WINAPI glGetInternalformati64v( GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %p)\n", target, internalformat, pname, bufSize, params );
@@ -4000,6 +4276,18 @@ static void WINAPI glGetMultisamplefvNV( GLenum pname, GLuint index, GLfloat* va
   funcs->ext.p_glGetMultisamplefvNV( pname, index, val );
 }
 
+static void WINAPI glGetNamedBufferParameteri64v( GLuint buffer, GLenum pname, GLint64* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", buffer, pname, params );
+  funcs->ext.p_glGetNamedBufferParameteri64v( buffer, pname, params );
+}
+
+static void WINAPI glGetNamedBufferParameteriv( GLuint buffer, GLenum pname, GLint* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", buffer, pname, params );
+  funcs->ext.p_glGetNamedBufferParameteriv( buffer, pname, params );
+}
+
 static void WINAPI glGetNamedBufferParameterivEXT( GLuint buffer, GLenum pname, GLint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %p)\n", buffer, pname, params );
@@ -4012,24 +4300,48 @@ static void WINAPI glGetNamedBufferParameterui64vNV( GLuint buffer, GLenum pname
   funcs->ext.p_glGetNamedBufferParameterui64vNV( buffer, pname, params );
 }
 
+static void WINAPI glGetNamedBufferPointerv( GLuint buffer, GLenum pname, void** params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", buffer, pname, params );
+  funcs->ext.p_glGetNamedBufferPointerv( buffer, pname, params );
+}
+
 static void WINAPI glGetNamedBufferPointervEXT( GLuint buffer, GLenum pname, void** params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %p)\n", buffer, pname, params );
   funcs->ext.p_glGetNamedBufferPointervEXT( buffer, pname, params );
 }
 
+static void WINAPI glGetNamedBufferSubData( GLuint buffer, GLintptr offset, GLsizei size, void* data ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %ld, %d, %p)\n", buffer, offset, size, data );
+  funcs->ext.p_glGetNamedBufferSubData( buffer, offset, size, data );
+}
+
 static void WINAPI glGetNamedBufferSubDataEXT( GLuint buffer, GLintptr offset, GLsizeiptr size, void* data ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %ld, %ld, %p)\n", buffer, offset, size, data );
   funcs->ext.p_glGetNamedBufferSubDataEXT( buffer, offset, size, data );
 }
 
+static void WINAPI glGetNamedFramebufferAttachmentParameteriv( GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", framebuffer, attachment, pname, params );
+  funcs->ext.p_glGetNamedFramebufferAttachmentParameteriv( framebuffer, attachment, pname, params );
+}
+
 static void WINAPI glGetNamedFramebufferAttachmentParameterivEXT( GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", framebuffer, attachment, pname, params );
   funcs->ext.p_glGetNamedFramebufferAttachmentParameterivEXT( framebuffer, attachment, pname, params );
 }
 
+static void WINAPI glGetNamedFramebufferParameteriv( GLuint framebuffer, GLenum pname, GLint* param ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", framebuffer, pname, param );
+  funcs->ext.p_glGetNamedFramebufferParameteriv( framebuffer, pname, param );
+}
+
 static void WINAPI glGetNamedFramebufferParameterivEXT( GLuint framebuffer, GLenum pname, GLint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %p)\n", framebuffer, pname, params );
@@ -4072,6 +4384,12 @@ static void WINAPI glGetNamedProgramivEXT( GLuint program, GLenum target, GLenum
   funcs->ext.p_glGetNamedProgramivEXT( program, target, pname, params );
 }
 
+static void WINAPI glGetNamedRenderbufferParameteriv( GLuint renderbuffer, GLenum pname, GLint* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", renderbuffer, pname, params );
+  funcs->ext.p_glGetNamedRenderbufferParameteriv( renderbuffer, pname, params );
+}
+
 static void WINAPI glGetNamedRenderbufferParameterivEXT( GLuint renderbuffer, GLenum pname, GLint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %p)\n", renderbuffer, pname, params );
@@ -4090,6 +4408,12 @@ static void WINAPI glGetNamedStringivARB( GLint namelen, const GLchar* name, GLe
   funcs->ext.p_glGetNamedStringivARB( namelen, name, pname, params );
 }
 
+static void WINAPI glGetNextPerfQueryIdINTEL( GLuint queryId, GLuint* nextQueryId ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", queryId, nextQueryId );
+  funcs->ext.p_glGetNextPerfQueryIdINTEL( queryId, nextQueryId );
+}
+
 static void WINAPI glGetObjectBufferfvATI( GLuint buffer, GLenum pname, GLfloat* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %p)\n", buffer, pname, params );
@@ -4228,6 +4552,12 @@ static void WINAPI glGetPathTexGenivNV( GLenum texCoordSet, GLenum pname, GLint*
   funcs->ext.p_glGetPathTexGenivNV( texCoordSet, pname, value );
 }
 
+static void WINAPI glGetPerfCounterInfoINTEL( GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar* counterName, GLuint counterDescLength, GLchar* counterDesc, GLuint* counterOffset, GLuint* counterDataSize, GLuint* counterTypeEnum, GLuint* counterDataTypeEnum, GLuint64* rawCounterMaxValue ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p, %d, %p, %p, %p, %p, %p, %p)\n", queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue );
+  funcs->ext.p_glGetPerfCounterInfoINTEL( queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue );
+}
+
 static void WINAPI glGetPerfMonitorCounterDataAMD( GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint* bytesWritten ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p, %p)\n", monitor, pname, dataSize, data, bytesWritten );
@@ -4264,6 +4594,24 @@ static void WINAPI glGetPerfMonitorGroupsAMD( GLint* numGroups, GLsizei groupsSi
   funcs->ext.p_glGetPerfMonitorGroupsAMD( numGroups, groupsSize, groups );
 }
 
+static void WINAPI glGetPerfQueryDataINTEL( GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid* data, GLuint* bytesWritten ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p, %p)\n", queryHandle, flags, dataSize, data, bytesWritten );
+  funcs->ext.p_glGetPerfQueryDataINTEL( queryHandle, flags, dataSize, data, bytesWritten );
+}
+
+static void WINAPI glGetPerfQueryIdByNameINTEL( GLchar* queryName, GLuint* queryId ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%p, %p)\n", queryName, queryId );
+  funcs->ext.p_glGetPerfQueryIdByNameINTEL( queryName, queryId );
+}
+
+static void WINAPI glGetPerfQueryInfoINTEL( GLuint queryId, GLuint queryNameLength, GLchar* queryName, GLuint* dataSize, GLuint* noCounters, GLuint* noInstances, GLuint* capsMask ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p, %p, %p, %p, %p)\n", queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask );
+  funcs->ext.p_glGetPerfQueryInfoINTEL( queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask );
+}
+
 static void WINAPI glGetPixelMapxv( GLenum map, GLint size, GLfixed* values ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %p)\n", map, size, values );
@@ -4438,6 +4786,12 @@ static void WINAPI glGetProgramResourceName( GLuint program, GLenum programInter
   funcs->ext.p_glGetProgramResourceName( program, programInterface, index, bufSize, length, name );
 }
 
+static void WINAPI glGetProgramResourcefvNV( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLfloat* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %p, %d, %p, %p)\n", program, programInterface, index, propCount, props, bufSize, length, params );
+  funcs->ext.p_glGetProgramResourcefvNV( program, programInterface, index, propCount, props, bufSize, length, params );
+}
+
 static void WINAPI glGetProgramResourceiv( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %p, %d, %p, %p)\n", program, programInterface, index, propCount, props, bufSize, length, params );
@@ -4486,6 +4840,30 @@ static void WINAPI glGetProgramivNV( GLuint id, GLenum pname, GLint* params ) {
   funcs->ext.p_glGetProgramivNV( id, pname, params );
 }
 
+static void WINAPI glGetQueryBufferObjecti64v( GLuint id, GLuint buffer, GLenum pname, GLintptr offset ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %ld)\n", id, buffer, pname, offset );
+  funcs->ext.p_glGetQueryBufferObjecti64v( id, buffer, pname, offset );
+}
+
+static void WINAPI glGetQueryBufferObjectiv( GLuint id, GLuint buffer, GLenum pname, GLintptr offset ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %ld)\n", id, buffer, pname, offset );
+  funcs->ext.p_glGetQueryBufferObjectiv( id, buffer, pname, offset );
+}
+
+static void WINAPI glGetQueryBufferObjectui64v( GLuint id, GLuint buffer, GLenum pname, GLintptr offset ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %ld)\n", id, buffer, pname, offset );
+  funcs->ext.p_glGetQueryBufferObjectui64v( id, buffer, pname, offset );
+}
+
+static void WINAPI glGetQueryBufferObjectuiv( GLuint id, GLuint buffer, GLenum pname, GLintptr offset ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %ld)\n", id, buffer, pname, offset );
+  funcs->ext.p_glGetQueryBufferObjectuiv( id, buffer, pname, offset );
+}
+
 static void WINAPI glGetQueryIndexediv( GLenum target, GLuint index, GLenum pname, GLint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", target, index, pname, params );
@@ -4744,42 +5122,84 @@ static GLuint64 WINAPI glGetTextureHandleNV( GLuint texture ) {
   return funcs->ext.p_glGetTextureHandleNV( texture );
 }
 
+static void WINAPI glGetTextureImage( GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %p)\n", texture, level, format, type, bufSize, pixels );
+  funcs->ext.p_glGetTextureImage( texture, level, format, type, bufSize, pixels );
+}
+
 static void WINAPI glGetTextureImageEXT( GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void* pixels ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %p)\n", texture, target, level, format, type, pixels );
   funcs->ext.p_glGetTextureImageEXT( texture, target, level, format, type, pixels );
 }
 
+static void WINAPI glGetTextureLevelParameterfv( GLuint texture, GLint level, GLenum pname, GLfloat* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", texture, level, pname, params );
+  funcs->ext.p_glGetTextureLevelParameterfv( texture, level, pname, params );
+}
+
 static void WINAPI glGetTextureLevelParameterfvEXT( GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %p)\n", texture, target, level, pname, params );
   funcs->ext.p_glGetTextureLevelParameterfvEXT( texture, target, level, pname, params );
 }
 
+static void WINAPI glGetTextureLevelParameteriv( GLuint texture, GLint level, GLenum pname, GLint* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", texture, level, pname, params );
+  funcs->ext.p_glGetTextureLevelParameteriv( texture, level, pname, params );
+}
+
 static void WINAPI glGetTextureLevelParameterivEXT( GLuint texture, GLenum target, GLint level, GLenum pname, GLint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %p)\n", texture, target, level, pname, params );
   funcs->ext.p_glGetTextureLevelParameterivEXT( texture, target, level, pname, params );
 }
 
+static void WINAPI glGetTextureParameterIiv( GLuint texture, GLenum pname, GLint* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", texture, pname, params );
+  funcs->ext.p_glGetTextureParameterIiv( texture, pname, params );
+}
+
 static void WINAPI glGetTextureParameterIivEXT( GLuint texture, GLenum target, GLenum pname, GLint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", texture, target, pname, params );
   funcs->ext.p_glGetTextureParameterIivEXT( texture, target, pname, params );
 }
 
+static void WINAPI glGetTextureParameterIuiv( GLuint texture, GLenum pname, GLuint* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", texture, pname, params );
+  funcs->ext.p_glGetTextureParameterIuiv( texture, pname, params );
+}
+
 static void WINAPI glGetTextureParameterIuivEXT( GLuint texture, GLenum target, GLenum pname, GLuint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", texture, target, pname, params );
   funcs->ext.p_glGetTextureParameterIuivEXT( texture, target, pname, params );
 }
 
+static void WINAPI glGetTextureParameterfv( GLuint texture, GLenum pname, GLfloat* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", texture, pname, params );
+  funcs->ext.p_glGetTextureParameterfv( texture, pname, params );
+}
+
 static void WINAPI glGetTextureParameterfvEXT( GLuint texture, GLenum target, GLenum pname, GLfloat* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", texture, target, pname, params );
   funcs->ext.p_glGetTextureParameterfvEXT( texture, target, pname, params );
 }
 
+static void WINAPI glGetTextureParameteriv( GLuint texture, GLenum pname, GLint* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", texture, pname, params );
+  funcs->ext.p_glGetTextureParameteriv( texture, pname, params );
+}
+
 static void WINAPI glGetTextureParameterivEXT( GLuint texture, GLenum target, GLenum pname, GLint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", texture, target, pname, params );
@@ -4798,6 +5218,12 @@ static GLuint64 WINAPI glGetTextureSamplerHandleNV( GLuint texture, GLuint sampl
   return funcs->ext.p_glGetTextureSamplerHandleNV( texture, sampler );
 }
 
+static void WINAPI glGetTextureSubImage( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %p)\n", texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels );
+  funcs->ext.p_glGetTextureSubImage( texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels );
+}
+
 static void WINAPI glGetTrackMatrixivNV( GLenum target, GLuint address, GLenum pname, GLint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", target, address, pname, params );
@@ -4822,6 +5248,24 @@ static void WINAPI glGetTransformFeedbackVaryingNV( GLuint program, GLuint index
   funcs->ext.p_glGetTransformFeedbackVaryingNV( program, index, location );
 }
 
+static void WINAPI glGetTransformFeedbacki64_v( GLuint xfb, GLenum pname, GLuint index, GLint64* param ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", xfb, pname, index, param );
+  funcs->ext.p_glGetTransformFeedbacki64_v( xfb, pname, index, param );
+}
+
+static void WINAPI glGetTransformFeedbacki_v( GLuint xfb, GLenum pname, GLuint index, GLint* param ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", xfb, pname, index, param );
+  funcs->ext.p_glGetTransformFeedbacki_v( xfb, pname, index, param );
+}
+
+static void WINAPI glGetTransformFeedbackiv( GLuint xfb, GLenum pname, GLint* param ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", xfb, pname, param );
+  funcs->ext.p_glGetTransformFeedbackiv( xfb, pname, param );
+}
+
 static GLuint WINAPI glGetUniformBlockIndex( GLuint program, const GLchar* uniformBlockName ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %p)\n", program, uniformBlockName );
@@ -4960,6 +5404,18 @@ static GLint WINAPI glGetVaryingLocationNV( GLuint program, const GLchar* name )
   return funcs->ext.p_glGetVaryingLocationNV( program, name );
 }
 
+static void WINAPI glGetVertexArrayIndexed64iv( GLuint vaobj, GLuint index, GLenum pname, GLint64* param ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", vaobj, index, pname, param );
+  funcs->ext.p_glGetVertexArrayIndexed64iv( vaobj, index, pname, param );
+}
+
+static void WINAPI glGetVertexArrayIndexediv( GLuint vaobj, GLuint index, GLenum pname, GLint* param ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", vaobj, index, pname, param );
+  funcs->ext.p_glGetVertexArrayIndexediv( vaobj, index, pname, param );
+}
+
 static void WINAPI glGetVertexArrayIntegeri_vEXT( GLuint vaobj, GLuint index, GLenum pname, GLint* param ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", vaobj, index, pname, param );
@@ -4984,6 +5440,12 @@ static void WINAPI glGetVertexArrayPointervEXT( GLuint vaobj, GLenum pname, void
   funcs->ext.p_glGetVertexArrayPointervEXT( vaobj, pname, param );
 }
 
+static void WINAPI glGetVertexArrayiv( GLuint vaobj, GLenum pname, GLint* param ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", vaobj, pname, param );
+  funcs->ext.p_glGetVertexArrayiv( vaobj, pname, param );
+}
+
 static void WINAPI glGetVertexAttribArrayObjectfvATI( GLuint index, GLenum pname, GLfloat* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %p)\n", index, pname, params );
@@ -5170,108 +5632,216 @@ static void WINAPI glGetVideouivNV( GLuint video_slot, GLenum pname, GLuint* par
   funcs->ext.p_glGetVideouivNV( video_slot, pname, params );
 }
 
+static void WINAPI glGetnColorTable( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %p)\n", target, format, type, bufSize, table );
+  funcs->ext.p_glGetnColorTable( target, format, type, bufSize, table );
+}
+
 static void WINAPI glGetnColorTableARB( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %p)\n", target, format, type, bufSize, table );
   funcs->ext.p_glGetnColorTableARB( target, format, type, bufSize, table );
 }
 
+static void WINAPI glGetnCompressedTexImage( GLenum target, GLint lod, GLsizei bufSize, void* pixels ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", target, lod, bufSize, pixels );
+  funcs->ext.p_glGetnCompressedTexImage( target, lod, bufSize, pixels );
+}
+
 static void WINAPI glGetnCompressedTexImageARB( GLenum target, GLint lod, GLsizei bufSize, void* img ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", target, lod, bufSize, img );
   funcs->ext.p_glGetnCompressedTexImageARB( target, lod, bufSize, img );
 }
 
+static void WINAPI glGetnConvolutionFilter( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %p)\n", target, format, type, bufSize, image );
+  funcs->ext.p_glGetnConvolutionFilter( target, format, type, bufSize, image );
+}
+
 static void WINAPI glGetnConvolutionFilterARB( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %p)\n", target, format, type, bufSize, image );
   funcs->ext.p_glGetnConvolutionFilterARB( target, format, type, bufSize, image );
 }
 
+static void WINAPI glGetnHistogram( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %p)\n", target, reset, format, type, bufSize, values );
+  funcs->ext.p_glGetnHistogram( target, reset, format, type, bufSize, values );
+}
+
 static void WINAPI glGetnHistogramARB( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %p)\n", target, reset, format, type, bufSize, values );
   funcs->ext.p_glGetnHistogramARB( target, reset, format, type, bufSize, values );
 }
 
+static void WINAPI glGetnMapdv( GLenum target, GLenum query, GLsizei bufSize, GLdouble* v ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", target, query, bufSize, v );
+  funcs->ext.p_glGetnMapdv( target, query, bufSize, v );
+}
+
 static void WINAPI glGetnMapdvARB( GLenum target, GLenum query, GLsizei bufSize, GLdouble* v ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", target, query, bufSize, v );
   funcs->ext.p_glGetnMapdvARB( target, query, bufSize, v );
 }
 
+static void WINAPI glGetnMapfv( GLenum target, GLenum query, GLsizei bufSize, GLfloat* v ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", target, query, bufSize, v );
+  funcs->ext.p_glGetnMapfv( target, query, bufSize, v );
+}
+
 static void WINAPI glGetnMapfvARB( GLenum target, GLenum query, GLsizei bufSize, GLfloat* v ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", target, query, bufSize, v );
   funcs->ext.p_glGetnMapfvARB( target, query, bufSize, v );
 }
 
+static void WINAPI glGetnMapiv( GLenum target, GLenum query, GLsizei bufSize, GLint* v ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", target, query, bufSize, v );
+  funcs->ext.p_glGetnMapiv( target, query, bufSize, v );
+}
+
 static void WINAPI glGetnMapivARB( GLenum target, GLenum query, GLsizei bufSize, GLint* v ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", target, query, bufSize, v );
   funcs->ext.p_glGetnMapivARB( target, query, bufSize, v );
 }
 
+static void WINAPI glGetnMinmax( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %p)\n", target, reset, format, type, bufSize, values );
+  funcs->ext.p_glGetnMinmax( target, reset, format, type, bufSize, values );
+}
+
 static void WINAPI glGetnMinmaxARB( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %p)\n", target, reset, format, type, bufSize, values );
   funcs->ext.p_glGetnMinmaxARB( target, reset, format, type, bufSize, values );
 }
 
+static void WINAPI glGetnPixelMapfv( GLenum map, GLsizei bufSize, GLfloat* values ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", map, bufSize, values );
+  funcs->ext.p_glGetnPixelMapfv( map, bufSize, values );
+}
+
 static void WINAPI glGetnPixelMapfvARB( GLenum map, GLsizei bufSize, GLfloat* values ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %p)\n", map, bufSize, values );
   funcs->ext.p_glGetnPixelMapfvARB( map, bufSize, values );
 }
 
+static void WINAPI glGetnPixelMapuiv( GLenum map, GLsizei bufSize, GLuint* values ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", map, bufSize, values );
+  funcs->ext.p_glGetnPixelMapuiv( map, bufSize, values );
+}
+
 static void WINAPI glGetnPixelMapuivARB( GLenum map, GLsizei bufSize, GLuint* values ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %p)\n", map, bufSize, values );
   funcs->ext.p_glGetnPixelMapuivARB( map, bufSize, values );
 }
 
+static void WINAPI glGetnPixelMapusv( GLenum map, GLsizei bufSize, GLushort* values ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", map, bufSize, values );
+  funcs->ext.p_glGetnPixelMapusv( map, bufSize, values );
+}
+
 static void WINAPI glGetnPixelMapusvARB( GLenum map, GLsizei bufSize, GLushort* values ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %p)\n", map, bufSize, values );
   funcs->ext.p_glGetnPixelMapusvARB( map, bufSize, values );
 }
 
+static void WINAPI glGetnPolygonStipple( GLsizei bufSize, GLubyte* pattern ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", bufSize, pattern );
+  funcs->ext.p_glGetnPolygonStipple( bufSize, pattern );
+}
+
 static void WINAPI glGetnPolygonStippleARB( GLsizei bufSize, GLubyte* pattern ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %p)\n", bufSize, pattern );
   funcs->ext.p_glGetnPolygonStippleARB( bufSize, pattern );
 }
 
+static void WINAPI glGetnSeparableFilter( GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %p, %d, %p, %p)\n", target, format, type, rowBufSize, row, columnBufSize, column, span );
+  funcs->ext.p_glGetnSeparableFilter( target, format, type, rowBufSize, row, columnBufSize, column, span );
+}
+
 static void WINAPI glGetnSeparableFilterARB( GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %p, %d, %p, %p)\n", target, format, type, rowBufSize, row, columnBufSize, column, span );
   funcs->ext.p_glGetnSeparableFilterARB( target, format, type, rowBufSize, row, columnBufSize, column, span );
 }
 
+static void WINAPI glGetnTexImage( GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %p)\n", target, level, format, type, bufSize, pixels );
+  funcs->ext.p_glGetnTexImage( target, level, format, type, bufSize, pixels );
+}
+
 static void WINAPI glGetnTexImageARB( GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %p)\n", target, level, format, type, bufSize, img );
   funcs->ext.p_glGetnTexImageARB( target, level, format, type, bufSize, img );
 }
 
+static void WINAPI glGetnUniformdv( GLuint program, GLint location, GLsizei bufSize, GLdouble* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", program, location, bufSize, params );
+  funcs->ext.p_glGetnUniformdv( program, location, bufSize, params );
+}
+
 static void WINAPI glGetnUniformdvARB( GLuint program, GLint location, GLsizei bufSize, GLdouble* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", program, location, bufSize, params );
   funcs->ext.p_glGetnUniformdvARB( program, location, bufSize, params );
 }
 
+static void WINAPI glGetnUniformfv( GLuint program, GLint location, GLsizei bufSize, GLfloat* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", program, location, bufSize, params );
+  funcs->ext.p_glGetnUniformfv( program, location, bufSize, params );
+}
+
 static void WINAPI glGetnUniformfvARB( GLuint program, GLint location, GLsizei bufSize, GLfloat* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", program, location, bufSize, params );
   funcs->ext.p_glGetnUniformfvARB( program, location, bufSize, params );
 }
 
+static void WINAPI glGetnUniformiv( GLuint program, GLint location, GLsizei bufSize, GLint* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", program, location, bufSize, params );
+  funcs->ext.p_glGetnUniformiv( program, location, bufSize, params );
+}
+
 static void WINAPI glGetnUniformivARB( GLuint program, GLint location, GLsizei bufSize, GLint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", program, location, bufSize, params );
   funcs->ext.p_glGetnUniformivARB( program, location, bufSize, params );
 }
 
+static void WINAPI glGetnUniformuiv( GLuint program, GLint location, GLsizei bufSize, GLuint* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", program, location, bufSize, params );
+  funcs->ext.p_glGetnUniformuiv( program, location, bufSize, params );
+}
+
 static void WINAPI glGetnUniformuivARB( GLuint program, GLint location, GLsizei bufSize, GLuint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", program, location, bufSize, params );
@@ -5464,6 +6034,18 @@ static void WINAPI glInvalidateFramebuffer( GLenum target, GLsizei numAttachment
   funcs->ext.p_glInvalidateFramebuffer( target, numAttachments, attachments );
 }
 
+static void WINAPI glInvalidateNamedFramebufferData( GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", framebuffer, numAttachments, attachments );
+  funcs->ext.p_glInvalidateNamedFramebufferData( framebuffer, numAttachments, attachments );
+}
+
+static void WINAPI glInvalidateNamedFramebufferSubData( GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p, %d, %d, %d, %d)\n", framebuffer, numAttachments, attachments, x, y, width, height );
+  funcs->ext.p_glInvalidateNamedFramebufferSubData( framebuffer, numAttachments, attachments, x, y, width, height );
+}
+
 static void WINAPI glInvalidateSubFramebuffer( GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %p, %d, %d, %d, %d)\n", target, numAttachments, attachments, x, y, width, height );
@@ -5986,12 +6568,24 @@ static void WINAPI glMapGrid2xOES( GLint n, GLfixed u1, GLfixed u2, GLfixed v1,
   funcs->ext.p_glMapGrid2xOES( n, u1, u2, v1, v2 );
 }
 
+static void* WINAPI glMapNamedBuffer( GLuint buffer, GLenum access ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d)\n", buffer, access );
+  return funcs->ext.p_glMapNamedBuffer( buffer, access );
+}
+
 static void* WINAPI glMapNamedBufferEXT( GLuint buffer, GLenum access ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d)\n", buffer, access );
   return funcs->ext.p_glMapNamedBufferEXT( buffer, access );
 }
 
+static void* WINAPI glMapNamedBufferRange( GLuint buffer, GLintptr offset, GLsizei length, GLbitfield access ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %ld, %d, %d)\n", buffer, offset, length, access );
+  return funcs->ext.p_glMapNamedBufferRange( buffer, offset, length, access );
+}
+
 static void* WINAPI glMapNamedBufferRangeEXT( GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %ld, %ld, %d)\n", buffer, offset, length, access );
@@ -6088,12 +6682,30 @@ static void WINAPI glMatrixIndexusvARB( GLint size, const GLushort* indices ) {
   funcs->ext.p_glMatrixIndexusvARB( size, indices );
 }
 
+static void WINAPI glMatrixLoad3x2fNV( GLenum matrixMode, const GLfloat* m ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", matrixMode, m );
+  funcs->ext.p_glMatrixLoad3x2fNV( matrixMode, m );
+}
+
+static void WINAPI glMatrixLoad3x3fNV( GLenum matrixMode, const GLfloat* m ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", matrixMode, m );
+  funcs->ext.p_glMatrixLoad3x3fNV( matrixMode, m );
+}
+
 static void WINAPI glMatrixLoadIdentityEXT( GLenum mode ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d)\n", mode );
   funcs->ext.p_glMatrixLoadIdentityEXT( mode );
 }
 
+static void WINAPI glMatrixLoadTranspose3x3fNV( GLenum matrixMode, const GLfloat* m ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", matrixMode, m );
+  funcs->ext.p_glMatrixLoadTranspose3x3fNV( matrixMode, m );
+}
+
 static void WINAPI glMatrixLoadTransposedEXT( GLenum mode, const GLdouble* m ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %p)\n", mode, m );
@@ -6118,6 +6730,24 @@ static void WINAPI glMatrixLoadfEXT( GLenum mode, const GLfloat* m ) {
   funcs->ext.p_glMatrixLoadfEXT( mode, m );
 }
 
+static void WINAPI glMatrixMult3x2fNV( GLenum matrixMode, const GLfloat* m ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", matrixMode, m );
+  funcs->ext.p_glMatrixMult3x2fNV( matrixMode, m );
+}
+
+static void WINAPI glMatrixMult3x3fNV( GLenum matrixMode, const GLfloat* m ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", matrixMode, m );
+  funcs->ext.p_glMatrixMult3x3fNV( matrixMode, m );
+}
+
+static void WINAPI glMatrixMultTranspose3x3fNV( GLenum matrixMode, const GLfloat* m ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p)\n", matrixMode, m );
+  funcs->ext.p_glMatrixMultTranspose3x3fNV( matrixMode, m );
+}
+
 static void WINAPI glMatrixMultTransposedEXT( GLenum mode, const GLdouble* m ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %p)\n", mode, m );
@@ -6202,6 +6832,12 @@ static void WINAPI glMemoryBarrier( GLbitfield barriers ) {
   funcs->ext.p_glMemoryBarrier( barriers );
 }
 
+static void WINAPI glMemoryBarrierByRegion( GLbitfield barriers ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d)\n", barriers );
+  funcs->ext.p_glMemoryBarrierByRegion( barriers );
+}
+
 static void WINAPI glMemoryBarrierEXT( GLbitfield barriers ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d)\n", barriers );
@@ -6292,6 +6928,12 @@ static void WINAPI glMultiDrawArraysIndirectAMD( GLenum mode, const void* indire
   funcs->ext.p_glMultiDrawArraysIndirectAMD( mode, indirect, primcount, stride );
 }
 
+static void WINAPI glMultiDrawArraysIndirectBindlessCountNV( GLenum mode, const void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p, %d, %d, %d, %d)\n", mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount );
+  funcs->ext.p_glMultiDrawArraysIndirectBindlessCountNV( mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount );
+}
+
 static void WINAPI glMultiDrawArraysIndirectBindlessNV( GLenum mode, const void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %p, %d, %d, %d)\n", mode, indirect, drawCount, stride, vertexBufferCount );
@@ -6340,6 +6982,12 @@ static void WINAPI glMultiDrawElementsIndirectAMD( GLenum mode, GLenum type, con
   funcs->ext.p_glMultiDrawElementsIndirectAMD( mode, type, indirect, primcount, stride );
 }
 
+static void WINAPI glMultiDrawElementsIndirectBindlessCountNV( GLenum mode, GLenum type, const void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p, %d, %d, %d, %d)\n", mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount );
+  funcs->ext.p_glMultiDrawElementsIndirectBindlessCountNV( mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount );
+}
+
 static void WINAPI glMultiDrawElementsIndirectBindlessNV( GLenum mode, GLenum type, const void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %p, %d, %d, %d)\n", mode, type, indirect, drawCount, stride, vertexBufferCount );
@@ -7294,18 +7942,48 @@ static void WINAPI glMultiTexSubImage3DEXT( GLenum texunit, GLenum target, GLint
   funcs->ext.p_glMultiTexSubImage3DEXT( texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );
 }
 
+static void WINAPI glNamedBufferData( GLuint buffer, GLsizei size, const void* data, GLenum usage ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p, %d)\n", buffer, size, data, usage );
+  funcs->ext.p_glNamedBufferData( buffer, size, data, usage );
+}
+
 static void WINAPI glNamedBufferDataEXT( GLuint buffer, GLsizeiptr size, const void* data, GLenum usage ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %ld, %p, %d)\n", buffer, size, data, usage );
   funcs->ext.p_glNamedBufferDataEXT( buffer, size, data, usage );
 }
 
+static void WINAPI glNamedBufferPageCommitmentARB( GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %ld, %ld, %d)\n", buffer, offset, size, commit );
+  funcs->ext.p_glNamedBufferPageCommitmentARB( buffer, offset, size, commit );
+}
+
+static void WINAPI glNamedBufferPageCommitmentEXT( GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %ld, %ld, %d)\n", buffer, offset, size, commit );
+  funcs->ext.p_glNamedBufferPageCommitmentEXT( buffer, offset, size, commit );
+}
+
+static void WINAPI glNamedBufferStorage( GLuint buffer, GLsizei size, const void* data, GLbitfield flags ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p, %d)\n", buffer, size, data, flags );
+  funcs->ext.p_glNamedBufferStorage( buffer, size, data, flags );
+}
+
 static void WINAPI glNamedBufferStorageEXT( GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %ld, %p, %d)\n", buffer, size, data, flags );
   funcs->ext.p_glNamedBufferStorageEXT( buffer, size, data, flags );
 }
 
+static void WINAPI glNamedBufferSubData( GLuint buffer, GLintptr offset, GLsizei size, const void* data ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %ld, %d, %p)\n", buffer, offset, size, data );
+  funcs->ext.p_glNamedBufferSubData( buffer, offset, size, data );
+}
+
 static void WINAPI glNamedBufferSubDataEXT( GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %ld, %ld, %p)\n", buffer, offset, size, data );
@@ -7318,18 +7996,60 @@ static void WINAPI glNamedCopyBufferSubDataEXT( GLuint readBuffer, GLuint writeB
   funcs->ext.p_glNamedCopyBufferSubDataEXT( readBuffer, writeBuffer, readOffset, writeOffset, size );
 }
 
+static void WINAPI glNamedFramebufferDrawBuffer( GLuint framebuffer, GLenum buf ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d)\n", framebuffer, buf );
+  funcs->ext.p_glNamedFramebufferDrawBuffer( framebuffer, buf );
+}
+
+static void WINAPI glNamedFramebufferDrawBuffers( GLuint framebuffer, GLsizei n, const GLenum* bufs ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", framebuffer, n, bufs );
+  funcs->ext.p_glNamedFramebufferDrawBuffers( framebuffer, n, bufs );
+}
+
+static void WINAPI glNamedFramebufferParameteri( GLuint framebuffer, GLenum pname, GLint param ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d)\n", framebuffer, pname, param );
+  funcs->ext.p_glNamedFramebufferParameteri( framebuffer, pname, param );
+}
+
 static void WINAPI glNamedFramebufferParameteriEXT( GLuint framebuffer, GLenum pname, GLint param ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d)\n", framebuffer, pname, param );
   funcs->ext.p_glNamedFramebufferParameteriEXT( framebuffer, pname, param );
 }
 
+static void WINAPI glNamedFramebufferReadBuffer( GLuint framebuffer, GLenum src ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d)\n", framebuffer, src );
+  funcs->ext.p_glNamedFramebufferReadBuffer( framebuffer, src );
+}
+
+static void WINAPI glNamedFramebufferRenderbuffer( GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d)\n", framebuffer, attachment, renderbuffertarget, renderbuffer );
+  funcs->ext.p_glNamedFramebufferRenderbuffer( framebuffer, attachment, renderbuffertarget, renderbuffer );
+}
+
 static void WINAPI glNamedFramebufferRenderbufferEXT( GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d)\n", framebuffer, attachment, renderbuffertarget, renderbuffer );
   funcs->ext.p_glNamedFramebufferRenderbufferEXT( framebuffer, attachment, renderbuffertarget, renderbuffer );
 }
 
+static void WINAPI glNamedFramebufferSampleLocationsfvNV( GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p)\n", framebuffer, start, count, v );
+  funcs->ext.p_glNamedFramebufferSampleLocationsfvNV( framebuffer, start, count, v );
+}
+
+static void WINAPI glNamedFramebufferTexture( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d)\n", framebuffer, attachment, texture, level );
+  funcs->ext.p_glNamedFramebufferTexture( framebuffer, attachment, texture, level );
+}
+
 static void WINAPI glNamedFramebufferTexture1DEXT( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d)\n", framebuffer, attachment, textarget, texture, level );
@@ -7360,6 +8080,12 @@ static void WINAPI glNamedFramebufferTextureFaceEXT( GLuint framebuffer, GLenum
   funcs->ext.p_glNamedFramebufferTextureFaceEXT( framebuffer, attachment, texture, level, face );
 }
 
+static void WINAPI glNamedFramebufferTextureLayer( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d)\n", framebuffer, attachment, texture, level, layer );
+  funcs->ext.p_glNamedFramebufferTextureLayer( framebuffer, attachment, texture, level, layer );
+}
+
 static void WINAPI glNamedFramebufferTextureLayerEXT( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d)\n", framebuffer, attachment, texture, level, layer );
@@ -7438,12 +8164,24 @@ static void WINAPI glNamedProgramStringEXT( GLuint program, GLenum target, GLenu
   funcs->ext.p_glNamedProgramStringEXT( program, target, format, len, string );
 }
 
+static void WINAPI glNamedRenderbufferStorage( GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d)\n", renderbuffer, internalformat, width, height );
+  funcs->ext.p_glNamedRenderbufferStorage( renderbuffer, internalformat, width, height );
+}
+
 static void WINAPI glNamedRenderbufferStorageEXT( GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d)\n", renderbuffer, internalformat, width, height );
   funcs->ext.p_glNamedRenderbufferStorageEXT( renderbuffer, internalformat, width, height );
 }
 
+static void WINAPI glNamedRenderbufferStorageMultisample( GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d)\n", renderbuffer, samples, internalformat, width, height );
+  funcs->ext.p_glNamedRenderbufferStorageMultisample( renderbuffer, samples, internalformat, width, height );
+}
+
 static void WINAPI glNamedRenderbufferStorageMultisampleCoverageEXT( GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d)\n", renderbuffer, coverageSamples, colorSamples, internalformat, width, height );
@@ -7714,6 +8452,18 @@ static void WINAPI glPathFogGenNV( GLenum genMode ) {
   funcs->ext.p_glPathFogGenNV( genMode );
 }
 
+static GLenum WINAPI glPathGlyphIndexArrayNV( GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p, %d, %d, %d, %d, %f)\n", firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale );
+  return funcs->ext.p_glPathGlyphIndexArrayNV( firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale );
+}
+
+static GLenum WINAPI glPathGlyphIndexRangeNV( GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2] ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %p, %d, %d, %f, %p)\n", fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount );
+  return funcs->ext.p_glPathGlyphIndexRangeNV( fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount );
+}
+
 static void WINAPI glPathGlyphRangeNV( GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %p, %d, %d, %d, %d, %d, %f)\n", firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale );
@@ -7726,6 +8476,12 @@ static void WINAPI glPathGlyphsNV( GLuint firstPathName, GLenum fontTarget, cons
   funcs->ext.p_glPathGlyphsNV( firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale );
 }
 
+static GLenum WINAPI glPathMemoryGlyphIndexArrayNV( GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void* fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %ld, %p, %d, %d, %d, %d, %f)\n", firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale );
+  return funcs->ext.p_glPathMemoryGlyphIndexArrayNV( firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale );
+}
+
 static void WINAPI glPathParameterfNV( GLuint path, GLenum pname, GLfloat value ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %f)\n", path, pname, value );
@@ -7984,6 +8740,12 @@ static GLint WINAPI glPollInstrumentsSGIX( GLint* marker_p ) {
   return funcs->ext.p_glPollInstrumentsSGIX( marker_p );
 }
 
+static void WINAPI glPolygonOffsetClampEXT( GLfloat factor, GLfloat units, GLfloat clamp ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%f, %f, %f)\n", factor, units, clamp );
+  funcs->ext.p_glPolygonOffsetClampEXT( factor, units, clamp );
+}
+
 static void WINAPI glPolygonOffsetEXT( GLfloat factor, GLfloat bias ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%f, %f)\n", factor, bias );
@@ -8284,6 +9046,12 @@ static void WINAPI glProgramParameters4fvNV( GLenum target, GLuint index, GLsize
   funcs->ext.p_glProgramParameters4fvNV( target, index, count, v );
 }
 
+static void WINAPI glProgramPathFragmentInputGenNV( GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat* coeffs ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %p)\n", program, location, genMode, components, coeffs );
+  funcs->ext.p_glProgramPathFragmentInputGenNV( program, location, genMode, components, coeffs );
+}
+
 static void WINAPI glProgramStringARB( GLenum target, GLenum format, GLsizei len, const void* string ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", target, format, len, string );
@@ -9076,6 +9844,12 @@ static GLbitfield WINAPI glQueryMatrixxOES( GLfixed* mantissa, GLint* exponent )
   return funcs->ext.p_glQueryMatrixxOES( mantissa, exponent );
 }
 
+static void WINAPI glQueryObjectParameteruiAMD( GLenum target, GLuint id, GLenum pname, GLuint param ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d)\n", target, id, pname, param );
+  funcs->ext.p_glQueryObjectParameteruiAMD( target, id, pname, param );
+}
+
 static void WINAPI glRasterPos2xOES( GLfixed x, GLfixed y ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d)\n", x, y );
@@ -9112,6 +9886,12 @@ static void WINAPI glRasterPos4xvOES( const GLfixed* coords ) {
   funcs->ext.p_glRasterPos4xvOES( coords );
 }
 
+static void WINAPI glRasterSamplesEXT( GLuint samples, GLboolean fixedsamplelocations ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d)\n", samples, fixedsamplelocations );
+  funcs->ext.p_glRasterSamplesEXT( samples, fixedsamplelocations );
+}
+
 static void WINAPI glReadBufferRegion( GLenum region, GLint x, GLint y, GLsizei width, GLsizei height ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d)\n", region, x, y, width, height );
@@ -9124,6 +9904,12 @@ static void WINAPI glReadInstrumentsSGIX( GLint marker ) {
   funcs->ext.p_glReadInstrumentsSGIX( marker );
 }
 
+static void WINAPI glReadnPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d, %d, %p)\n", x, y, width, height, format, type, bufSize, data );
+  funcs->ext.p_glReadnPixels( x, y, width, height, format, type, bufSize, data );
+}
+
 static void WINAPI glReadnPixelsARB( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d, %d, %p)\n", x, y, width, height, format, type, bufSize, data );
@@ -9358,6 +10144,12 @@ static void WINAPI glResizeBuffersMESA( void ) {
   funcs->ext.p_glResizeBuffersMESA( );
 }
 
+static void WINAPI glResolveDepthValuesNV( void ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("()\n");
+  funcs->ext.p_glResolveDepthValuesNV( );
+}
+
 static void WINAPI glResumeTransformFeedback( void ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("()\n");
@@ -9418,10 +10210,10 @@ static void WINAPI glSampleMaskSGIS( GLclampf value, GLboolean invert ) {
   funcs->ext.p_glSampleMaskSGIS( value, invert );
 }
 
-static void WINAPI glSampleMaski( GLuint index, GLbitfield mask ) {
+static void WINAPI glSampleMaski( GLuint maskNumber, GLbitfield mask ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
-  TRACE("(%d, %d)\n", index, mask );
-  funcs->ext.p_glSampleMaski( index, mask );
+  TRACE("(%d, %d)\n", maskNumber, mask );
+  funcs->ext.p_glSampleMaski( maskNumber, mask );
 }
 
 static void WINAPI glSamplePatternEXT( GLenum pattern ) {
@@ -9946,6 +10738,30 @@ static void WINAPI glStencilStrokePathNV( GLuint path, GLint reference, GLuint m
   funcs->ext.p_glStencilStrokePathNV( path, reference, mask );
 }
 
+static void WINAPI glStencilThenCoverFillPathInstancedNV( GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat* transformValues ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p, %d, %d, %d, %d, %d, %p)\n", numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues );
+  funcs->ext.p_glStencilThenCoverFillPathInstancedNV( numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues );
+}
+
+static void WINAPI glStencilThenCoverFillPathNV( GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d)\n", path, fillMode, mask, coverMode );
+  funcs->ext.p_glStencilThenCoverFillPathNV( path, fillMode, mask, coverMode );
+}
+
+static void WINAPI glStencilThenCoverStrokePathInstancedNV( GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat* transformValues ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p, %d, %d, %d, %d, %d, %p)\n", numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues );
+  funcs->ext.p_glStencilThenCoverStrokePathInstancedNV( numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues );
+}
+
+static void WINAPI glStencilThenCoverStrokePathNV( GLuint path, GLint reference, GLuint mask, GLenum coverMode ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d)\n", path, reference, mask, coverMode );
+  funcs->ext.p_glStencilThenCoverStrokePathNV( path, reference, mask, coverMode );
+}
+
 static void WINAPI glStopInstrumentsSGIX( GLint marker ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d)\n", marker );
@@ -9958,6 +10774,12 @@ static void WINAPI glStringMarkerGREMEDY( GLsizei len, const void* string ) {
   funcs->ext.p_glStringMarkerGREMEDY( len, string );
 }
 
+static void WINAPI glSubpixelPrecisionBiasNV( GLuint xbits, GLuint ybits ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d)\n", xbits, ybits );
+  funcs->ext.p_glSubpixelPrecisionBiasNV( xbits, ybits );
+}
+
 static void WINAPI glSwizzleEXT( GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d)\n", res, in, outX, outY, outZ, outW );
@@ -10600,18 +11422,36 @@ static void WINAPI glTexSubImage4DSGIS( GLenum target, GLint level, GLint xoffse
   funcs->ext.p_glTexSubImage4DSGIS( target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels );
 }
 
+static void WINAPI glTextureBarrier( void ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("()\n");
+  funcs->ext.p_glTextureBarrier( );
+}
+
 static void WINAPI glTextureBarrierNV( void ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("()\n");
   funcs->ext.p_glTextureBarrierNV( );
 }
 
+static void WINAPI glTextureBuffer( GLuint texture, GLenum internalformat, GLuint buffer ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d)\n", texture, internalformat, buffer );
+  funcs->ext.p_glTextureBuffer( texture, internalformat, buffer );
+}
+
 static void WINAPI glTextureBufferEXT( GLuint texture, GLenum target, GLenum internalformat, GLuint buffer ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d)\n", texture, target, internalformat, buffer );
   funcs->ext.p_glTextureBufferEXT( texture, target, internalformat, buffer );
 }
 
+static void WINAPI glTextureBufferRange( GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizei size ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %ld, %d)\n", texture, internalformat, buffer, offset, size );
+  funcs->ext.p_glTextureBufferRange( texture, internalformat, buffer, offset, size );
+}
+
 static void WINAPI glTextureBufferRangeEXT( GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %ld, %ld)\n", texture, target, internalformat, buffer, offset, size );
@@ -10690,36 +11530,72 @@ static void WINAPI glTexturePageCommitmentEXT( GLuint texture, GLint level, GLin
   funcs->ext.p_glTexturePageCommitmentEXT( texture, level, xoffset, yoffset, zoffset, width, height, depth, resident );
 }
 
+static void WINAPI glTextureParameterIiv( GLuint texture, GLenum pname, const GLint* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", texture, pname, params );
+  funcs->ext.p_glTextureParameterIiv( texture, pname, params );
+}
+
 static void WINAPI glTextureParameterIivEXT( GLuint texture, GLenum target, GLenum pname, const GLint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", texture, target, pname, params );
   funcs->ext.p_glTextureParameterIivEXT( texture, target, pname, params );
 }
 
+static void WINAPI glTextureParameterIuiv( GLuint texture, GLenum pname, const GLuint* params ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", texture, pname, params );
+  funcs->ext.p_glTextureParameterIuiv( texture, pname, params );
+}
+
 static void WINAPI glTextureParameterIuivEXT( GLuint texture, GLenum target, GLenum pname, const GLuint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", texture, target, pname, params );
   funcs->ext.p_glTextureParameterIuivEXT( texture, target, pname, params );
 }
 
+static void WINAPI glTextureParameterf( GLuint texture, GLenum pname, GLfloat param ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %f)\n", texture, pname, param );
+  funcs->ext.p_glTextureParameterf( texture, pname, param );
+}
+
 static void WINAPI glTextureParameterfEXT( GLuint texture, GLenum target, GLenum pname, GLfloat param ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %f)\n", texture, target, pname, param );
   funcs->ext.p_glTextureParameterfEXT( texture, target, pname, param );
 }
 
+static void WINAPI glTextureParameterfv( GLuint texture, GLenum pname, const GLfloat* param ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", texture, pname, param );
+  funcs->ext.p_glTextureParameterfv( texture, pname, param );
+}
+
 static void WINAPI glTextureParameterfvEXT( GLuint texture, GLenum target, GLenum pname, const GLfloat* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", texture, target, pname, params );
   funcs->ext.p_glTextureParameterfvEXT( texture, target, pname, params );
 }
 
+static void WINAPI glTextureParameteri( GLuint texture, GLenum pname, GLint param ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d)\n", texture, pname, param );
+  funcs->ext.p_glTextureParameteri( texture, pname, param );
+}
+
 static void WINAPI glTextureParameteriEXT( GLuint texture, GLenum target, GLenum pname, GLint param ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d)\n", texture, target, pname, param );
   funcs->ext.p_glTextureParameteriEXT( texture, target, pname, param );
 }
 
+static void WINAPI glTextureParameteriv( GLuint texture, GLenum pname, const GLint* param ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %p)\n", texture, pname, param );
+  funcs->ext.p_glTextureParameteriv( texture, pname, param );
+}
+
 static void WINAPI glTextureParameterivEXT( GLuint texture, GLenum target, GLenum pname, const GLint* params ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %p)\n", texture, target, pname, params );
@@ -10738,30 +11614,60 @@ static void WINAPI glTextureRenderbufferEXT( GLuint texture, GLenum target, GLui
   funcs->ext.p_glTextureRenderbufferEXT( texture, target, renderbuffer );
 }
 
+static void WINAPI glTextureStorage1D( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d)\n", texture, levels, internalformat, width );
+  funcs->ext.p_glTextureStorage1D( texture, levels, internalformat, width );
+}
+
 static void WINAPI glTextureStorage1DEXT( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d)\n", texture, target, levels, internalformat, width );
   funcs->ext.p_glTextureStorage1DEXT( texture, target, levels, internalformat, width );
 }
 
+static void WINAPI glTextureStorage2D( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d)\n", texture, levels, internalformat, width, height );
+  funcs->ext.p_glTextureStorage2D( texture, levels, internalformat, width, height );
+}
+
 static void WINAPI glTextureStorage2DEXT( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d)\n", texture, target, levels, internalformat, width, height );
   funcs->ext.p_glTextureStorage2DEXT( texture, target, levels, internalformat, width, height );
 }
 
+static void WINAPI glTextureStorage2DMultisample( GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d)\n", texture, samples, internalformat, width, height, fixedsamplelocations );
+  funcs->ext.p_glTextureStorage2DMultisample( texture, samples, internalformat, width, height, fixedsamplelocations );
+}
+
 static void WINAPI glTextureStorage2DMultisampleEXT( GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d, %d)\n", texture, target, samples, internalformat, width, height, fixedsamplelocations );
   funcs->ext.p_glTextureStorage2DMultisampleEXT( texture, target, samples, internalformat, width, height, fixedsamplelocations );
 }
 
+static void WINAPI glTextureStorage3D( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d)\n", texture, levels, internalformat, width, height, depth );
+  funcs->ext.p_glTextureStorage3D( texture, levels, internalformat, width, height, depth );
+}
+
 static void WINAPI glTextureStorage3DEXT( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d, %d)\n", texture, target, levels, internalformat, width, height, depth );
   funcs->ext.p_glTextureStorage3DEXT( texture, target, levels, internalformat, width, height, depth );
 }
 
+static void WINAPI glTextureStorage3DMultisample( GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d, %d)\n", texture, samples, internalformat, width, height, depth, fixedsamplelocations );
+  funcs->ext.p_glTextureStorage3DMultisample( texture, samples, internalformat, width, height, depth, fixedsamplelocations );
+}
+
 static void WINAPI glTextureStorage3DMultisampleEXT( GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d, %d, %d)\n", texture, target, samples, internalformat, width, height, depth, fixedsamplelocations );
@@ -10774,18 +11680,36 @@ static void WINAPI glTextureStorageSparseAMD( GLuint texture, GLenum target, GLe
   funcs->ext.p_glTextureStorageSparseAMD( texture, target, internalFormat, width, height, depth, layers, flags );
 }
 
+static void WINAPI glTextureSubImage1D( GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d, %p)\n", texture, level, xoffset, width, format, type, pixels );
+  funcs->ext.p_glTextureSubImage1D( texture, level, xoffset, width, format, type, pixels );
+}
+
 static void WINAPI glTextureSubImage1DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d, %d, %p)\n", texture, target, level, xoffset, width, format, type, pixels );
   funcs->ext.p_glTextureSubImage1DEXT( texture, target, level, xoffset, width, format, type, pixels );
 }
 
+static void WINAPI glTextureSubImage2D( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d, %d, %d, %p)\n", texture, level, xoffset, yoffset, width, height, format, type, pixels );
+  funcs->ext.p_glTextureSubImage2D( texture, level, xoffset, yoffset, width, height, format, type, pixels );
+}
+
 static void WINAPI glTextureSubImage2DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d, %d, %d, %d, %p)\n", texture, target, level, xoffset, yoffset, width, height, format, type, pixels );
   funcs->ext.p_glTextureSubImage2DEXT( texture, target, level, xoffset, yoffset, width, height, format, type, pixels );
 }
 
+static void WINAPI glTextureSubImage3D( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %p)\n", texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );
+  funcs->ext.p_glTextureSubImage3D( texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );
+}
+
 static void WINAPI glTextureSubImage3DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %p)\n", texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );
@@ -10804,12 +11728,24 @@ static void WINAPI glTrackMatrixNV( GLenum target, GLuint address, GLenum matrix
   funcs->ext.p_glTrackMatrixNV( target, address, matrix, transform );
 }
 
-static void WINAPI glTransformFeedbackAttribsNV( GLuint count, const GLint* attribs, GLenum bufferMode ) {
+static void WINAPI glTransformFeedbackAttribsNV( GLsizei count, const GLint* attribs, GLenum bufferMode ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %p, %d)\n", count, attribs, bufferMode );
   funcs->ext.p_glTransformFeedbackAttribsNV( count, attribs, bufferMode );
 }
 
+static void WINAPI glTransformFeedbackBufferBase( GLuint xfb, GLuint index, GLuint buffer ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d)\n", xfb, index, buffer );
+  funcs->ext.p_glTransformFeedbackBufferBase( xfb, index, buffer );
+}
+
+static void WINAPI glTransformFeedbackBufferRange( GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizei size ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %ld, %d)\n", xfb, index, buffer, offset, size );
+  funcs->ext.p_glTransformFeedbackBufferRange( xfb, index, buffer, offset, size );
+}
+
 static void WINAPI glTransformFeedbackStreamAttribsNV( GLsizei count, const GLint* attribs, GLsizei nbuffers, const GLint* bufstreams, GLenum bufferMode ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %p, %d, %p, %d)\n", count, attribs, nbuffers, bufstreams, bufferMode );
@@ -11476,6 +12412,12 @@ static GLboolean WINAPI glUnmapBufferARB( GLenum target ) {
   return funcs->ext.p_glUnmapBufferARB( target );
 }
 
+static GLboolean WINAPI glUnmapNamedBuffer( GLuint buffer ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d)\n", buffer );
+  return funcs->ext.p_glUnmapNamedBuffer( buffer );
+}
+
 static GLboolean WINAPI glUnmapNamedBufferEXT( GLuint buffer ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d)\n", buffer );
@@ -11542,10 +12484,10 @@ static void WINAPI glVDPAUInitNV( const void* vdpDevice, const void* getProcAddr
   funcs->ext.p_glVDPAUInitNV( vdpDevice, getProcAddress );
 }
 
-static void WINAPI glVDPAUIsSurfaceNV( GLvdpauSurfaceNV surface ) {
+static GLboolean WINAPI glVDPAUIsSurfaceNV( GLvdpauSurfaceNV surface ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%ld)\n", surface );
-  funcs->ext.p_glVDPAUIsSurfaceNV( surface );
+  return funcs->ext.p_glVDPAUIsSurfaceNV( surface );
 }
 
 static void WINAPI glVDPAUMapSurfacesNV( GLsizei numSurfaces, const GLvdpauSurfaceNV* surfaces ) {
@@ -11662,10 +12604,10 @@ static void WINAPI glVariantusvEXT( GLuint id, const GLushort* addr ) {
   funcs->ext.p_glVariantusvEXT( id, addr );
 }
 
-static void WINAPI glVertex2bOES( GLbyte x ) {
+static void WINAPI glVertex2bOES( GLbyte x, GLbyte y ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
-  TRACE("(%d)\n", x );
-  funcs->ext.p_glVertex2bOES( x );
+  TRACE("(%d, %d)\n", x, y );
+  funcs->ext.p_glVertex2bOES( x, y );
 }
 
 static void WINAPI glVertex2bvOES( const GLbyte* coords ) {
@@ -11698,10 +12640,10 @@ static void WINAPI glVertex2xvOES( const GLfixed* coords ) {
   funcs->ext.p_glVertex2xvOES( coords );
 }
 
-static void WINAPI glVertex3bOES( GLbyte x, GLbyte y ) {
+static void WINAPI glVertex3bOES( GLbyte x, GLbyte y, GLbyte z ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
-  TRACE("(%d, %d)\n", x, y );
-  funcs->ext.p_glVertex3bOES( x, y );
+  TRACE("(%d, %d, %d)\n", x, y, z );
+  funcs->ext.p_glVertex3bOES( x, y, z );
 }
 
 static void WINAPI glVertex3bvOES( const GLbyte* coords ) {
@@ -11734,10 +12676,10 @@ static void WINAPI glVertex3xvOES( const GLfixed* coords ) {
   funcs->ext.p_glVertex3xvOES( coords );
 }
 
-static void WINAPI glVertex4bOES( GLbyte x, GLbyte y, GLbyte z ) {
+static void WINAPI glVertex4bOES( GLbyte x, GLbyte y, GLbyte z, GLbyte w ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
-  TRACE("(%d, %d, %d)\n", x, y, z );
-  funcs->ext.p_glVertex4bOES( x, y, z );
+  TRACE("(%d, %d, %d, %d)\n", x, y, z, w );
+  funcs->ext.p_glVertex4bOES( x, y, z, w );
 }
 
 static void WINAPI glVertex4bvOES( const GLbyte* coords ) {
@@ -11770,12 +12712,42 @@ static void WINAPI glVertex4xvOES( const GLfixed* coords ) {
   funcs->ext.p_glVertex4xvOES( coords );
 }
 
+static void WINAPI glVertexArrayAttribBinding( GLuint vaobj, GLuint attribindex, GLuint bindingindex ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d)\n", vaobj, attribindex, bindingindex );
+  funcs->ext.p_glVertexArrayAttribBinding( vaobj, attribindex, bindingindex );
+}
+
+static void WINAPI glVertexArrayAttribFormat( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d, %d)\n", vaobj, attribindex, size, type, normalized, relativeoffset );
+  funcs->ext.p_glVertexArrayAttribFormat( vaobj, attribindex, size, type, normalized, relativeoffset );
+}
+
+static void WINAPI glVertexArrayAttribIFormat( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d)\n", vaobj, attribindex, size, type, relativeoffset );
+  funcs->ext.p_glVertexArrayAttribIFormat( vaobj, attribindex, size, type, relativeoffset );
+}
+
+static void WINAPI glVertexArrayAttribLFormat( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %d, %d)\n", vaobj, attribindex, size, type, relativeoffset );
+  funcs->ext.p_glVertexArrayAttribLFormat( vaobj, attribindex, size, type, relativeoffset );
+}
+
 static void WINAPI glVertexArrayBindVertexBufferEXT( GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %ld, %d)\n", vaobj, bindingindex, buffer, offset, stride );
   funcs->ext.p_glVertexArrayBindVertexBufferEXT( vaobj, bindingindex, buffer, offset, stride );
 }
 
+static void WINAPI glVertexArrayBindingDivisor( GLuint vaobj, GLuint bindingindex, GLuint divisor ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d)\n", vaobj, bindingindex, divisor );
+  funcs->ext.p_glVertexArrayBindingDivisor( vaobj, bindingindex, divisor );
+}
+
 static void WINAPI glVertexArrayColorOffsetEXT( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %ld)\n", vaobj, buffer, size, type, stride, offset );
@@ -11788,6 +12760,12 @@ static void WINAPI glVertexArrayEdgeFlagOffsetEXT( GLuint vaobj, GLuint buffer,
   funcs->ext.p_glVertexArrayEdgeFlagOffsetEXT( vaobj, buffer, stride, offset );
 }
 
+static void WINAPI glVertexArrayElementBuffer( GLuint vaobj, GLuint buffer ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d)\n", vaobj, buffer );
+  funcs->ext.p_glVertexArrayElementBuffer( vaobj, buffer );
+}
+
 static void WINAPI glVertexArrayFogCoordOffsetEXT( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %ld)\n", vaobj, buffer, type, stride, offset );
@@ -11896,6 +12874,18 @@ static void WINAPI glVertexArrayVertexBindingDivisorEXT( GLuint vaobj, GLuint bi
   funcs->ext.p_glVertexArrayVertexBindingDivisorEXT( vaobj, bindingindex, divisor );
 }
 
+static void WINAPI glVertexArrayVertexBuffer( GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %ld, %d)\n", vaobj, bindingindex, buffer, offset, stride );
+  funcs->ext.p_glVertexArrayVertexBuffer( vaobj, bindingindex, buffer, offset, stride );
+}
+
+static void WINAPI glVertexArrayVertexBuffers( GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides ) {
+  const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
+  TRACE("(%d, %d, %d, %p, %p, %p)\n", vaobj, first, count, buffers, offsets, strides );
+  funcs->ext.p_glVertexArrayVertexBuffers( vaobj, first, count, buffers, offsets, strides );
+}
+
 static void WINAPI glVertexArrayVertexOffsetEXT( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
   TRACE("(%d, %d, %d, %d, %d, %ld)\n", vaobj, buffer, size, type, stride, offset );
@@ -13996,7 +14986,7 @@ static void WINAPI glWriteMaskEXT( GLuint res, GLuint in, GLenum outX, GLenum ou
   funcs->ext.p_glWriteMaskEXT( res, in, outX, outY, outZ, outW );
 }
 
-const OpenGL_extension extension_registry[2351] = {
+const OpenGL_extension extension_registry[2516] = {
   { "glAccumxOES", "GL_OES_fixed_point", glAccumxOES },
   { "glActiveProgramEXT", "GL_EXT_separate_shader_objects", glActiveProgramEXT },
   { "glActiveShaderProgram", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glActiveShaderProgram },
@@ -14022,6 +15012,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glBeginFragmentShaderATI", "GL_ATI_fragment_shader", glBeginFragmentShaderATI },
   { "glBeginOcclusionQueryNV", "GL_NV_occlusion_query", glBeginOcclusionQueryNV },
   { "glBeginPerfMonitorAMD", "GL_AMD_performance_monitor", glBeginPerfMonitorAMD },
+  { "glBeginPerfQueryINTEL", "GL_INTEL_performance_query", glBeginPerfQueryINTEL },
   { "glBeginQuery", "GL_VERSION_1_5", glBeginQuery },
   { "glBeginQueryARB", "GL_ARB_occlusion_query", glBeginQueryARB },
   { "glBeginQueryIndexed", "GL_ARB_transform_feedback3 GL_VERSION_4_0", glBeginQueryIndexed },
@@ -14066,6 +15057,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glBindSamplers", "GL_ARB_multi_bind GL_VERSION_4_4", glBindSamplers },
   { "glBindTexGenParameterEXT", "GL_EXT_vertex_shader", glBindTexGenParameterEXT },
   { "glBindTextureEXT", "GL_EXT_texture_object", glBindTextureEXT },
+  { "glBindTextureUnit", "GL_ARB_direct_state_access GL_VERSION_4_5", glBindTextureUnit },
   { "glBindTextureUnitParameterEXT", "GL_EXT_vertex_shader", glBindTextureUnitParameterEXT },
   { "glBindTextures", "GL_ARB_multi_bind GL_VERSION_4_4", glBindTextures },
   { "glBindTransformFeedback", "GL_ARB_transform_feedback2 GL_VERSION_4_0", glBindTransformFeedback },
@@ -14089,6 +15081,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glBinormal3svEXT", "GL_EXT_coordinate_frame", glBinormal3svEXT },
   { "glBinormalPointerEXT", "GL_EXT_coordinate_frame", glBinormalPointerEXT },
   { "glBitmapxOES", "GL_OES_fixed_point", glBitmapxOES },
+  { "glBlendBarrierKHR", "GL_KHR_blend_equation_advanced", glBlendBarrierKHR },
   { "glBlendBarrierNV", "GL_NV_blend_equation_advanced", glBlendBarrierNV },
   { "glBlendColor", "GL_ARB_imaging GL_VERSION_1_4", glBlendColor },
   { "glBlendColorEXT", "GL_EXT_blend_color", glBlendColorEXT },
@@ -14115,9 +15108,11 @@ const OpenGL_extension extension_registry[2351] = {
   { "glBlendParameteriNV", "GL_NV_blend_equation_advanced", glBlendParameteriNV },
   { "glBlitFramebuffer", "GL_ARB_framebuffer_object GL_VERSION_3_0", glBlitFramebuffer },
   { "glBlitFramebufferEXT", "GL_EXT_framebuffer_blit", glBlitFramebufferEXT },
+  { "glBlitNamedFramebuffer", "GL_ARB_direct_state_access GL_VERSION_4_5", glBlitNamedFramebuffer },
   { "glBufferAddressRangeNV", "GL_NV_vertex_buffer_unified_memory", glBufferAddressRangeNV },
   { "glBufferData", "GL_VERSION_1_5", glBufferData },
   { "glBufferDataARB", "GL_ARB_vertex_buffer_object", glBufferDataARB },
+  { "glBufferPageCommitmentARB", "GL_ARB_sparse_buffer", glBufferPageCommitmentARB },
   { "glBufferParameteriAPPLE", "GL_APPLE_flush_buffer_range", glBufferParameteriAPPLE },
   { "glBufferRegionEnabled", "GL_KTX_buffer_region", glBufferRegionEnabled },
   { "glBufferStorage", "GL_ARB_buffer_storage GL_VERSION_4_4", glBufferStorage },
@@ -14125,6 +15120,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glBufferSubDataARB", "GL_ARB_vertex_buffer_object", glBufferSubDataARB },
   { "glCheckFramebufferStatus", "GL_ARB_framebuffer_object GL_VERSION_3_0", glCheckFramebufferStatus },
   { "glCheckFramebufferStatusEXT", "GL_EXT_framebuffer_object", glCheckFramebufferStatusEXT },
+  { "glCheckNamedFramebufferStatus", "GL_ARB_direct_state_access GL_VERSION_4_5", glCheckNamedFramebufferStatus },
   { "glCheckNamedFramebufferStatusEXT", "GL_EXT_direct_state_access", glCheckNamedFramebufferStatusEXT },
   { "glClampColor", "GL_VERSION_3_0", glClampColor },
   { "glClampColorARB", "GL_ARB_color_buffer_float", glClampColorARB },
@@ -14142,8 +15138,14 @@ const OpenGL_extension extension_registry[2351] = {
   { "glClearDepthf", "GL_ARB_ES2_compatibility GL_VERSION_4_1", glClearDepthf },
   { "glClearDepthfOES", "GL_OES_single_precision", glClearDepthfOES },
   { "glClearDepthxOES", "GL_OES_fixed_point", glClearDepthxOES },
+  { "glClearNamedBufferData", "GL_ARB_direct_state_access GL_VERSION_4_5", glClearNamedBufferData },
   { "glClearNamedBufferDataEXT", "GL_EXT_direct_state_access", glClearNamedBufferDataEXT },
+  { "glClearNamedBufferSubData", "GL_ARB_direct_state_access GL_VERSION_4_5", glClearNamedBufferSubData },
   { "glClearNamedBufferSubDataEXT", "GL_EXT_direct_state_access", glClearNamedBufferSubDataEXT },
+  { "glClearNamedFramebufferfi", "GL_ARB_direct_state_access GL_VERSION_4_5", glClearNamedFramebufferfi },
+  { "glClearNamedFramebufferfv", "GL_ARB_direct_state_access GL_VERSION_4_5", glClearNamedFramebufferfv },
+  { "glClearNamedFramebufferiv", "GL_ARB_direct_state_access GL_VERSION_4_5", glClearNamedFramebufferiv },
+  { "glClearNamedFramebufferuiv", "GL_ARB_direct_state_access GL_VERSION_4_5", glClearNamedFramebufferuiv },
   { "glClearTexImage", "GL_ARB_clear_texture GL_VERSION_4_4", glClearTexImage },
   { "glClearTexSubImage", "GL_ARB_clear_texture GL_VERSION_4_4", glClearTexSubImage },
   { "glClientActiveTexture", "GL_VERSION_1_3", glClientActiveTexture },
@@ -14151,6 +15153,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glClientActiveVertexStreamATI", "GL_ATI_vertex_streams", glClientActiveVertexStreamATI },
   { "glClientAttribDefaultEXT", "GL_EXT_direct_state_access", glClientAttribDefaultEXT },
   { "glClientWaitSync", "GL_ARB_sync GL_VERSION_3_2", glClientWaitSync },
+  { "glClipControl", "GL_ARB_clip_control GL_VERSION_4_5", glClipControl },
   { "glClipPlanefOES", "GL_OES_single_precision", glClipPlanefOES },
   { "glClipPlanexOES", "GL_OES_fixed_point", glClipPlanexOES },
   { "glColor3fVertex3fSUN", "GL_SUN_vertex", glColor3fVertex3fSUN },
@@ -14222,8 +15225,11 @@ const OpenGL_extension extension_registry[2351] = {
   { "glCompressedTextureImage1DEXT", "GL_EXT_direct_state_access", glCompressedTextureImage1DEXT },
   { "glCompressedTextureImage2DEXT", "GL_EXT_direct_state_access", glCompressedTextureImage2DEXT },
   { "glCompressedTextureImage3DEXT", "GL_EXT_direct_state_access", glCompressedTextureImage3DEXT },
+  { "glCompressedTextureSubImage1D", "GL_ARB_direct_state_access GL_VERSION_4_5", glCompressedTextureSubImage1D },
   { "glCompressedTextureSubImage1DEXT", "GL_EXT_direct_state_access", glCompressedTextureSubImage1DEXT },
+  { "glCompressedTextureSubImage2D", "GL_ARB_direct_state_access GL_VERSION_4_5", glCompressedTextureSubImage2D },
   { "glCompressedTextureSubImage2DEXT", "GL_EXT_direct_state_access", glCompressedTextureSubImage2DEXT },
+  { "glCompressedTextureSubImage3D", "GL_ARB_direct_state_access GL_VERSION_4_5", glCompressedTextureSubImage3D },
   { "glCompressedTextureSubImage3DEXT", "GL_EXT_direct_state_access", glCompressedTextureSubImage3DEXT },
   { "glConvolutionFilter1D", "GL_ARB_imaging", glConvolutionFilter1D },
   { "glConvolutionFilter1DEXT", "GL_EXT_convolution", glConvolutionFilter1DEXT },
@@ -14255,6 +15261,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glCopyMultiTexSubImage1DEXT", "GL_EXT_direct_state_access", glCopyMultiTexSubImage1DEXT },
   { "glCopyMultiTexSubImage2DEXT", "GL_EXT_direct_state_access", glCopyMultiTexSubImage2DEXT },
   { "glCopyMultiTexSubImage3DEXT", "GL_EXT_direct_state_access", glCopyMultiTexSubImage3DEXT },
+  { "glCopyNamedBufferSubData", "GL_ARB_direct_state_access GL_VERSION_4_5", glCopyNamedBufferSubData },
   { "glCopyPathNV", "GL_NV_path_rendering", glCopyPathNV },
   { "glCopyTexImage1DEXT", "GL_EXT_copy_texture", glCopyTexImage1DEXT },
   { "glCopyTexImage2DEXT", "GL_EXT_copy_texture", glCopyTexImage2DEXT },
@@ -14264,20 +15271,35 @@ const OpenGL_extension extension_registry[2351] = {
   { "glCopyTexSubImage3DEXT", "GL_EXT_copy_texture", glCopyTexSubImage3DEXT },
   { "glCopyTextureImage1DEXT", "GL_EXT_direct_state_access", glCopyTextureImage1DEXT },
   { "glCopyTextureImage2DEXT", "GL_EXT_direct_state_access", glCopyTextureImage2DEXT },
+  { "glCopyTextureSubImage1D", "GL_ARB_direct_state_access GL_VERSION_4_5", glCopyTextureSubImage1D },
   { "glCopyTextureSubImage1DEXT", "GL_EXT_direct_state_access", glCopyTextureSubImage1DEXT },
+  { "glCopyTextureSubImage2D", "GL_ARB_direct_state_access GL_VERSION_4_5", glCopyTextureSubImage2D },
   { "glCopyTextureSubImage2DEXT", "GL_EXT_direct_state_access", glCopyTextureSubImage2DEXT },
+  { "glCopyTextureSubImage3D", "GL_ARB_direct_state_access GL_VERSION_4_5", glCopyTextureSubImage3D },
   { "glCopyTextureSubImage3DEXT", "GL_EXT_direct_state_access", glCopyTextureSubImage3DEXT },
   { "glCoverFillPathInstancedNV", "GL_NV_path_rendering", glCoverFillPathInstancedNV },
   { "glCoverFillPathNV", "GL_NV_path_rendering", glCoverFillPathNV },
   { "glCoverStrokePathInstancedNV", "GL_NV_path_rendering", glCoverStrokePathInstancedNV },
   { "glCoverStrokePathNV", "GL_NV_path_rendering", glCoverStrokePathNV },
+  { "glCoverageModulationNV", "GL_NV_framebuffer_mixed_samples", glCoverageModulationNV },
+  { "glCoverageModulationTableNV", "GL_NV_framebuffer_mixed_samples", glCoverageModulationTableNV },
+  { "glCreateBuffers", "GL_ARB_direct_state_access GL_VERSION_4_5", glCreateBuffers },
+  { "glCreateFramebuffers", "GL_ARB_direct_state_access GL_VERSION_4_5", glCreateFramebuffers },
+  { "glCreatePerfQueryINTEL", "GL_INTEL_performance_query", glCreatePerfQueryINTEL },
   { "glCreateProgram", "GL_VERSION_2_0", glCreateProgram },
   { "glCreateProgramObjectARB", "GL_ARB_shader_objects", glCreateProgramObjectARB },
+  { "glCreateProgramPipelines", "GL_ARB_direct_state_access GL_VERSION_4_5", glCreateProgramPipelines },
+  { "glCreateQueries", "GL_ARB_direct_state_access GL_VERSION_4_5", glCreateQueries },
+  { "glCreateRenderbuffers", "GL_ARB_direct_state_access GL_VERSION_4_5", glCreateRenderbuffers },
+  { "glCreateSamplers", "GL_ARB_direct_state_access GL_VERSION_4_5", glCreateSamplers },
   { "glCreateShader", "GL_VERSION_2_0", glCreateShader },
   { "glCreateShaderObjectARB", "GL_ARB_shader_objects", glCreateShaderObjectARB },
   { "glCreateShaderProgramEXT", "GL_EXT_separate_shader_objects", glCreateShaderProgramEXT },
   { "glCreateShaderProgramv", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glCreateShaderProgramv },
   { "glCreateSyncFromCLeventARB", "GL_ARB_cl_event", glCreateSyncFromCLeventARB },
+  { "glCreateTextures", "GL_ARB_direct_state_access GL_VERSION_4_5", glCreateTextures },
+  { "glCreateTransformFeedbacks", "GL_ARB_direct_state_access GL_VERSION_4_5", glCreateTransformFeedbacks },
+  { "glCreateVertexArrays", "GL_ARB_direct_state_access GL_VERSION_4_5", glCreateVertexArrays },
   { "glCullParameterdvEXT", "GL_EXT_cull_vertex", glCullParameterdvEXT },
   { "glCullParameterfvEXT", "GL_EXT_cull_vertex", glCullParameterfvEXT },
   { "glCurrentPaletteMatrixARB", "GL_ARB_matrix_palette", glCurrentPaletteMatrixARB },
@@ -14309,6 +15331,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glDeleteOcclusionQueriesNV", "GL_NV_occlusion_query", glDeleteOcclusionQueriesNV },
   { "glDeletePathsNV", "GL_NV_path_rendering", glDeletePathsNV },
   { "glDeletePerfMonitorsAMD", "GL_AMD_performance_monitor", glDeletePerfMonitorsAMD },
+  { "glDeletePerfQueryINTEL", "GL_INTEL_performance_query", glDeletePerfQueryINTEL },
   { "glDeleteProgram", "GL_VERSION_2_0", glDeleteProgram },
   { "glDeleteProgramPipelines", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glDeleteProgramPipelines },
   { "glDeleteProgramsARB", "GL_ARB_fragment_program GL_ARB_vertex_program", glDeleteProgramsARB },
@@ -14341,6 +15364,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glDisableClientStateiEXT", "GL_EXT_direct_state_access", glDisableClientStateiEXT },
   { "glDisableIndexedEXT", "GL_EXT_direct_state_access GL_EXT_draw_buffers2", glDisableIndexedEXT },
   { "glDisableVariantClientStateEXT", "GL_EXT_vertex_shader", glDisableVariantClientStateEXT },
+  { "glDisableVertexArrayAttrib", "GL_ARB_direct_state_access GL_VERSION_4_5", glDisableVertexArrayAttrib },
   { "glDisableVertexArrayAttribEXT", "GL_EXT_direct_state_access", glDisableVertexArrayAttribEXT },
   { "glDisableVertexArrayEXT", "GL_EXT_direct_state_access", glDisableVertexArrayEXT },
   { "glDisableVertexAttribAPPLE", "GL_APPLE_vertex_program_evaluators", glDisableVertexAttribAPPLE },
@@ -14391,6 +15415,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glEnableClientStateiEXT", "GL_EXT_direct_state_access", glEnableClientStateiEXT },
   { "glEnableIndexedEXT", "GL_EXT_direct_state_access GL_EXT_draw_buffers2", glEnableIndexedEXT },
   { "glEnableVariantClientStateEXT", "GL_EXT_vertex_shader", glEnableVariantClientStateEXT },
+  { "glEnableVertexArrayAttrib", "GL_ARB_direct_state_access GL_VERSION_4_5", glEnableVertexArrayAttrib },
   { "glEnableVertexArrayAttribEXT", "GL_EXT_direct_state_access", glEnableVertexArrayAttribEXT },
   { "glEnableVertexArrayEXT", "GL_EXT_direct_state_access", glEnableVertexArrayEXT },
   { "glEnableVertexAttribAPPLE", "GL_APPLE_vertex_program_evaluators", glEnableVertexAttribAPPLE },
@@ -14403,6 +15428,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glEndFragmentShaderATI", "GL_ATI_fragment_shader", glEndFragmentShaderATI },
   { "glEndOcclusionQueryNV", "GL_NV_occlusion_query", glEndOcclusionQueryNV },
   { "glEndPerfMonitorAMD", "GL_AMD_performance_monitor", glEndPerfMonitorAMD },
+  { "glEndPerfQueryINTEL", "GL_INTEL_performance_query", glEndPerfQueryINTEL },
   { "glEndQuery", "GL_VERSION_1_5", glEndQuery },
   { "glEndQueryARB", "GL_ARB_occlusion_query", glEndQueryARB },
   { "glEndQueryIndexed", "GL_ARB_transform_feedback3 GL_VERSION_4_0", glEndQueryIndexed },
@@ -14428,6 +15454,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glFinishTextureSUNX", "GL_SUNX_constant_data", glFinishTextureSUNX },
   { "glFlushMappedBufferRange", "GL_ARB_map_buffer_range GL_VERSION_3_0", glFlushMappedBufferRange },
   { "glFlushMappedBufferRangeAPPLE", "GL_APPLE_flush_buffer_range", glFlushMappedBufferRangeAPPLE },
+  { "glFlushMappedNamedBufferRange", "GL_ARB_direct_state_access GL_VERSION_4_5", glFlushMappedNamedBufferRange },
   { "glFlushMappedNamedBufferRangeEXT", "GL_EXT_direct_state_access", glFlushMappedNamedBufferRangeEXT },
   { "glFlushPixelDataRangeNV", "GL_NV_pixel_data_range", glFlushPixelDataRangeNV },
   { "glFlushRasterSGIX", "GL_SGIX_flush_raster", glFlushRasterSGIX },
@@ -14452,6 +15479,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glFogxOES", "GL_OES_fixed_point", glFogxOES },
   { "glFogxvOES", "GL_OES_fixed_point", glFogxvOES },
   { "glFragmentColorMaterialSGIX", "GL_SGIX_fragment_lighting", glFragmentColorMaterialSGIX },
+  { "glFragmentCoverageColorNV", "GL_NV_fragment_coverage_to_color", glFragmentCoverageColorNV },
   { "glFragmentLightModelfSGIX", "GL_SGIX_fragment_lighting", glFragmentLightModelfSGIX },
   { "glFragmentLightModelfvSGIX", "GL_SGIX_fragment_lighting", glFragmentLightModelfvSGIX },
   { "glFragmentLightModeliSGIX", "GL_SGIX_fragment_lighting", glFragmentLightModeliSGIX },
@@ -14472,6 +15500,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glFramebufferReadBufferEXT", "GL_EXT_direct_state_access", glFramebufferReadBufferEXT },
   { "glFramebufferRenderbuffer", "GL_ARB_framebuffer_object GL_VERSION_3_0", glFramebufferRenderbuffer },
   { "glFramebufferRenderbufferEXT", "GL_EXT_framebuffer_object", glFramebufferRenderbufferEXT },
+  { "glFramebufferSampleLocationsfvNV", "GL_NV_sample_locations", glFramebufferSampleLocationsfvNV },
   { "glFramebufferTexture", "GL_VERSION_3_2", glFramebufferTexture },
   { "glFramebufferTexture1D", "GL_ARB_framebuffer_object GL_VERSION_3_0", glFramebufferTexture1D },
   { "glFramebufferTexture1DEXT", "GL_EXT_framebuffer_object", glFramebufferTexture1DEXT },
@@ -14485,7 +15514,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glFramebufferTextureFaceEXT", "GL_NV_geometry_program4", glFramebufferTextureFaceEXT },
   { "glFramebufferTextureLayer", "GL_ARB_framebuffer_object GL_VERSION_3_0", glFramebufferTextureLayer },
   { "glFramebufferTextureLayerARB", "GL_ARB_geometry_shader4", glFramebufferTextureLayerARB },
-  { "glFramebufferTextureLayerEXT", "GL_NV_geometry_program4", glFramebufferTextureLayerEXT },
+  { "glFramebufferTextureLayerEXT", "GL_EXT_texture_array GL_NV_geometry_program4", glFramebufferTextureLayerEXT },
   { "glFreeObjectBufferATI", "GL_ATI_vertex_array_object", glFreeObjectBufferATI },
   { "glFrustumfOES", "GL_OES_single_precision", glFrustumfOES },
   { "glFrustumxOES", "GL_OES_fixed_point", glFrustumxOES },
@@ -14519,6 +15548,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glGenerateMipmap", "GL_ARB_framebuffer_object GL_VERSION_3_0", glGenerateMipmap },
   { "glGenerateMipmapEXT", "GL_EXT_framebuffer_object", glGenerateMipmapEXT },
   { "glGenerateMultiTexMipmapEXT", "GL_EXT_direct_state_access", glGenerateMultiTexMipmapEXT },
+  { "glGenerateTextureMipmap", "GL_ARB_direct_state_access GL_VERSION_4_5", glGenerateTextureMipmap },
   { "glGenerateTextureMipmapEXT", "GL_EXT_direct_state_access", glGenerateTextureMipmapEXT },
   { "glGetActiveAtomicCounterBufferiv", "GL_ARB_shader_atomic_counters GL_VERSION_4_2", glGetActiveAtomicCounterBufferiv },
   { "glGetActiveAttrib", "GL_VERSION_2_0", glGetActiveAttrib },
@@ -14568,7 +15598,9 @@ const OpenGL_extension extension_registry[2351] = {
   { "glGetCompressedMultiTexImageEXT", "GL_EXT_direct_state_access", glGetCompressedMultiTexImageEXT },
   { "glGetCompressedTexImage", "GL_VERSION_1_3", glGetCompressedTexImage },
   { "glGetCompressedTexImageARB", "GL_ARB_texture_compression", glGetCompressedTexImageARB },
+  { "glGetCompressedTextureImage", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetCompressedTextureImage },
   { "glGetCompressedTextureImageEXT", "GL_EXT_direct_state_access", glGetCompressedTextureImageEXT },
+  { "glGetCompressedTextureSubImage", "GL_ARB_get_texture_sub_image GL_VERSION_4_5", glGetCompressedTextureSubImage },
   { "glGetConvolutionFilter", "GL_ARB_imaging", glGetConvolutionFilter },
   { "glGetConvolutionFilterEXT", "GL_EXT_convolution", glGetConvolutionFilterEXT },
   { "glGetConvolutionParameterfv", "GL_ARB_imaging", glGetConvolutionParameterfv },
@@ -14576,6 +15608,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glGetConvolutionParameteriv", "GL_ARB_imaging", glGetConvolutionParameteriv },
   { "glGetConvolutionParameterivEXT", "GL_EXT_convolution", glGetConvolutionParameterivEXT },
   { "glGetConvolutionParameterxvOES", "GL_OES_fixed_point", glGetConvolutionParameterxvOES },
+  { "glGetCoverageModulationTableNV", "GL_NV_framebuffer_mixed_samples", glGetCoverageModulationTableNV },
   { "glGetDebugMessageLog", "GL_KHR_debug GL_VERSION_4_3", glGetDebugMessageLog },
   { "glGetDebugMessageLogAMD", "GL_AMD_debug_output", glGetDebugMessageLogAMD },
   { "glGetDebugMessageLogARB", "GL_ARB_debug_output", glGetDebugMessageLogARB },
@@ -14586,6 +15619,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glGetFenceivNV", "GL_NV_fence", glGetFenceivNV },
   { "glGetFinalCombinerInputParameterfvNV", "GL_NV_register_combiners", glGetFinalCombinerInputParameterfvNV },
   { "glGetFinalCombinerInputParameterivNV", "GL_NV_register_combiners", glGetFinalCombinerInputParameterivNV },
+  { "glGetFirstPerfQueryIdINTEL", "GL_INTEL_performance_query", glGetFirstPerfQueryIdINTEL },
   { "glGetFixedvOES", "GL_OES_fixed_point", glGetFixedvOES },
   { "glGetFloatIndexedvEXT", "GL_EXT_direct_state_access", glGetFloatIndexedvEXT },
   { "glGetFloati_v", "GL_ARB_viewport_array GL_VERSION_4_1", glGetFloati_v },
@@ -14602,6 +15636,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glGetFramebufferAttachmentParameterivEXT", "GL_EXT_framebuffer_object", glGetFramebufferAttachmentParameterivEXT },
   { "glGetFramebufferParameteriv", "GL_ARB_framebuffer_no_attachments GL_VERSION_4_3", glGetFramebufferParameteriv },
   { "glGetFramebufferParameterivEXT", "GL_EXT_direct_state_access", glGetFramebufferParameterivEXT },
+  { "glGetGraphicsResetStatus", "GL_KHR_robustness GL_VERSION_4_5", glGetGraphicsResetStatus },
   { "glGetGraphicsResetStatusARB", "GL_ARB_robustness", glGetGraphicsResetStatusARB },
   { "glGetHandleARB", "GL_ARB_shader_objects", glGetHandleARB },
   { "glGetHistogram", "GL_ARB_imaging", glGetHistogram },
@@ -14623,6 +15658,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glGetIntegeri_v", "GL_VERSION_3_0", glGetIntegeri_v },
   { "glGetIntegerui64i_vNV", "GL_NV_vertex_buffer_unified_memory", glGetIntegerui64i_vNV },
   { "glGetIntegerui64vNV", "GL_NV_shader_buffer_load", glGetIntegerui64vNV },
+  { "glGetInternalformatSampleivNV", "GL_NV_internalformat_sample_query", glGetInternalformatSampleivNV },
   { "glGetInternalformati64v", "GL_ARB_internalformat_query2 GL_VERSION_4_3", glGetInternalformati64v },
   { "glGetInternalformativ", "GL_ARB_internalformat_query GL_VERSION_4_2", glGetInternalformativ },
   { "glGetInvariantBooleanvEXT", "GL_EXT_vertex_shader", glGetInvariantBooleanvEXT },
@@ -14661,11 +15697,17 @@ const OpenGL_extension extension_registry[2351] = {
   { "glGetMultiTexParameterivEXT", "GL_EXT_direct_state_access", glGetMultiTexParameterivEXT },
   { "glGetMultisamplefv", "GL_ARB_texture_multisample GL_VERSION_3_2", glGetMultisamplefv },
   { "glGetMultisamplefvNV", "GL_NV_explicit_multisample", glGetMultisamplefvNV },
+  { "glGetNamedBufferParameteri64v", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetNamedBufferParameteri64v },
+  { "glGetNamedBufferParameteriv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetNamedBufferParameteriv },
   { "glGetNamedBufferParameterivEXT", "GL_EXT_direct_state_access", glGetNamedBufferParameterivEXT },
   { "glGetNamedBufferParameterui64vNV", "GL_NV_shader_buffer_load", glGetNamedBufferParameterui64vNV },
+  { "glGetNamedBufferPointerv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetNamedBufferPointerv },
   { "glGetNamedBufferPointervEXT", "GL_EXT_direct_state_access", glGetNamedBufferPointervEXT },
+  { "glGetNamedBufferSubData", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetNamedBufferSubData },
   { "glGetNamedBufferSubDataEXT", "GL_EXT_direct_state_access", glGetNamedBufferSubDataEXT },
+  { "glGetNamedFramebufferAttachmentParameteriv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetNamedFramebufferAttachmentParameteriv },
   { "glGetNamedFramebufferAttachmentParameterivEXT", "GL_EXT_direct_state_access", glGetNamedFramebufferAttachmentParameterivEXT },
+  { "glGetNamedFramebufferParameteriv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetNamedFramebufferParameteriv },
   { "glGetNamedFramebufferParameterivEXT", "GL_EXT_direct_state_access", glGetNamedFramebufferParameterivEXT },
   { "glGetNamedProgramLocalParameterIivEXT", "GL_EXT_direct_state_access", glGetNamedProgramLocalParameterIivEXT },
   { "glGetNamedProgramLocalParameterIuivEXT", "GL_EXT_direct_state_access", glGetNamedProgramLocalParameterIuivEXT },
@@ -14673,9 +15715,11 @@ const OpenGL_extension extension_registry[2351] = {
   { "glGetNamedProgramLocalParameterfvEXT", "GL_EXT_direct_state_access", glGetNamedProgramLocalParameterfvEXT },
   { "glGetNamedProgramStringEXT", "GL_EXT_direct_state_access", glGetNamedProgramStringEXT },
   { "glGetNamedProgramivEXT", "GL_EXT_direct_state_access", glGetNamedProgramivEXT },
+  { "glGetNamedRenderbufferParameteriv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetNamedRenderbufferParameteriv },
   { "glGetNamedRenderbufferParameterivEXT", "GL_EXT_direct_state_access", glGetNamedRenderbufferParameterivEXT },
   { "glGetNamedStringARB", "GL_ARB_shading_language_include", glGetNamedStringARB },
   { "glGetNamedStringivARB", "GL_ARB_shading_language_include", glGetNamedStringivARB },
+  { "glGetNextPerfQueryIdINTEL", "GL_INTEL_performance_query", glGetNextPerfQueryIdINTEL },
   { "glGetObjectBufferfvATI", "GL_ATI_vertex_array_object", glGetObjectBufferfvATI },
   { "glGetObjectBufferivATI", "GL_ATI_vertex_array_object", glGetObjectBufferivATI },
   { "glGetObjectLabel", "GL_KHR_debug GL_VERSION_4_3", glGetObjectLabel },
@@ -14699,12 +15743,16 @@ const OpenGL_extension extension_registry[2351] = {
   { "glGetPathSpacingNV", "GL_NV_path_rendering", glGetPathSpacingNV },
   { "glGetPathTexGenfvNV", "GL_NV_path_rendering", glGetPathTexGenfvNV },
   { "glGetPathTexGenivNV", "GL_NV_path_rendering", glGetPathTexGenivNV },
+  { "glGetPerfCounterInfoINTEL", "GL_INTEL_performance_query", glGetPerfCounterInfoINTEL },
   { "glGetPerfMonitorCounterDataAMD", "GL_AMD_performance_monitor", glGetPerfMonitorCounterDataAMD },
   { "glGetPerfMonitorCounterInfoAMD", "GL_AMD_performance_monitor", glGetPerfMonitorCounterInfoAMD },
   { "glGetPerfMonitorCounterStringAMD", "GL_AMD_performance_monitor", glGetPerfMonitorCounterStringAMD },
   { "glGetPerfMonitorCountersAMD", "GL_AMD_performance_monitor", glGetPerfMonitorCountersAMD },
   { "glGetPerfMonitorGroupStringAMD", "GL_AMD_performance_monitor", glGetPerfMonitorGroupStringAMD },
   { "glGetPerfMonitorGroupsAMD", "GL_AMD_performance_monitor", glGetPerfMonitorGroupsAMD },
+  { "glGetPerfQueryDataINTEL", "GL_INTEL_performance_query", glGetPerfQueryDataINTEL },
+  { "glGetPerfQueryIdByNameINTEL", "GL_INTEL_performance_query", glGetPerfQueryIdByNameINTEL },
+  { "glGetPerfQueryInfoINTEL", "GL_INTEL_performance_query", glGetPerfQueryInfoINTEL },
   { "glGetPixelMapxv", "GL_OES_fixed_point", glGetPixelMapxv },
   { "glGetPixelTexGenParameterfvSGIS", "GL_SGIS_pixel_texture", glGetPixelTexGenParameterfvSGIS },
   { "glGetPixelTexGenParameterivSGIS", "GL_SGIS_pixel_texture", glGetPixelTexGenParameterivSGIS },
@@ -14734,6 +15782,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glGetProgramResourceLocation", "GL_ARB_program_interface_query GL_VERSION_4_3", glGetProgramResourceLocation },
   { "glGetProgramResourceLocationIndex", "GL_ARB_program_interface_query GL_VERSION_4_3", glGetProgramResourceLocationIndex },
   { "glGetProgramResourceName", "GL_ARB_program_interface_query GL_VERSION_4_3", glGetProgramResourceName },
+  { "glGetProgramResourcefvNV", "GL_NV_path_rendering", glGetProgramResourcefvNV },
   { "glGetProgramResourceiv", "GL_ARB_program_interface_query GL_VERSION_4_3", glGetProgramResourceiv },
   { "glGetProgramStageiv", "GL_ARB_shader_subroutine GL_VERSION_4_0", glGetProgramStageiv },
   { "glGetProgramStringARB", "GL_ARB_fragment_program GL_ARB_vertex_program", glGetProgramStringARB },
@@ -14742,6 +15791,10 @@ const OpenGL_extension extension_registry[2351] = {
   { "glGetProgramiv", "GL_VERSION_2_0", glGetProgramiv },
   { "glGetProgramivARB", "GL_ARB_fragment_program GL_ARB_vertex_program", glGetProgramivARB },
   { "glGetProgramivNV", "GL_NV_vertex_program", glGetProgramivNV },
+  { "glGetQueryBufferObjecti64v", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetQueryBufferObjecti64v },
+  { "glGetQueryBufferObjectiv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetQueryBufferObjectiv },
+  { "glGetQueryBufferObjectui64v", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetQueryBufferObjectui64v },
+  { "glGetQueryBufferObjectuiv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetQueryBufferObjectuiv },
   { "glGetQueryIndexediv", "GL_ARB_transform_feedback3 GL_VERSION_4_0", glGetQueryIndexediv },
   { "glGetQueryObjecti64v", "GL_ARB_timer_query GL_VERSION_3_3", glGetQueryObjecti64v },
   { "glGetQueryObjecti64vEXT", "GL_EXT_timer_query", glGetQueryObjecti64vEXT },
@@ -14785,19 +15838,30 @@ const OpenGL_extension extension_registry[2351] = {
   { "glGetTexParameterxvOES", "GL_OES_fixed_point", glGetTexParameterxvOES },
   { "glGetTextureHandleARB", "GL_ARB_bindless_texture", glGetTextureHandleARB },
   { "glGetTextureHandleNV", "GL_NV_bindless_texture", glGetTextureHandleNV },
+  { "glGetTextureImage", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetTextureImage },
   { "glGetTextureImageEXT", "GL_EXT_direct_state_access", glGetTextureImageEXT },
+  { "glGetTextureLevelParameterfv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetTextureLevelParameterfv },
   { "glGetTextureLevelParameterfvEXT", "GL_EXT_direct_state_access", glGetTextureLevelParameterfvEXT },
+  { "glGetTextureLevelParameteriv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetTextureLevelParameteriv },
   { "glGetTextureLevelParameterivEXT", "GL_EXT_direct_state_access", glGetTextureLevelParameterivEXT },
+  { "glGetTextureParameterIiv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetTextureParameterIiv },
   { "glGetTextureParameterIivEXT", "GL_EXT_direct_state_access", glGetTextureParameterIivEXT },
+  { "glGetTextureParameterIuiv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetTextureParameterIuiv },
   { "glGetTextureParameterIuivEXT", "GL_EXT_direct_state_access", glGetTextureParameterIuivEXT },
+  { "glGetTextureParameterfv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetTextureParameterfv },
   { "glGetTextureParameterfvEXT", "GL_EXT_direct_state_access", glGetTextureParameterfvEXT },
+  { "glGetTextureParameteriv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetTextureParameteriv },
   { "glGetTextureParameterivEXT", "GL_EXT_direct_state_access", glGetTextureParameterivEXT },
   { "glGetTextureSamplerHandleARB", "GL_ARB_bindless_texture", glGetTextureSamplerHandleARB },
   { "glGetTextureSamplerHandleNV", "GL_NV_bindless_texture", glGetTextureSamplerHandleNV },
+  { "glGetTextureSubImage", "GL_ARB_get_texture_sub_image GL_VERSION_4_5", glGetTextureSubImage },
   { "glGetTrackMatrixivNV", "GL_NV_vertex_program", glGetTrackMatrixivNV },
   { "glGetTransformFeedbackVarying", "GL_VERSION_3_0", glGetTransformFeedbackVarying },
   { "glGetTransformFeedbackVaryingEXT", "GL_EXT_transform_feedback", glGetTransformFeedbackVaryingEXT },
   { "glGetTransformFeedbackVaryingNV", "GL_NV_transform_feedback", glGetTransformFeedbackVaryingNV },
+  { "glGetTransformFeedbacki64_v", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetTransformFeedbacki64_v },
+  { "glGetTransformFeedbacki_v", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetTransformFeedbacki_v },
+  { "glGetTransformFeedbackiv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetTransformFeedbackiv },
   { "glGetUniformBlockIndex", "GL_ARB_uniform_buffer_object GL_VERSION_3_1", glGetUniformBlockIndex },
   { "glGetUniformBufferSizeEXT", "GL_EXT_bindable_uniform", glGetUniformBufferSizeEXT },
   { "glGetUniformIndices", "GL_ARB_uniform_buffer_object GL_VERSION_3_1", glGetUniformIndices },
@@ -14808,10 +15872,10 @@ const OpenGL_extension extension_registry[2351] = {
   { "glGetUniformdv", "GL_ARB_gpu_shader_fp64 GL_VERSION_4_0", glGetUniformdv },
   { "glGetUniformfv", "GL_VERSION_2_0", glGetUniformfv },
   { "glGetUniformfvARB", "GL_ARB_shader_objects", glGetUniformfvARB },
-  { "glGetUniformi64vNV", "GL_NV_gpu_shader5", glGetUniformi64vNV },
+  { "glGetUniformi64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glGetUniformi64vNV },
   { "glGetUniformiv", "GL_VERSION_2_0", glGetUniformiv },
   { "glGetUniformivARB", "GL_ARB_shader_objects", glGetUniformivARB },
-  { "glGetUniformui64vNV", "GL_NV_shader_buffer_load", glGetUniformui64vNV },
+  { "glGetUniformui64vNV", "GL_AMD_gpu_shader_int64 GL_NV_shader_buffer_load", glGetUniformui64vNV },
   { "glGetUniformuiv", "GL_VERSION_3_0", glGetUniformuiv },
   { "glGetUniformuivEXT", "GL_EXT_gpu_shader4", glGetUniformuivEXT },
   { "glGetVariantArrayObjectfvATI", "GL_ATI_vertex_array_object", glGetVariantArrayObjectfvATI },
@@ -14821,10 +15885,13 @@ const OpenGL_extension extension_registry[2351] = {
   { "glGetVariantIntegervEXT", "GL_EXT_vertex_shader", glGetVariantIntegervEXT },
   { "glGetVariantPointervEXT", "GL_EXT_vertex_shader", glGetVariantPointervEXT },
   { "glGetVaryingLocationNV", "GL_NV_transform_feedback", glGetVaryingLocationNV },
+  { "glGetVertexArrayIndexed64iv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetVertexArrayIndexed64iv },
+  { "glGetVertexArrayIndexediv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetVertexArrayIndexediv },
   { "glGetVertexArrayIntegeri_vEXT", "GL_EXT_direct_state_access", glGetVertexArrayIntegeri_vEXT },
   { "glGetVertexArrayIntegervEXT", "GL_EXT_direct_state_access", glGetVertexArrayIntegervEXT },
   { "glGetVertexArrayPointeri_vEXT", "GL_EXT_direct_state_access", glGetVertexArrayPointeri_vEXT },
   { "glGetVertexArrayPointervEXT", "GL_EXT_direct_state_access", glGetVertexArrayPointervEXT },
+  { "glGetVertexArrayiv", "GL_ARB_direct_state_access GL_VERSION_4_5", glGetVertexArrayiv },
   { "glGetVertexAttribArrayObjectfvATI", "GL_ATI_vertex_attrib_array_object", glGetVertexAttribArrayObjectfvATI },
   { "glGetVertexAttribArrayObjectivATI", "GL_ATI_vertex_attrib_array_object", glGetVertexAttribArrayObjectivATI },
   { "glGetVertexAttribIiv", "GL_VERSION_3_0", glGetVertexAttribIiv },
@@ -14856,23 +15923,41 @@ const OpenGL_extension extension_registry[2351] = {
   { "glGetVideoivNV", "GL_NV_present_video", glGetVideoivNV },
   { "glGetVideoui64vNV", "GL_NV_present_video", glGetVideoui64vNV },
   { "glGetVideouivNV", "GL_NV_present_video", glGetVideouivNV },
+  { "glGetnColorTable", "GL_VERSION_4_5", glGetnColorTable },
   { "glGetnColorTableARB", "GL_ARB_robustness", glGetnColorTableARB },
+  { "glGetnCompressedTexImage", "GL_VERSION_4_5", glGetnCompressedTexImage },
   { "glGetnCompressedTexImageARB", "GL_ARB_robustness", glGetnCompressedTexImageARB },
+  { "glGetnConvolutionFilter", "GL_VERSION_4_5", glGetnConvolutionFilter },
   { "glGetnConvolutionFilterARB", "GL_ARB_robustness", glGetnConvolutionFilterARB },
+  { "glGetnHistogram", "GL_VERSION_4_5", glGetnHistogram },
   { "glGetnHistogramARB", "GL_ARB_robustness", glGetnHistogramARB },
+  { "glGetnMapdv", "GL_VERSION_4_5", glGetnMapdv },
   { "glGetnMapdvARB", "GL_ARB_robustness", glGetnMapdvARB },
+  { "glGetnMapfv", "GL_VERSION_4_5", glGetnMapfv },
   { "glGetnMapfvARB", "GL_ARB_robustness", glGetnMapfvARB },
+  { "glGetnMapiv", "GL_VERSION_4_5", glGetnMapiv },
   { "glGetnMapivARB", "GL_ARB_robustness", glGetnMapivARB },
+  { "glGetnMinmax", "GL_VERSION_4_5", glGetnMinmax },
   { "glGetnMinmaxARB", "GL_ARB_robustness", glGetnMinmaxARB },
+  { "glGetnPixelMapfv", "GL_VERSION_4_5", glGetnPixelMapfv },
   { "glGetnPixelMapfvARB", "GL_ARB_robustness", glGetnPixelMapfvARB },
+  { "glGetnPixelMapuiv", "GL_VERSION_4_5", glGetnPixelMapuiv },
   { "glGetnPixelMapuivARB", "GL_ARB_robustness", glGetnPixelMapuivARB },
+  { "glGetnPixelMapusv", "GL_VERSION_4_5", glGetnPixelMapusv },
   { "glGetnPixelMapusvARB", "GL_ARB_robustness", glGetnPixelMapusvARB },
+  { "glGetnPolygonStipple", "GL_VERSION_4_5", glGetnPolygonStipple },
   { "glGetnPolygonStippleARB", "GL_ARB_robustness", glGetnPolygonStippleARB },
+  { "glGetnSeparableFilter", "GL_VERSION_4_5", glGetnSeparableFilter },
   { "glGetnSeparableFilterARB", "GL_ARB_robustness", glGetnSeparableFilterARB },
+  { "glGetnTexImage", "GL_VERSION_4_5", glGetnTexImage },
   { "glGetnTexImageARB", "GL_ARB_robustness", glGetnTexImageARB },
+  { "glGetnUniformdv", "GL_VERSION_4_5", glGetnUniformdv },
   { "glGetnUniformdvARB", "GL_ARB_robustness", glGetnUniformdvARB },
+  { "glGetnUniformfv", "GL_KHR_robustness GL_VERSION_4_5", glGetnUniformfv },
   { "glGetnUniformfvARB", "GL_ARB_robustness", glGetnUniformfvARB },
+  { "glGetnUniformiv", "GL_KHR_robustness GL_VERSION_4_5", glGetnUniformiv },
   { "glGetnUniformivARB", "GL_ARB_robustness", glGetnUniformivARB },
+  { "glGetnUniformuiv", "GL_KHR_robustness GL_VERSION_4_5", glGetnUniformuiv },
   { "glGetnUniformuivARB", "GL_ARB_robustness", glGetnUniformuivARB },
   { "glGlobalAlphaFactorbSUN", "GL_SUN_global_alpha", glGlobalAlphaFactorbSUN },
   { "glGlobalAlphaFactordSUN", "GL_SUN_global_alpha", glGlobalAlphaFactordSUN },
@@ -14905,6 +15990,8 @@ const OpenGL_extension extension_registry[2351] = {
   { "glInvalidateBufferData", "GL_ARB_invalidate_subdata GL_VERSION_4_3", glInvalidateBufferData },
   { "glInvalidateBufferSubData", "GL_ARB_invalidate_subdata GL_VERSION_4_3", glInvalidateBufferSubData },
   { "glInvalidateFramebuffer", "GL_ARB_invalidate_subdata GL_VERSION_4_3", glInvalidateFramebuffer },
+  { "glInvalidateNamedFramebufferData", "GL_ARB_direct_state_access GL_VERSION_4_5", glInvalidateNamedFramebufferData },
+  { "glInvalidateNamedFramebufferSubData", "GL_ARB_direct_state_access GL_VERSION_4_5", glInvalidateNamedFramebufferSubData },
   { "glInvalidateSubFramebuffer", "GL_ARB_invalidate_subdata GL_VERSION_4_3", glInvalidateSubFramebuffer },
   { "glInvalidateTexImage", "GL_ARB_invalidate_subdata GL_VERSION_4_3", glInvalidateTexImage },
   { "glInvalidateTexSubImage", "GL_ARB_invalidate_subdata GL_VERSION_4_3", glInvalidateTexSubImage },
@@ -14992,7 +16079,9 @@ const OpenGL_extension extension_registry[2351] = {
   { "glMapControlPointsNV", "GL_NV_evaluators", glMapControlPointsNV },
   { "glMapGrid1xOES", "GL_OES_fixed_point", glMapGrid1xOES },
   { "glMapGrid2xOES", "GL_OES_fixed_point", glMapGrid2xOES },
+  { "glMapNamedBuffer", "GL_ARB_direct_state_access GL_VERSION_4_5", glMapNamedBuffer },
   { "glMapNamedBufferEXT", "GL_EXT_direct_state_access", glMapNamedBufferEXT },
+  { "glMapNamedBufferRange", "GL_ARB_direct_state_access GL_VERSION_4_5", glMapNamedBufferRange },
   { "glMapNamedBufferRangeEXT", "GL_EXT_direct_state_access", glMapNamedBufferRangeEXT },
   { "glMapObjectBufferATI", "GL_ATI_map_object_buffer", glMapObjectBufferATI },
   { "glMapParameterfvNV", "GL_NV_evaluators", glMapParameterfvNV },
@@ -15009,11 +16098,17 @@ const OpenGL_extension extension_registry[2351] = {
   { "glMatrixIndexubvARB", "GL_ARB_matrix_palette", glMatrixIndexubvARB },
   { "glMatrixIndexuivARB", "GL_ARB_matrix_palette", glMatrixIndexuivARB },
   { "glMatrixIndexusvARB", "GL_ARB_matrix_palette", glMatrixIndexusvARB },
+  { "glMatrixLoad3x2fNV", "GL_NV_path_rendering", glMatrixLoad3x2fNV },
+  { "glMatrixLoad3x3fNV", "GL_NV_path_rendering", glMatrixLoad3x3fNV },
   { "glMatrixLoadIdentityEXT", "GL_EXT_direct_state_access", glMatrixLoadIdentityEXT },
+  { "glMatrixLoadTranspose3x3fNV", "GL_NV_path_rendering", glMatrixLoadTranspose3x3fNV },
   { "glMatrixLoadTransposedEXT", "GL_EXT_direct_state_access", glMatrixLoadTransposedEXT },
   { "glMatrixLoadTransposefEXT", "GL_EXT_direct_state_access", glMatrixLoadTransposefEXT },
   { "glMatrixLoaddEXT", "GL_EXT_direct_state_access", glMatrixLoaddEXT },
   { "glMatrixLoadfEXT", "GL_EXT_direct_state_access", glMatrixLoadfEXT },
+  { "glMatrixMult3x2fNV", "GL_NV_path_rendering", glMatrixMult3x2fNV },
+  { "glMatrixMult3x3fNV", "GL_NV_path_rendering", glMatrixMult3x3fNV },
+  { "glMatrixMultTranspose3x3fNV", "GL_NV_path_rendering", glMatrixMultTranspose3x3fNV },
   { "glMatrixMultTransposedEXT", "GL_EXT_direct_state_access", glMatrixMultTransposedEXT },
   { "glMatrixMultTransposefEXT", "GL_EXT_direct_state_access", glMatrixMultTransposefEXT },
   { "glMatrixMultdEXT", "GL_EXT_direct_state_access", glMatrixMultdEXT },
@@ -15028,6 +16123,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glMatrixTranslatedEXT", "GL_EXT_direct_state_access", glMatrixTranslatedEXT },
   { "glMatrixTranslatefEXT", "GL_EXT_direct_state_access", glMatrixTranslatefEXT },
   { "glMemoryBarrier", "GL_ARB_shader_image_load_store GL_VERSION_4_2", glMemoryBarrier },
+  { "glMemoryBarrierByRegion", "GL_ARB_ES3_1_compatibility GL_VERSION_4_5", glMemoryBarrierByRegion },
   { "glMemoryBarrierEXT", "GL_EXT_shader_image_load_store", glMemoryBarrierEXT },
   { "glMinSampleShading", "GL_VERSION_4_0", glMinSampleShading },
   { "glMinSampleShadingARB", "GL_ARB_sample_shading", glMinSampleShadingARB },
@@ -15043,6 +16139,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glMultiDrawArraysEXT", "GL_EXT_multi_draw_arrays", glMultiDrawArraysEXT },
   { "glMultiDrawArraysIndirect", "GL_ARB_multi_draw_indirect GL_VERSION_4_3", glMultiDrawArraysIndirect },
   { "glMultiDrawArraysIndirectAMD", "GL_AMD_multi_draw_indirect", glMultiDrawArraysIndirectAMD },
+  { "glMultiDrawArraysIndirectBindlessCountNV", "GL_NV_bindless_multi_draw_indirect_count", glMultiDrawArraysIndirectBindlessCountNV },
   { "glMultiDrawArraysIndirectBindlessNV", "GL_NV_bindless_multi_draw_indirect", glMultiDrawArraysIndirectBindlessNV },
   { "glMultiDrawArraysIndirectCountARB", "GL_ARB_indirect_parameters", glMultiDrawArraysIndirectCountARB },
   { "glMultiDrawElementArrayAPPLE", "GL_APPLE_element_array", glMultiDrawElementArrayAPPLE },
@@ -15051,6 +16148,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glMultiDrawElementsEXT", "GL_EXT_multi_draw_arrays", glMultiDrawElementsEXT },
   { "glMultiDrawElementsIndirect", "GL_ARB_multi_draw_indirect GL_VERSION_4_3", glMultiDrawElementsIndirect },
   { "glMultiDrawElementsIndirectAMD", "GL_AMD_multi_draw_indirect", glMultiDrawElementsIndirectAMD },
+  { "glMultiDrawElementsIndirectBindlessCountNV", "GL_NV_bindless_multi_draw_indirect_count", glMultiDrawElementsIndirectBindlessCountNV },
   { "glMultiDrawElementsIndirectBindlessNV", "GL_NV_bindless_multi_draw_indirect", glMultiDrawElementsIndirectBindlessNV },
   { "glMultiDrawElementsIndirectCountARB", "GL_ARB_indirect_parameters", glMultiDrawElementsIndirectCountARB },
   { "glMultiDrawRangeElementArrayAPPLE", "GL_APPLE_element_array", glMultiDrawRangeElementArrayAPPLE },
@@ -15210,17 +16308,30 @@ const OpenGL_extension extension_registry[2351] = {
   { "glMultiTexSubImage1DEXT", "GL_EXT_direct_state_access", glMultiTexSubImage1DEXT },
   { "glMultiTexSubImage2DEXT", "GL_EXT_direct_state_access", glMultiTexSubImage2DEXT },
   { "glMultiTexSubImage3DEXT", "GL_EXT_direct_state_access", glMultiTexSubImage3DEXT },
+  { "glNamedBufferData", "GL_ARB_direct_state_access GL_VERSION_4_5", glNamedBufferData },
   { "glNamedBufferDataEXT", "GL_EXT_direct_state_access", glNamedBufferDataEXT },
+  { "glNamedBufferPageCommitmentARB", "GL_ARB_sparse_buffer", glNamedBufferPageCommitmentARB },
+  { "glNamedBufferPageCommitmentEXT", "GL_ARB_sparse_buffer", glNamedBufferPageCommitmentEXT },
+  { "glNamedBufferStorage", "GL_ARB_direct_state_access GL_VERSION_4_5", glNamedBufferStorage },
   { "glNamedBufferStorageEXT", "GL_EXT_direct_state_access", glNamedBufferStorageEXT },
+  { "glNamedBufferSubData", "GL_ARB_direct_state_access GL_VERSION_4_5", glNamedBufferSubData },
   { "glNamedBufferSubDataEXT", "GL_EXT_direct_state_access", glNamedBufferSubDataEXT },
   { "glNamedCopyBufferSubDataEXT", "GL_EXT_direct_state_access", glNamedCopyBufferSubDataEXT },
+  { "glNamedFramebufferDrawBuffer", "GL_ARB_direct_state_access GL_VERSION_4_5", glNamedFramebufferDrawBuffer },
+  { "glNamedFramebufferDrawBuffers", "GL_ARB_direct_state_access GL_VERSION_4_5", glNamedFramebufferDrawBuffers },
+  { "glNamedFramebufferParameteri", "GL_ARB_direct_state_access GL_VERSION_4_5", glNamedFramebufferParameteri },
   { "glNamedFramebufferParameteriEXT", "GL_EXT_direct_state_access", glNamedFramebufferParameteriEXT },
+  { "glNamedFramebufferReadBuffer", "GL_ARB_direct_state_access GL_VERSION_4_5", glNamedFramebufferReadBuffer },
+  { "glNamedFramebufferRenderbuffer", "GL_ARB_direct_state_access GL_VERSION_4_5", glNamedFramebufferRenderbuffer },
   { "glNamedFramebufferRenderbufferEXT", "GL_EXT_direct_state_access", glNamedFramebufferRenderbufferEXT },
+  { "glNamedFramebufferSampleLocationsfvNV", "GL_NV_sample_locations", glNamedFramebufferSampleLocationsfvNV },
+  { "glNamedFramebufferTexture", "GL_ARB_direct_state_access GL_VERSION_4_5", glNamedFramebufferTexture },
   { "glNamedFramebufferTexture1DEXT", "GL_EXT_direct_state_access", glNamedFramebufferTexture1DEXT },
   { "glNamedFramebufferTexture2DEXT", "GL_EXT_direct_state_access", glNamedFramebufferTexture2DEXT },
   { "glNamedFramebufferTexture3DEXT", "GL_EXT_direct_state_access", glNamedFramebufferTexture3DEXT },
   { "glNamedFramebufferTextureEXT", "GL_EXT_direct_state_access", glNamedFramebufferTextureEXT },
   { "glNamedFramebufferTextureFaceEXT", "GL_EXT_direct_state_access", glNamedFramebufferTextureFaceEXT },
+  { "glNamedFramebufferTextureLayer", "GL_ARB_direct_state_access GL_VERSION_4_5", glNamedFramebufferTextureLayer },
   { "glNamedFramebufferTextureLayerEXT", "GL_EXT_direct_state_access", glNamedFramebufferTextureLayerEXT },
   { "glNamedProgramLocalParameter4dEXT", "GL_EXT_direct_state_access", glNamedProgramLocalParameter4dEXT },
   { "glNamedProgramLocalParameter4dvEXT", "GL_EXT_direct_state_access", glNamedProgramLocalParameter4dvEXT },
@@ -15234,7 +16345,9 @@ const OpenGL_extension extension_registry[2351] = {
   { "glNamedProgramLocalParametersI4ivEXT", "GL_EXT_direct_state_access", glNamedProgramLocalParametersI4ivEXT },
   { "glNamedProgramLocalParametersI4uivEXT", "GL_EXT_direct_state_access", glNamedProgramLocalParametersI4uivEXT },
   { "glNamedProgramStringEXT", "GL_EXT_direct_state_access", glNamedProgramStringEXT },
+  { "glNamedRenderbufferStorage", "GL_ARB_direct_state_access GL_VERSION_4_5", glNamedRenderbufferStorage },
   { "glNamedRenderbufferStorageEXT", "GL_EXT_direct_state_access", glNamedRenderbufferStorageEXT },
+  { "glNamedRenderbufferStorageMultisample", "GL_ARB_direct_state_access GL_VERSION_4_5", glNamedRenderbufferStorageMultisample },
   { "glNamedRenderbufferStorageMultisampleCoverageEXT", "GL_EXT_direct_state_access", glNamedRenderbufferStorageMultisampleCoverageEXT },
   { "glNamedRenderbufferStorageMultisampleEXT", "GL_EXT_direct_state_access", glNamedRenderbufferStorageMultisampleEXT },
   { "glNamedStringARB", "GL_ARB_shading_language_include", glNamedStringARB },
@@ -15280,8 +16393,11 @@ const OpenGL_extension extension_registry[2351] = {
   { "glPathCoverDepthFuncNV", "GL_NV_path_rendering", glPathCoverDepthFuncNV },
   { "glPathDashArrayNV", "GL_NV_path_rendering", glPathDashArrayNV },
   { "glPathFogGenNV", "GL_NV_path_rendering", glPathFogGenNV },
+  { "glPathGlyphIndexArrayNV", "GL_NV_path_rendering", glPathGlyphIndexArrayNV },
+  { "glPathGlyphIndexRangeNV", "GL_NV_path_rendering", glPathGlyphIndexRangeNV },
   { "glPathGlyphRangeNV", "GL_NV_path_rendering", glPathGlyphRangeNV },
   { "glPathGlyphsNV", "GL_NV_path_rendering", glPathGlyphsNV },
+  { "glPathMemoryGlyphIndexArrayNV", "GL_NV_path_rendering", glPathMemoryGlyphIndexArrayNV },
   { "glPathParameterfNV", "GL_NV_path_rendering", glPathParameterfNV },
   { "glPathParameterfvNV", "GL_NV_path_rendering", glPathParameterfvNV },
   { "glPathParameteriNV", "GL_NV_path_rendering", glPathParameteriNV },
@@ -15325,6 +16441,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glPointSizexOES", "GL_OES_fixed_point", glPointSizexOES },
   { "glPollAsyncSGIX", "GL_SGIX_async", glPollAsyncSGIX },
   { "glPollInstrumentsSGIX", "GL_SGIX_instruments", glPollInstrumentsSGIX },
+  { "glPolygonOffsetClampEXT", "GL_EXT_polygon_offset_clamp", glPolygonOffsetClampEXT },
   { "glPolygonOffsetEXT", "GL_EXT_polygon_offset", glPolygonOffsetEXT },
   { "glPolygonOffsetxOES", "GL_OES_fixed_point", glPolygonOffsetxOES },
   { "glPopDebugGroup", "GL_KHR_debug GL_VERSION_4_3", glPopDebugGroup },
@@ -15375,6 +16492,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glProgramParameteriEXT", "GL_EXT_geometry_shader4", glProgramParameteriEXT },
   { "glProgramParameters4dvNV", "GL_NV_vertex_program", glProgramParameters4dvNV },
   { "glProgramParameters4fvNV", "GL_NV_vertex_program", glProgramParameters4fvNV },
+  { "glProgramPathFragmentInputGenNV", "GL_NV_path_rendering", glProgramPathFragmentInputGenNV },
   { "glProgramStringARB", "GL_ARB_fragment_program GL_ARB_vertex_program", glProgramStringARB },
   { "glProgramSubroutineParametersuivNV", "GL_NV_gpu_program5", glProgramSubroutineParametersuivNV },
   { "glProgramUniform1d", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform1d },
@@ -15386,14 +16504,14 @@ const OpenGL_extension extension_registry[2351] = {
   { "glProgramUniform1fv", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform1fv },
   { "glProgramUniform1fvEXT", "GL_EXT_direct_state_access", glProgramUniform1fvEXT },
   { "glProgramUniform1i", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform1i },
-  { "glProgramUniform1i64NV", "GL_NV_gpu_shader5", glProgramUniform1i64NV },
-  { "glProgramUniform1i64vNV", "GL_NV_gpu_shader5", glProgramUniform1i64vNV },
+  { "glProgramUniform1i64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform1i64NV },
+  { "glProgramUniform1i64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform1i64vNV },
   { "glProgramUniform1iEXT", "GL_EXT_direct_state_access", glProgramUniform1iEXT },
   { "glProgramUniform1iv", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform1iv },
   { "glProgramUniform1ivEXT", "GL_EXT_direct_state_access", glProgramUniform1ivEXT },
   { "glProgramUniform1ui", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform1ui },
-  { "glProgramUniform1ui64NV", "GL_NV_gpu_shader5", glProgramUniform1ui64NV },
-  { "glProgramUniform1ui64vNV", "GL_NV_gpu_shader5", glProgramUniform1ui64vNV },
+  { "glProgramUniform1ui64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform1ui64NV },
+  { "glProgramUniform1ui64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform1ui64vNV },
   { "glProgramUniform1uiEXT", "GL_EXT_direct_state_access", glProgramUniform1uiEXT },
   { "glProgramUniform1uiv", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform1uiv },
   { "glProgramUniform1uivEXT", "GL_EXT_direct_state_access", glProgramUniform1uivEXT },
@@ -15406,14 +16524,14 @@ const OpenGL_extension extension_registry[2351] = {
   { "glProgramUniform2fv", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform2fv },
   { "glProgramUniform2fvEXT", "GL_EXT_direct_state_access", glProgramUniform2fvEXT },
   { "glProgramUniform2i", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform2i },
-  { "glProgramUniform2i64NV", "GL_NV_gpu_shader5", glProgramUniform2i64NV },
-  { "glProgramUniform2i64vNV", "GL_NV_gpu_shader5", glProgramUniform2i64vNV },
+  { "glProgramUniform2i64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform2i64NV },
+  { "glProgramUniform2i64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform2i64vNV },
   { "glProgramUniform2iEXT", "GL_EXT_direct_state_access", glProgramUniform2iEXT },
   { "glProgramUniform2iv", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform2iv },
   { "glProgramUniform2ivEXT", "GL_EXT_direct_state_access", glProgramUniform2ivEXT },
   { "glProgramUniform2ui", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform2ui },
-  { "glProgramUniform2ui64NV", "GL_NV_gpu_shader5", glProgramUniform2ui64NV },
-  { "glProgramUniform2ui64vNV", "GL_NV_gpu_shader5", glProgramUniform2ui64vNV },
+  { "glProgramUniform2ui64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform2ui64NV },
+  { "glProgramUniform2ui64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform2ui64vNV },
   { "glProgramUniform2uiEXT", "GL_EXT_direct_state_access", glProgramUniform2uiEXT },
   { "glProgramUniform2uiv", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform2uiv },
   { "glProgramUniform2uivEXT", "GL_EXT_direct_state_access", glProgramUniform2uivEXT },
@@ -15426,14 +16544,14 @@ const OpenGL_extension extension_registry[2351] = {
   { "glProgramUniform3fv", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform3fv },
   { "glProgramUniform3fvEXT", "GL_EXT_direct_state_access", glProgramUniform3fvEXT },
   { "glProgramUniform3i", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform3i },
-  { "glProgramUniform3i64NV", "GL_NV_gpu_shader5", glProgramUniform3i64NV },
-  { "glProgramUniform3i64vNV", "GL_NV_gpu_shader5", glProgramUniform3i64vNV },
+  { "glProgramUniform3i64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform3i64NV },
+  { "glProgramUniform3i64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform3i64vNV },
   { "glProgramUniform3iEXT", "GL_EXT_direct_state_access", glProgramUniform3iEXT },
   { "glProgramUniform3iv", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform3iv },
   { "glProgramUniform3ivEXT", "GL_EXT_direct_state_access", glProgramUniform3ivEXT },
   { "glProgramUniform3ui", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform3ui },
-  { "glProgramUniform3ui64NV", "GL_NV_gpu_shader5", glProgramUniform3ui64NV },
-  { "glProgramUniform3ui64vNV", "GL_NV_gpu_shader5", glProgramUniform3ui64vNV },
+  { "glProgramUniform3ui64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform3ui64NV },
+  { "glProgramUniform3ui64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform3ui64vNV },
   { "glProgramUniform3uiEXT", "GL_EXT_direct_state_access", glProgramUniform3uiEXT },
   { "glProgramUniform3uiv", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform3uiv },
   { "glProgramUniform3uivEXT", "GL_EXT_direct_state_access", glProgramUniform3uivEXT },
@@ -15446,14 +16564,14 @@ const OpenGL_extension extension_registry[2351] = {
   { "glProgramUniform4fv", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform4fv },
   { "glProgramUniform4fvEXT", "GL_EXT_direct_state_access", glProgramUniform4fvEXT },
   { "glProgramUniform4i", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform4i },
-  { "glProgramUniform4i64NV", "GL_NV_gpu_shader5", glProgramUniform4i64NV },
-  { "glProgramUniform4i64vNV", "GL_NV_gpu_shader5", glProgramUniform4i64vNV },
+  { "glProgramUniform4i64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform4i64NV },
+  { "glProgramUniform4i64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform4i64vNV },
   { "glProgramUniform4iEXT", "GL_EXT_direct_state_access", glProgramUniform4iEXT },
   { "glProgramUniform4iv", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform4iv },
   { "glProgramUniform4ivEXT", "GL_EXT_direct_state_access", glProgramUniform4ivEXT },
   { "glProgramUniform4ui", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform4ui },
-  { "glProgramUniform4ui64NV", "GL_NV_gpu_shader5", glProgramUniform4ui64NV },
-  { "glProgramUniform4ui64vNV", "GL_NV_gpu_shader5", glProgramUniform4ui64vNV },
+  { "glProgramUniform4ui64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform4ui64NV },
+  { "glProgramUniform4ui64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glProgramUniform4ui64vNV },
   { "glProgramUniform4uiEXT", "GL_EXT_direct_state_access", glProgramUniform4uiEXT },
   { "glProgramUniform4uiv", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glProgramUniform4uiv },
   { "glProgramUniform4uivEXT", "GL_EXT_direct_state_access", glProgramUniform4uivEXT },
@@ -15507,14 +16625,17 @@ const OpenGL_extension extension_registry[2351] = {
   { "glPushGroupMarkerEXT", "GL_EXT_debug_marker", glPushGroupMarkerEXT },
   { "glQueryCounter", "GL_ARB_timer_query GL_VERSION_3_3", glQueryCounter },
   { "glQueryMatrixxOES", "GL_OES_query_matrix", glQueryMatrixxOES },
+  { "glQueryObjectParameteruiAMD", "GL_AMD_occlusion_query_event", glQueryObjectParameteruiAMD },
   { "glRasterPos2xOES", "GL_OES_fixed_point", glRasterPos2xOES },
   { "glRasterPos2xvOES", "GL_OES_fixed_point", glRasterPos2xvOES },
   { "glRasterPos3xOES", "GL_OES_fixed_point", glRasterPos3xOES },
   { "glRasterPos3xvOES", "GL_OES_fixed_point", glRasterPos3xvOES },
   { "glRasterPos4xOES", "GL_OES_fixed_point", glRasterPos4xOES },
   { "glRasterPos4xvOES", "GL_OES_fixed_point", glRasterPos4xvOES },
+  { "glRasterSamplesEXT", "GL_EXT_raster_multisample GL_EXT_texture_filter_minmax GL_NV_framebuffer_mixed_samples", glRasterSamplesEXT },
   { "glReadBufferRegion", "GL_KTX_buffer_region", glReadBufferRegion },
   { "glReadInstrumentsSGIX", "GL_SGIX_instruments", glReadInstrumentsSGIX },
+  { "glReadnPixels", "GL_KHR_robustness GL_VERSION_4_5", glReadnPixels },
   { "glReadnPixelsARB", "GL_ARB_robustness", glReadnPixelsARB },
   { "glRectxOES", "GL_OES_fixed_point", glRectxOES },
   { "glRectxvOES", "GL_OES_fixed_point", glRectxvOES },
@@ -15554,6 +16675,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glResetMinmax", "GL_ARB_imaging", glResetMinmax },
   { "glResetMinmaxEXT", "GL_EXT_histogram", glResetMinmaxEXT },
   { "glResizeBuffersMESA", "GL_MESA_resize_buffers", glResizeBuffersMESA },
+  { "glResolveDepthValuesNV", "GL_NV_sample_locations", glResolveDepthValuesNV },
   { "glResumeTransformFeedback", "GL_ARB_transform_feedback2 GL_VERSION_4_0", glResumeTransformFeedback },
   { "glResumeTransformFeedbackNV", "GL_NV_transform_feedback2", glResumeTransformFeedbackNV },
   { "glRotatexOES", "GL_OES_fixed_point", glRotatexOES },
@@ -15652,8 +16774,13 @@ const OpenGL_extension extension_registry[2351] = {
   { "glStencilOpValueAMD", "GL_AMD_stencil_operation_extended", glStencilOpValueAMD },
   { "glStencilStrokePathInstancedNV", "GL_NV_path_rendering", glStencilStrokePathInstancedNV },
   { "glStencilStrokePathNV", "GL_NV_path_rendering", glStencilStrokePathNV },
+  { "glStencilThenCoverFillPathInstancedNV", "GL_NV_path_rendering", glStencilThenCoverFillPathInstancedNV },
+  { "glStencilThenCoverFillPathNV", "GL_NV_path_rendering", glStencilThenCoverFillPathNV },
+  { "glStencilThenCoverStrokePathInstancedNV", "GL_NV_path_rendering", glStencilThenCoverStrokePathInstancedNV },
+  { "glStencilThenCoverStrokePathNV", "GL_NV_path_rendering", glStencilThenCoverStrokePathNV },
   { "glStopInstrumentsSGIX", "GL_SGIX_instruments", glStopInstrumentsSGIX },
   { "glStringMarkerGREMEDY", "GL_GREMEDY_string_marker", glStringMarkerGREMEDY },
+  { "glSubpixelPrecisionBiasNV", "GL_NV_conservative_raster", glSubpixelPrecisionBiasNV },
   { "glSwizzleEXT", "GL_EXT_vertex_shader", glSwizzleEXT },
   { "glSyncTextureINTEL", "GL_INTEL_map_texture", glSyncTextureINTEL },
   { "glTagSampleBufferSGIX", "GL_SGIX_tag_sample_buffer", glTagSampleBufferSGIX },
@@ -15761,8 +16888,11 @@ const OpenGL_extension extension_registry[2351] = {
   { "glTexSubImage3D", "GL_VERSION_1_2", glTexSubImage3D },
   { "glTexSubImage3DEXT", "GL_EXT_texture3D", glTexSubImage3DEXT },
   { "glTexSubImage4DSGIS", "GL_SGIS_texture4D", glTexSubImage4DSGIS },
+  { "glTextureBarrier", "GL_ARB_texture_barrier GL_VERSION_4_5", glTextureBarrier },
   { "glTextureBarrierNV", "GL_NV_texture_barrier", glTextureBarrierNV },
+  { "glTextureBuffer", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureBuffer },
   { "glTextureBufferEXT", "GL_EXT_direct_state_access", glTextureBufferEXT },
+  { "glTextureBufferRange", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureBufferRange },
   { "glTextureBufferRangeEXT", "GL_EXT_direct_state_access", glTextureBufferRangeEXT },
   { "glTextureColorMaskSGIS", "GL_SGIS_texture_color_mask", glTextureColorMaskSGIS },
   { "glTextureImage1DEXT", "GL_EXT_direct_state_access", glTextureImage1DEXT },
@@ -15776,26 +16906,42 @@ const OpenGL_extension extension_registry[2351] = {
   { "glTextureMaterialEXT", "GL_EXT_light_texture", glTextureMaterialEXT },
   { "glTextureNormalEXT", "GL_EXT_texture_perturb_normal", glTextureNormalEXT },
   { "glTexturePageCommitmentEXT", "GL_EXT_direct_state_access", glTexturePageCommitmentEXT },
+  { "glTextureParameterIiv", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureParameterIiv },
   { "glTextureParameterIivEXT", "GL_EXT_direct_state_access", glTextureParameterIivEXT },
+  { "glTextureParameterIuiv", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureParameterIuiv },
   { "glTextureParameterIuivEXT", "GL_EXT_direct_state_access", glTextureParameterIuivEXT },
+  { "glTextureParameterf", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureParameterf },
   { "glTextureParameterfEXT", "GL_EXT_direct_state_access", glTextureParameterfEXT },
+  { "glTextureParameterfv", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureParameterfv },
   { "glTextureParameterfvEXT", "GL_EXT_direct_state_access", glTextureParameterfvEXT },
+  { "glTextureParameteri", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureParameteri },
   { "glTextureParameteriEXT", "GL_EXT_direct_state_access", glTextureParameteriEXT },
+  { "glTextureParameteriv", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureParameteriv },
   { "glTextureParameterivEXT", "GL_EXT_direct_state_access", glTextureParameterivEXT },
   { "glTextureRangeAPPLE", "GL_APPLE_texture_range", glTextureRangeAPPLE },
   { "glTextureRenderbufferEXT", "GL_EXT_direct_state_access", glTextureRenderbufferEXT },
+  { "glTextureStorage1D", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureStorage1D },
   { "glTextureStorage1DEXT", "GL_EXT_direct_state_access", glTextureStorage1DEXT },
+  { "glTextureStorage2D", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureStorage2D },
   { "glTextureStorage2DEXT", "GL_EXT_direct_state_access", glTextureStorage2DEXT },
+  { "glTextureStorage2DMultisample", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureStorage2DMultisample },
   { "glTextureStorage2DMultisampleEXT", "GL_EXT_direct_state_access", glTextureStorage2DMultisampleEXT },
+  { "glTextureStorage3D", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureStorage3D },
   { "glTextureStorage3DEXT", "GL_EXT_direct_state_access", glTextureStorage3DEXT },
+  { "glTextureStorage3DMultisample", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureStorage3DMultisample },
   { "glTextureStorage3DMultisampleEXT", "GL_EXT_direct_state_access", glTextureStorage3DMultisampleEXT },
   { "glTextureStorageSparseAMD", "GL_AMD_sparse_texture", glTextureStorageSparseAMD },
+  { "glTextureSubImage1D", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureSubImage1D },
   { "glTextureSubImage1DEXT", "GL_EXT_direct_state_access", glTextureSubImage1DEXT },
+  { "glTextureSubImage2D", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureSubImage2D },
   { "glTextureSubImage2DEXT", "GL_EXT_direct_state_access", glTextureSubImage2DEXT },
+  { "glTextureSubImage3D", "GL_ARB_direct_state_access GL_VERSION_4_5", glTextureSubImage3D },
   { "glTextureSubImage3DEXT", "GL_EXT_direct_state_access", glTextureSubImage3DEXT },
   { "glTextureView", "GL_ARB_texture_view GL_VERSION_4_3", glTextureView },
   { "glTrackMatrixNV", "GL_NV_vertex_program", glTrackMatrixNV },
   { "glTransformFeedbackAttribsNV", "GL_NV_transform_feedback", glTransformFeedbackAttribsNV },
+  { "glTransformFeedbackBufferBase", "GL_ARB_direct_state_access GL_VERSION_4_5", glTransformFeedbackBufferBase },
+  { "glTransformFeedbackBufferRange", "GL_ARB_direct_state_access GL_VERSION_4_5", glTransformFeedbackBufferRange },
   { "glTransformFeedbackStreamAttribsNV", "GL_NV_transform_feedback", glTransformFeedbackStreamAttribsNV },
   { "glTransformFeedbackVaryings", "GL_VERSION_3_0", glTransformFeedbackVaryings },
   { "glTransformFeedbackVaryingsEXT", "GL_EXT_transform_feedback", glTransformFeedbackVaryingsEXT },
@@ -15809,14 +16955,14 @@ const OpenGL_extension extension_registry[2351] = {
   { "glUniform1fv", "GL_VERSION_2_0", glUniform1fv },
   { "glUniform1fvARB", "GL_ARB_shader_objects", glUniform1fvARB },
   { "glUniform1i", "GL_VERSION_2_0", glUniform1i },
-  { "glUniform1i64NV", "GL_NV_gpu_shader5", glUniform1i64NV },
-  { "glUniform1i64vNV", "GL_NV_gpu_shader5", glUniform1i64vNV },
+  { "glUniform1i64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform1i64NV },
+  { "glUniform1i64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform1i64vNV },
   { "glUniform1iARB", "GL_ARB_shader_objects", glUniform1iARB },
   { "glUniform1iv", "GL_VERSION_2_0", glUniform1iv },
   { "glUniform1ivARB", "GL_ARB_shader_objects", glUniform1ivARB },
   { "glUniform1ui", "GL_VERSION_3_0", glUniform1ui },
-  { "glUniform1ui64NV", "GL_NV_gpu_shader5", glUniform1ui64NV },
-  { "glUniform1ui64vNV", "GL_NV_gpu_shader5", glUniform1ui64vNV },
+  { "glUniform1ui64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform1ui64NV },
+  { "glUniform1ui64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform1ui64vNV },
   { "glUniform1uiEXT", "GL_EXT_gpu_shader4", glUniform1uiEXT },
   { "glUniform1uiv", "GL_VERSION_3_0", glUniform1uiv },
   { "glUniform1uivEXT", "GL_EXT_gpu_shader4", glUniform1uivEXT },
@@ -15827,14 +16973,14 @@ const OpenGL_extension extension_registry[2351] = {
   { "glUniform2fv", "GL_VERSION_2_0", glUniform2fv },
   { "glUniform2fvARB", "GL_ARB_shader_objects", glUniform2fvARB },
   { "glUniform2i", "GL_VERSION_2_0", glUniform2i },
-  { "glUniform2i64NV", "GL_NV_gpu_shader5", glUniform2i64NV },
-  { "glUniform2i64vNV", "GL_NV_gpu_shader5", glUniform2i64vNV },
+  { "glUniform2i64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform2i64NV },
+  { "glUniform2i64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform2i64vNV },
   { "glUniform2iARB", "GL_ARB_shader_objects", glUniform2iARB },
   { "glUniform2iv", "GL_VERSION_2_0", glUniform2iv },
   { "glUniform2ivARB", "GL_ARB_shader_objects", glUniform2ivARB },
   { "glUniform2ui", "GL_VERSION_3_0", glUniform2ui },
-  { "glUniform2ui64NV", "GL_NV_gpu_shader5", glUniform2ui64NV },
-  { "glUniform2ui64vNV", "GL_NV_gpu_shader5", glUniform2ui64vNV },
+  { "glUniform2ui64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform2ui64NV },
+  { "glUniform2ui64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform2ui64vNV },
   { "glUniform2uiEXT", "GL_EXT_gpu_shader4", glUniform2uiEXT },
   { "glUniform2uiv", "GL_VERSION_3_0", glUniform2uiv },
   { "glUniform2uivEXT", "GL_EXT_gpu_shader4", glUniform2uivEXT },
@@ -15845,14 +16991,14 @@ const OpenGL_extension extension_registry[2351] = {
   { "glUniform3fv", "GL_VERSION_2_0", glUniform3fv },
   { "glUniform3fvARB", "GL_ARB_shader_objects", glUniform3fvARB },
   { "glUniform3i", "GL_VERSION_2_0", glUniform3i },
-  { "glUniform3i64NV", "GL_NV_gpu_shader5", glUniform3i64NV },
-  { "glUniform3i64vNV", "GL_NV_gpu_shader5", glUniform3i64vNV },
+  { "glUniform3i64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform3i64NV },
+  { "glUniform3i64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform3i64vNV },
   { "glUniform3iARB", "GL_ARB_shader_objects", glUniform3iARB },
   { "glUniform3iv", "GL_VERSION_2_0", glUniform3iv },
   { "glUniform3ivARB", "GL_ARB_shader_objects", glUniform3ivARB },
   { "glUniform3ui", "GL_VERSION_3_0", glUniform3ui },
-  { "glUniform3ui64NV", "GL_NV_gpu_shader5", glUniform3ui64NV },
-  { "glUniform3ui64vNV", "GL_NV_gpu_shader5", glUniform3ui64vNV },
+  { "glUniform3ui64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform3ui64NV },
+  { "glUniform3ui64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform3ui64vNV },
   { "glUniform3uiEXT", "GL_EXT_gpu_shader4", glUniform3uiEXT },
   { "glUniform3uiv", "GL_VERSION_3_0", glUniform3uiv },
   { "glUniform3uivEXT", "GL_EXT_gpu_shader4", glUniform3uivEXT },
@@ -15863,14 +17009,14 @@ const OpenGL_extension extension_registry[2351] = {
   { "glUniform4fv", "GL_VERSION_2_0", glUniform4fv },
   { "glUniform4fvARB", "GL_ARB_shader_objects", glUniform4fvARB },
   { "glUniform4i", "GL_VERSION_2_0", glUniform4i },
-  { "glUniform4i64NV", "GL_NV_gpu_shader5", glUniform4i64NV },
-  { "glUniform4i64vNV", "GL_NV_gpu_shader5", glUniform4i64vNV },
+  { "glUniform4i64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform4i64NV },
+  { "glUniform4i64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform4i64vNV },
   { "glUniform4iARB", "GL_ARB_shader_objects", glUniform4iARB },
   { "glUniform4iv", "GL_VERSION_2_0", glUniform4iv },
   { "glUniform4ivARB", "GL_ARB_shader_objects", glUniform4ivARB },
   { "glUniform4ui", "GL_VERSION_3_0", glUniform4ui },
-  { "glUniform4ui64NV", "GL_NV_gpu_shader5", glUniform4ui64NV },
-  { "glUniform4ui64vNV", "GL_NV_gpu_shader5", glUniform4ui64vNV },
+  { "glUniform4ui64NV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform4ui64NV },
+  { "glUniform4ui64vNV", "GL_AMD_gpu_shader_int64 GL_NV_gpu_shader5", glUniform4ui64vNV },
   { "glUniform4uiEXT", "GL_EXT_gpu_shader4", glUniform4uiEXT },
   { "glUniform4uiv", "GL_VERSION_3_0", glUniform4uiv },
   { "glUniform4uivEXT", "GL_EXT_gpu_shader4", glUniform4uivEXT },
@@ -15907,6 +17053,7 @@ const OpenGL_extension extension_registry[2351] = {
   { "glUnlockArraysEXT", "GL_EXT_compiled_vertex_array", glUnlockArraysEXT },
   { "glUnmapBuffer", "GL_VERSION_1_5", glUnmapBuffer },
   { "glUnmapBufferARB", "GL_ARB_vertex_buffer_object", glUnmapBufferARB },
+  { "glUnmapNamedBuffer", "GL_ARB_direct_state_access GL_VERSION_4_5", glUnmapNamedBuffer },
   { "glUnmapNamedBufferEXT", "GL_EXT_direct_state_access", glUnmapNamedBufferEXT },
   { "glUnmapObjectBufferATI", "GL_ATI_map_object_buffer", glUnmapObjectBufferATI },
   { "glUnmapTexture2DINTEL", "GL_INTEL_map_texture", glUnmapTexture2DINTEL },
@@ -15956,9 +17103,15 @@ const OpenGL_extension extension_registry[2351] = {
   { "glVertex4hvNV", "GL_NV_half_float", glVertex4hvNV },
   { "glVertex4xOES", "GL_OES_fixed_point", glVertex4xOES },
   { "glVertex4xvOES", "GL_OES_fixed_point", glVertex4xvOES },
+  { "glVertexArrayAttribBinding", "GL_ARB_direct_state_access GL_VERSION_4_5", glVertexArrayAttribBinding },
+  { "glVertexArrayAttribFormat", "GL_ARB_direct_state_access GL_VERSION_4_5", glVertexArrayAttribFormat },
+  { "glVertexArrayAttribIFormat", "GL_ARB_direct_state_access GL_VERSION_4_5", glVertexArrayAttribIFormat },
+  { "glVertexArrayAttribLFormat", "GL_ARB_direct_state_access GL_VERSION_4_5", glVertexArrayAttribLFormat },
   { "glVertexArrayBindVertexBufferEXT", "GL_EXT_direct_state_access", glVertexArrayBindVertexBufferEXT },
+  { "glVertexArrayBindingDivisor", "GL_ARB_direct_state_access GL_VERSION_4_5", glVertexArrayBindingDivisor },
   { "glVertexArrayColorOffsetEXT", "GL_EXT_direct_state_access", glVertexArrayColorOffsetEXT },
   { "glVertexArrayEdgeFlagOffsetEXT", "GL_EXT_direct_state_access", glVertexArrayEdgeFlagOffsetEXT },
+  { "glVertexArrayElementBuffer", "GL_ARB_direct_state_access GL_VERSION_4_5", glVertexArrayElementBuffer },
   { "glVertexArrayFogCoordOffsetEXT", "GL_EXT_direct_state_access", glVertexArrayFogCoordOffsetEXT },
   { "glVertexArrayIndexOffsetEXT", "GL_EXT_direct_state_access", glVertexArrayIndexOffsetEXT },
   { "glVertexArrayMultiTexCoordOffsetEXT", "GL_EXT_direct_state_access", glVertexArrayMultiTexCoordOffsetEXT },
@@ -15977,6 +17130,8 @@ const OpenGL_extension extension_registry[2351] = {
   { "glVertexArrayVertexAttribLOffsetEXT", "GL_EXT_direct_state_access", glVertexArrayVertexAttribLOffsetEXT },
   { "glVertexArrayVertexAttribOffsetEXT", "GL_EXT_direct_state_access", glVertexArrayVertexAttribOffsetEXT },
   { "glVertexArrayVertexBindingDivisorEXT", "GL_EXT_direct_state_access", glVertexArrayVertexBindingDivisorEXT },
+  { "glVertexArrayVertexBuffer", "GL_ARB_direct_state_access GL_VERSION_4_5", glVertexArrayVertexBuffer },
+  { "glVertexArrayVertexBuffers", "GL_ARB_direct_state_access GL_VERSION_4_5", glVertexArrayVertexBuffers },
   { "glVertexArrayVertexOffsetEXT", "GL_EXT_direct_state_access", glVertexArrayVertexOffsetEXT },
   { "glVertexAttrib1d", "GL_VERSION_2_0", glVertexAttrib1d },
   { "glVertexAttrib1dARB", "GL_ARB_vertex_program GL_ARB_vertex_shader", glVertexAttrib1dARB },
diff --git a/dlls/opengl32/opengl_norm.c b/dlls/opengl32/opengl_norm.c
index 78a72ef..52fb00b 100644
--- a/dlls/opengl32/opengl_norm.c
+++ b/dlls/opengl32/opengl_norm.c
@@ -608,10 +608,10 @@ void WINAPI glDrawArrays( GLenum mode, GLint first, GLsizei count ) {
 /***********************************************************************
  *              glDrawBuffer (OPENGL32.@)
  */
-void WINAPI glDrawBuffer( GLenum mode ) {
+void WINAPI glDrawBuffer( GLenum buf ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
-  TRACE("(%d)\n", mode );
-  funcs->gl.p_glDrawBuffer( mode );
+  TRACE("(%d)\n", buf );
+  funcs->gl.p_glDrawBuffer( buf );
 }
 
 /***********************************************************************
@@ -2129,10 +2129,10 @@ void WINAPI glRasterPos4sv( const GLshort* v ) {
 /***********************************************************************
  *              glReadBuffer (OPENGL32.@)
  */
-void WINAPI glReadBuffer( GLenum mode ) {
+void WINAPI glReadBuffer( GLenum src ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
-  TRACE("(%d)\n", mode );
-  funcs->gl.p_glReadBuffer( mode );
+  TRACE("(%d)\n", src );
+  funcs->gl.p_glReadBuffer( src );
 }
 
 /***********************************************************************
@@ -3101,7 +3101,7 @@ static void null_glDepthRange( GLdouble nearParam, GLdouble farParam ) { }
 static void null_glDisable( GLenum cap ) { }
 static void null_glDisableClientState( GLenum array ) { }
 static void null_glDrawArrays( GLenum mode, GLint first, GLsizei count ) { }
-static void null_glDrawBuffer( GLenum mode ) { }
+static void null_glDrawBuffer( GLenum buf ) { }
 static void null_glDrawElements( GLenum mode, GLsizei count, GLenum type, const void* indices ) { }
 static void null_glDrawPixels( GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels ) { }
 static void null_glEdgeFlag( GLboolean flag ) { }
@@ -3271,7 +3271,7 @@ static void null_glRasterPos4i( GLint x, GLint y, GLint z, GLint w ) { }
 static void null_glRasterPos4iv( const GLint* v ) { }
 static void null_glRasterPos4s( GLshort x, GLshort y, GLshort z, GLshort w ) { }
 static void null_glRasterPos4sv( const GLshort* v ) { }
-static void null_glReadBuffer( GLenum mode ) { }
+static void null_glReadBuffer( GLenum src ) { }
 static void null_glReadPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels ) { }
 static void null_glRectd( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 ) { }
 static void null_glRectdv( const GLdouble* v1, const GLdouble* v2 ) { }
@@ -3396,6 +3396,7 @@ static void null_glBeginConditionalRenderNVX( GLuint id ) { }
 static void null_glBeginFragmentShaderATI( void ) { }
 static void null_glBeginOcclusionQueryNV( GLuint id ) { }
 static void null_glBeginPerfMonitorAMD( GLuint monitor ) { }
+static void null_glBeginPerfQueryINTEL( GLuint queryHandle ) { }
 static void null_glBeginQuery( GLenum target, GLuint id ) { }
 static void null_glBeginQueryARB( GLenum target, GLuint id ) { }
 static void null_glBeginQueryIndexed( GLenum target, GLuint index, GLuint id ) { }
@@ -3440,6 +3441,7 @@ static void null_glBindSampler( GLuint unit, GLuint sampler ) { }
 static void null_glBindSamplers( GLuint first, GLsizei count, const GLuint* samplers ) { }
 static GLuint null_glBindTexGenParameterEXT( GLenum unit, GLenum coord, GLenum value ) { return 0; }
 static void null_glBindTextureEXT( GLenum target, GLuint texture ) { }
+static void null_glBindTextureUnit( GLuint unit, GLuint texture ) { }
 static GLuint null_glBindTextureUnitParameterEXT( GLenum unit, GLenum value ) { return 0; }
 static void null_glBindTextures( GLuint first, GLsizei count, const GLuint* textures ) { }
 static void null_glBindTransformFeedback( GLenum target, GLuint id ) { }
@@ -3463,6 +3465,7 @@ static void null_glBinormal3sEXT( GLshort bx, GLshort by, GLshort bz ) { }
 static void null_glBinormal3svEXT( const GLshort* v ) { }
 static void null_glBinormalPointerEXT( GLenum type, GLsizei stride, const void* pointer ) { }
 static void null_glBitmapxOES( GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte* bitmap ) { }
+static void null_glBlendBarrierKHR( void ) { }
 static void null_glBlendBarrierNV( void ) { }
 static void null_glBlendColor( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha ) { }
 static void null_glBlendColorEXT( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha ) { }
@@ -3489,9 +3492,11 @@ static void null_glBlendFunciARB( GLuint buf, GLenum src, GLenum dst ) { }
 static void null_glBlendParameteriNV( GLenum pname, GLint value ) { }
 static void null_glBlitFramebuffer( GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter ) { }
 static void null_glBlitFramebufferEXT( GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter ) { }
+static void null_glBlitNamedFramebuffer( GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter ) { }
 static void null_glBufferAddressRangeNV( GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length ) { }
 static void null_glBufferData( GLenum target, GLsizeiptr size, const void* data, GLenum usage ) { }
 static void null_glBufferDataARB( GLenum target, GLsizeiptrARB size, const void* data, GLenum usage ) { }
+static void null_glBufferPageCommitmentARB( GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit ) { }
 static void null_glBufferParameteriAPPLE( GLenum target, GLenum pname, GLint param ) { }
 static GLuint null_glBufferRegionEnabled( void ) { return 0; }
 static void null_glBufferStorage( GLenum target, GLsizeiptr size, const void* data, GLbitfield flags ) { }
@@ -3499,6 +3504,7 @@ static void null_glBufferSubData( GLenum target, GLintptr offset, GLsizeiptr siz
 static void null_glBufferSubDataARB( GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void* data ) { }
 static GLenum null_glCheckFramebufferStatus( GLenum target ) { return 0; }
 static GLenum null_glCheckFramebufferStatusEXT( GLenum target ) { return 0; }
+static GLenum null_glCheckNamedFramebufferStatus( GLuint framebuffer, GLenum target ) { return 0; }
 static GLenum null_glCheckNamedFramebufferStatusEXT( GLuint framebuffer, GLenum target ) { return 0; }
 static void null_glClampColor( GLenum target, GLenum clamp ) { }
 static void null_glClampColorARB( GLenum target, GLenum clamp ) { }
@@ -3516,8 +3522,14 @@ static void null_glClearDepthdNV( GLdouble depth ) { }
 static void null_glClearDepthf( GLfloat d ) { }
 static void null_glClearDepthfOES( GLclampf depth ) { }
 static void null_glClearDepthxOES( GLfixed depth ) { }
+static void null_glClearNamedBufferData( GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data ) { }
 static void null_glClearNamedBufferDataEXT( GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data ) { }
-static void null_glClearNamedBufferSubDataEXT( GLuint buffer, GLenum internalformat, GLenum format, GLenum type, GLsizeiptr offset, GLsizeiptr size, const void* data ) { }
+static void null_glClearNamedBufferSubData( GLuint buffer, GLenum internalformat, GLintptr offset, GLsizei size, GLenum format, GLenum type, const void* data ) { }
+static void null_glClearNamedBufferSubDataEXT( GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data ) { }
+static void null_glClearNamedFramebufferfi( GLuint framebuffer, GLenum buffer, const GLfloat depth, GLint stencil ) { }
+static void null_glClearNamedFramebufferfv( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value ) { }
+static void null_glClearNamedFramebufferiv( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value ) { }
+static void null_glClearNamedFramebufferuiv( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value ) { }
 static void null_glClearTexImage( GLuint texture, GLint level, GLenum format, GLenum type, const void* data ) { }
 static void null_glClearTexSubImage( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* data ) { }
 static void null_glClientActiveTexture( GLenum texture ) { }
@@ -3525,6 +3537,7 @@ static void null_glClientActiveTextureARB( GLenum texture ) { }
 static void null_glClientActiveVertexStreamATI( GLenum stream ) { }
 static void null_glClientAttribDefaultEXT( GLbitfield mask ) { }
 static GLenum null_glClientWaitSync( GLsync sync, GLbitfield flags, GLuint64 timeout ) { return 0; }
+static void null_glClipControl( GLenum origin, GLenum depth ) { }
 static void null_glClipPlanefOES( GLenum plane, const GLfloat* equation ) { }
 static void null_glClipPlanexOES( GLenum plane, const GLfixed* equation ) { }
 static void null_glColor3fVertex3fSUN( GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z ) { }
@@ -3596,8 +3609,11 @@ static void null_glCompressedTexSubImage3DARB( GLenum target, GLint level, GLint
 static void null_glCompressedTextureImage1DEXT( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* bits ) { }
 static void null_glCompressedTextureImage2DEXT( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* bits ) { }
 static void null_glCompressedTextureImage3DEXT( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* bits ) { }
+static void null_glCompressedTextureSubImage1D( GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data ) { }
 static void null_glCompressedTextureSubImage1DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* bits ) { }
+static void null_glCompressedTextureSubImage2D( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data ) { }
 static void null_glCompressedTextureSubImage2DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* bits ) { }
+static void null_glCompressedTextureSubImage3D( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data ) { }
 static void null_glCompressedTextureSubImage3DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* bits ) { }
 static void null_glConvolutionFilter1D( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* image ) { }
 static void null_glConvolutionFilter1DEXT( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* image ) { }
@@ -3629,6 +3645,7 @@ static void null_glCopyMultiTexImage2DEXT( GLenum texunit, GLenum target, GLint
 static void null_glCopyMultiTexSubImage1DEXT( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width ) { }
 static void null_glCopyMultiTexSubImage2DEXT( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height ) { }
 static void null_glCopyMultiTexSubImage3DEXT( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height ) { }
+static void null_glCopyNamedBufferSubData( GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizei size ) { }
 static void null_glCopyPathNV( GLuint resultPath, GLuint srcPath ) { }
 static void null_glCopyTexImage1DEXT( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border ) { }
 static void null_glCopyTexImage2DEXT( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border ) { }
@@ -3638,20 +3655,35 @@ static void null_glCopyTexSubImage3D( GLenum target, GLint level, GLint xoffset,
 static void null_glCopyTexSubImage3DEXT( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height ) { }
 static void null_glCopyTextureImage1DEXT( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border ) { }
 static void null_glCopyTextureImage2DEXT( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border ) { }
+static void null_glCopyTextureSubImage1D( GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width ) { }
 static void null_glCopyTextureSubImage1DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width ) { }
+static void null_glCopyTextureSubImage2D( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height ) { }
 static void null_glCopyTextureSubImage2DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height ) { }
+static void null_glCopyTextureSubImage3D( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height ) { }
 static void null_glCopyTextureSubImage3DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height ) { }
 static void null_glCoverFillPathInstancedNV( GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat* transformValues ) { }
 static void null_glCoverFillPathNV( GLuint path, GLenum coverMode ) { }
 static void null_glCoverStrokePathInstancedNV( GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat* transformValues ) { }
 static void null_glCoverStrokePathNV( GLuint path, GLenum coverMode ) { }
+static void null_glCoverageModulationNV( GLenum components ) { }
+static void null_glCoverageModulationTableNV( GLsizei n, const GLfloat* v ) { }
+static void null_glCreateBuffers( GLsizei n, GLuint* buffers ) { }
+static void null_glCreateFramebuffers( GLsizei n, GLuint* framebuffers ) { }
+static void null_glCreatePerfQueryINTEL( GLuint queryId, GLuint* queryHandle ) { }
 static GLuint null_glCreateProgram( void ) { return 0; }
 static GLhandleARB null_glCreateProgramObjectARB( void ) { return 0; }
+static void null_glCreateProgramPipelines( GLsizei n, GLuint* pipelines ) { }
+static void null_glCreateQueries( GLenum target, GLsizei n, GLuint* ids ) { }
+static void null_glCreateRenderbuffers( GLsizei n, GLuint* renderbuffers ) { }
+static void null_glCreateSamplers( GLsizei n, GLuint* samplers ) { }
 static GLuint null_glCreateShader( GLenum type ) { return 0; }
 static GLhandleARB null_glCreateShaderObjectARB( GLenum shaderType ) { return 0; }
 static GLuint null_glCreateShaderProgramEXT( GLenum type, const GLchar* string ) { return 0; }
 static GLuint null_glCreateShaderProgramv( GLenum type, GLsizei count, const GLchar*const* strings ) { return 0; }
 static GLsync null_glCreateSyncFromCLeventARB( void* context, void* event, GLbitfield flags ) { return 0; }
+static void null_glCreateTextures( GLenum target, GLsizei n, GLuint* textures ) { }
+static void null_glCreateTransformFeedbacks( GLsizei n, GLuint* ids ) { }
+static void null_glCreateVertexArrays( GLsizei n, GLuint* arrays ) { }
 static void null_glCullParameterdvEXT( GLenum pname, GLdouble* params ) { }
 static void null_glCullParameterfvEXT( GLenum pname, GLfloat* params ) { }
 static void null_glCurrentPaletteMatrixARB( GLint index ) { }
@@ -3683,6 +3715,7 @@ static void null_glDeleteObjectBufferATI( GLuint buffer ) { }
 static void null_glDeleteOcclusionQueriesNV( GLsizei n, const GLuint* ids ) { }
 static void null_glDeletePathsNV( GLuint path, GLsizei range ) { }
 static void null_glDeletePerfMonitorsAMD( GLsizei n, GLuint* monitors ) { }
+static void null_glDeletePerfQueryINTEL( GLuint queryHandle ) { }
 static void null_glDeleteProgram( GLuint program ) { }
 static void null_glDeleteProgramPipelines( GLsizei n, const GLuint* pipelines ) { }
 static void null_glDeleteProgramsARB( GLsizei n, const GLuint* programs ) { }
@@ -3715,6 +3748,7 @@ static void null_glDisableClientStateIndexedEXT( GLenum array, GLuint index ) {
 static void null_glDisableClientStateiEXT( GLenum array, GLuint index ) { }
 static void null_glDisableIndexedEXT( GLenum target, GLuint index ) { }
 static void null_glDisableVariantClientStateEXT( GLuint id ) { }
+static void null_glDisableVertexArrayAttrib( GLuint vaobj, GLuint index ) { }
 static void null_glDisableVertexArrayAttribEXT( GLuint vaobj, GLuint index ) { }
 static void null_glDisableVertexArrayEXT( GLuint vaobj, GLenum array ) { }
 static void null_glDisableVertexAttribAPPLE( GLuint index, GLenum pname ) { }
@@ -3765,6 +3799,7 @@ static void null_glEnableClientStateIndexedEXT( GLenum array, GLuint index ) { }
 static void null_glEnableClientStateiEXT( GLenum array, GLuint index ) { }
 static void null_glEnableIndexedEXT( GLenum target, GLuint index ) { }
 static void null_glEnableVariantClientStateEXT( GLuint id ) { }
+static void null_glEnableVertexArrayAttrib( GLuint vaobj, GLuint index ) { }
 static void null_glEnableVertexArrayAttribEXT( GLuint vaobj, GLuint index ) { }
 static void null_glEnableVertexArrayEXT( GLuint vaobj, GLenum array ) { }
 static void null_glEnableVertexAttribAPPLE( GLuint index, GLenum pname ) { }
@@ -3777,6 +3812,7 @@ static void null_glEndConditionalRenderNVX( void ) { }
 static void null_glEndFragmentShaderATI( void ) { }
 static void null_glEndOcclusionQueryNV( void ) { }
 static void null_glEndPerfMonitorAMD( GLuint monitor ) { }
+static void null_glEndPerfQueryINTEL( GLuint queryHandle ) { }
 static void null_glEndQuery( GLenum target ) { }
 static void null_glEndQueryARB( GLenum target ) { }
 static void null_glEndQueryIndexed( GLenum target, GLuint index ) { }
@@ -3802,6 +3838,7 @@ static void null_glFinishObjectAPPLE( GLenum object, GLint name ) { }
 static void null_glFinishTextureSUNX( void ) { }
 static void null_glFlushMappedBufferRange( GLenum target, GLintptr offset, GLsizeiptr length ) { }
 static void null_glFlushMappedBufferRangeAPPLE( GLenum target, GLintptr offset, GLsizeiptr size ) { }
+static void null_glFlushMappedNamedBufferRange( GLuint buffer, GLintptr offset, GLsizei length ) { }
 static void null_glFlushMappedNamedBufferRangeEXT( GLuint buffer, GLintptr offset, GLsizeiptr length ) { }
 static void null_glFlushPixelDataRangeNV( GLenum target ) { }
 static void null_glFlushRasterSGIX( void ) { }
@@ -3826,6 +3863,7 @@ static void null_glFogFuncSGIS( GLsizei n, const GLfloat* points ) { }
 static void null_glFogxOES( GLenum pname, GLfixed param ) { }
 static void null_glFogxvOES( GLenum pname, const GLfixed* param ) { }
 static void null_glFragmentColorMaterialSGIX( GLenum face, GLenum mode ) { }
+static void null_glFragmentCoverageColorNV( GLuint color ) { }
 static void null_glFragmentLightModelfSGIX( GLenum pname, GLfloat param ) { }
 static void null_glFragmentLightModelfvSGIX( GLenum pname, const GLfloat* params ) { }
 static void null_glFragmentLightModeliSGIX( GLenum pname, GLint param ) { }
@@ -3846,6 +3884,7 @@ static void null_glFramebufferParameteri( GLenum target, GLenum pname, GLint par
 static void null_glFramebufferReadBufferEXT( GLuint framebuffer, GLenum mode ) { }
 static void null_glFramebufferRenderbuffer( GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer ) { }
 static void null_glFramebufferRenderbufferEXT( GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer ) { }
+static void null_glFramebufferSampleLocationsfvNV( GLenum target, GLuint start, GLsizei count, const GLfloat* v ) { }
 static void null_glFramebufferTexture( GLenum target, GLenum attachment, GLuint texture, GLint level ) { }
 static void null_glFramebufferTexture1D( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level ) { }
 static void null_glFramebufferTexture1DEXT( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level ) { }
@@ -3893,6 +3932,7 @@ static GLuint null_glGenVertexShadersEXT( GLuint range ) { return 0; }
 static void null_glGenerateMipmap( GLenum target ) { }
 static void null_glGenerateMipmapEXT( GLenum target ) { }
 static void null_glGenerateMultiTexMipmapEXT( GLenum texunit, GLenum target ) { }
+static void null_glGenerateTextureMipmap( GLuint texture ) { }
 static void null_glGenerateTextureMipmapEXT( GLuint texture, GLenum target ) { }
 static void null_glGetActiveAtomicCounterBufferiv( GLuint program, GLuint bufferIndex, GLenum pname, GLint* params ) { }
 static void null_glGetActiveAttrib( GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name ) { }
@@ -3942,7 +3982,9 @@ static void null_glGetCombinerStageParameterfvNV( GLenum stage, GLenum pname, GL
 static void null_glGetCompressedMultiTexImageEXT( GLenum texunit, GLenum target, GLint lod, void* img ) { }
 static void null_glGetCompressedTexImage( GLenum target, GLint level, void* img ) { }
 static void null_glGetCompressedTexImageARB( GLenum target, GLint level, void* img ) { }
+static void null_glGetCompressedTextureImage( GLuint texture, GLint level, GLsizei bufSize, void* pixels ) { }
 static void null_glGetCompressedTextureImageEXT( GLuint texture, GLenum target, GLint lod, void* img ) { }
+static void null_glGetCompressedTextureSubImage( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels ) { }
 static void null_glGetConvolutionFilter( GLenum target, GLenum format, GLenum type, void* image ) { }
 static void null_glGetConvolutionFilterEXT( GLenum target, GLenum format, GLenum type, void* image ) { }
 static void null_glGetConvolutionParameterfv( GLenum target, GLenum pname, GLfloat* params ) { }
@@ -3950,6 +3992,7 @@ static void null_glGetConvolutionParameterfvEXT( GLenum target, GLenum pname, GL
 static void null_glGetConvolutionParameteriv( GLenum target, GLenum pname, GLint* params ) { }
 static void null_glGetConvolutionParameterivEXT( GLenum target, GLenum pname, GLint* params ) { }
 static void null_glGetConvolutionParameterxvOES( GLenum target, GLenum pname, GLfixed* params ) { }
+static void null_glGetCoverageModulationTableNV( GLsizei bufsize, GLfloat* v ) { }
 static GLuint null_glGetDebugMessageLog( GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog ) { return 0; }
 static GLuint null_glGetDebugMessageLogAMD( GLuint count, GLsizei bufsize, GLenum* categories, GLuint* severities, GLuint* ids, GLsizei* lengths, GLchar* message ) { return 0; }
 static GLuint null_glGetDebugMessageLogARB( GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog ) { return 0; }
@@ -3960,6 +4003,7 @@ static void null_glGetDoublei_vEXT( GLenum pname, GLuint index, GLdouble* params
 static void null_glGetFenceivNV( GLuint fence, GLenum pname, GLint* params ) { }
 static void null_glGetFinalCombinerInputParameterfvNV( GLenum variable, GLenum pname, GLfloat* params ) { }
 static void null_glGetFinalCombinerInputParameterivNV( GLenum variable, GLenum pname, GLint* params ) { }
+static void null_glGetFirstPerfQueryIdINTEL( GLuint* queryId ) { }
 static void null_glGetFixedvOES( GLenum pname, GLfixed* params ) { }
 static void null_glGetFloatIndexedvEXT( GLenum target, GLuint index, GLfloat* data ) { }
 static void null_glGetFloati_v( GLenum target, GLuint index, GLfloat* data ) { }
@@ -3976,6 +4020,7 @@ static void null_glGetFramebufferAttachmentParameteriv( GLenum target, GLenum at
 static void null_glGetFramebufferAttachmentParameterivEXT( GLenum target, GLenum attachment, GLenum pname, GLint* params ) { }
 static void null_glGetFramebufferParameteriv( GLenum target, GLenum pname, GLint* params ) { }
 static void null_glGetFramebufferParameterivEXT( GLuint framebuffer, GLenum pname, GLint* params ) { }
+static GLenum null_glGetGraphicsResetStatus( void ) { return 0; }
 static GLenum null_glGetGraphicsResetStatusARB( void ) { return 0; }
 static GLhandleARB null_glGetHandleARB( GLenum pname ) { return 0; }
 static void null_glGetHistogram( GLenum target, GLboolean reset, GLenum format, GLenum type, void* values ) { }
@@ -3997,6 +4042,7 @@ static void null_glGetIntegerIndexedvEXT( GLenum target, GLuint index, GLint* da
 static void null_glGetIntegeri_v( GLenum target, GLuint index, GLint* data ) { }
 static void null_glGetIntegerui64i_vNV( GLenum value, GLuint index, GLuint64EXT* result ) { }
 static void null_glGetIntegerui64vNV( GLenum value, GLuint64EXT* result ) { }
+static void null_glGetInternalformatSampleivNV( GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint* params ) { }
 static void null_glGetInternalformati64v( GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64* params ) { }
 static void null_glGetInternalformativ( GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params ) { }
 static void null_glGetInvariantBooleanvEXT( GLuint id, GLenum value, GLboolean* data ) { }
@@ -4035,11 +4081,17 @@ static void null_glGetMultiTexParameterfvEXT( GLenum texunit, GLenum target, GLe
 static void null_glGetMultiTexParameterivEXT( GLenum texunit, GLenum target, GLenum pname, GLint* params ) { }
 static void null_glGetMultisamplefv( GLenum pname, GLuint index, GLfloat* val ) { }
 static void null_glGetMultisamplefvNV( GLenum pname, GLuint index, GLfloat* val ) { }
+static void null_glGetNamedBufferParameteri64v( GLuint buffer, GLenum pname, GLint64* params ) { }
+static void null_glGetNamedBufferParameteriv( GLuint buffer, GLenum pname, GLint* params ) { }
 static void null_glGetNamedBufferParameterivEXT( GLuint buffer, GLenum pname, GLint* params ) { }
 static void null_glGetNamedBufferParameterui64vNV( GLuint buffer, GLenum pname, GLuint64EXT* params ) { }
+static void null_glGetNamedBufferPointerv( GLuint buffer, GLenum pname, void** params ) { }
 static void null_glGetNamedBufferPointervEXT( GLuint buffer, GLenum pname, void** params ) { }
+static void null_glGetNamedBufferSubData( GLuint buffer, GLintptr offset, GLsizei size, void* data ) { }
 static void null_glGetNamedBufferSubDataEXT( GLuint buffer, GLintptr offset, GLsizeiptr size, void* data ) { }
+static void null_glGetNamedFramebufferAttachmentParameteriv( GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params ) { }
 static void null_glGetNamedFramebufferAttachmentParameterivEXT( GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params ) { }
+static void null_glGetNamedFramebufferParameteriv( GLuint framebuffer, GLenum pname, GLint* param ) { }
 static void null_glGetNamedFramebufferParameterivEXT( GLuint framebuffer, GLenum pname, GLint* params ) { }
 static void null_glGetNamedProgramLocalParameterIivEXT( GLuint program, GLenum target, GLuint index, GLint* params ) { }
 static void null_glGetNamedProgramLocalParameterIuivEXT( GLuint program, GLenum target, GLuint index, GLuint* params ) { }
@@ -4047,9 +4099,11 @@ static void null_glGetNamedProgramLocalParameterdvEXT( GLuint program, GLenum ta
 static void null_glGetNamedProgramLocalParameterfvEXT( GLuint program, GLenum target, GLuint index, GLfloat* params ) { }
 static void null_glGetNamedProgramStringEXT( GLuint program, GLenum target, GLenum pname, void* string ) { }
 static void null_glGetNamedProgramivEXT( GLuint program, GLenum target, GLenum pname, GLint* params ) { }
+static void null_glGetNamedRenderbufferParameteriv( GLuint renderbuffer, GLenum pname, GLint* params ) { }
 static void null_glGetNamedRenderbufferParameterivEXT( GLuint renderbuffer, GLenum pname, GLint* params ) { }
 static void null_glGetNamedStringARB( GLint namelen, const GLchar* name, GLsizei bufSize, GLint* stringlen, GLchar* string ) { }
 static void null_glGetNamedStringivARB( GLint namelen, const GLchar* name, GLenum pname, GLint* params ) { }
+static void null_glGetNextPerfQueryIdINTEL( GLuint queryId, GLuint* nextQueryId ) { }
 static void null_glGetObjectBufferfvATI( GLuint buffer, GLenum pname, GLfloat* params ) { }
 static void null_glGetObjectBufferivATI( GLuint buffer, GLenum pname, GLint* params ) { }
 static void null_glGetObjectLabel( GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label ) { }
@@ -4073,12 +4127,16 @@ static void null_glGetPathParameterivNV( GLuint path, GLenum pname, GLint* value
 static void null_glGetPathSpacingNV( GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat* returnedSpacing ) { }
 static void null_glGetPathTexGenfvNV( GLenum texCoordSet, GLenum pname, GLfloat* value ) { }
 static void null_glGetPathTexGenivNV( GLenum texCoordSet, GLenum pname, GLint* value ) { }
+static void null_glGetPerfCounterInfoINTEL( GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar* counterName, GLuint counterDescLength, GLchar* counterDesc, GLuint* counterOffset, GLuint* counterDataSize, GLuint* counterTypeEnum, GLuint* counterDataTypeEnum, GLuint64* rawCounterMaxValue ) { }
 static void null_glGetPerfMonitorCounterDataAMD( GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint* bytesWritten ) { }
 static void null_glGetPerfMonitorCounterInfoAMD( GLuint group, GLuint counter, GLenum pname, void* data ) { }
 static void null_glGetPerfMonitorCounterStringAMD( GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar* counterString ) { }
 static void null_glGetPerfMonitorCountersAMD( GLuint group, GLint* numCounters, GLint* maxActiveCounters, GLsizei counterSize, GLuint* counters ) { }
 static void null_glGetPerfMonitorGroupStringAMD( GLuint group, GLsizei bufSize, GLsizei* length, GLchar* groupString ) { }
 static void null_glGetPerfMonitorGroupsAMD( GLint* numGroups, GLsizei groupsSize, GLuint* groups ) { }
+static void null_glGetPerfQueryDataINTEL( GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid* data, GLuint* bytesWritten ) { }
+static void null_glGetPerfQueryIdByNameINTEL( GLchar* queryName, GLuint* queryId ) { }
+static void null_glGetPerfQueryInfoINTEL( GLuint queryId, GLuint queryNameLength, GLchar* queryName, GLuint* dataSize, GLuint* noCounters, GLuint* noInstances, GLuint* capsMask ) { }
 static void null_glGetPixelMapxv( GLenum map, GLint size, GLfixed* values ) { }
 static void null_glGetPixelTexGenParameterfvSGIS( GLenum pname, GLfloat* params ) { }
 static void null_glGetPixelTexGenParameterivSGIS( GLenum pname, GLint* params ) { }
@@ -4108,6 +4166,7 @@ static GLuint null_glGetProgramResourceIndex( GLuint program, GLenum programInte
 static GLint null_glGetProgramResourceLocation( GLuint program, GLenum programInterface, const GLchar* name ) { return 0; }
 static GLint null_glGetProgramResourceLocationIndex( GLuint program, GLenum programInterface, const GLchar* name ) { return 0; }
 static void null_glGetProgramResourceName( GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name ) { }
+static void null_glGetProgramResourcefvNV( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLfloat* params ) { }
 static void null_glGetProgramResourceiv( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLint* params ) { }
 static void null_glGetProgramStageiv( GLuint program, GLenum shadertype, GLenum pname, GLint* values ) { }
 static void null_glGetProgramStringARB( GLenum target, GLenum pname, void* string ) { }
@@ -4116,6 +4175,10 @@ static void null_glGetProgramSubroutineParameteruivNV( GLenum target, GLuint ind
 static void null_glGetProgramiv( GLuint program, GLenum pname, GLint* params ) { }
 static void null_glGetProgramivARB( GLenum target, GLenum pname, GLint* params ) { }
 static void null_glGetProgramivNV( GLuint id, GLenum pname, GLint* params ) { }
+static void null_glGetQueryBufferObjecti64v( GLuint id, GLuint buffer, GLenum pname, GLintptr offset ) { }
+static void null_glGetQueryBufferObjectiv( GLuint id, GLuint buffer, GLenum pname, GLintptr offset ) { }
+static void null_glGetQueryBufferObjectui64v( GLuint id, GLuint buffer, GLenum pname, GLintptr offset ) { }
+static void null_glGetQueryBufferObjectuiv( GLuint id, GLuint buffer, GLenum pname, GLintptr offset ) { }
 static void null_glGetQueryIndexediv( GLenum target, GLuint index, GLenum pname, GLint* params ) { }
 static void null_glGetQueryObjecti64v( GLuint id, GLenum pname, GLint64* params ) { }
 static void null_glGetQueryObjecti64vEXT( GLuint id, GLenum pname, GLint64* params ) { }
@@ -4159,19 +4222,30 @@ static void null_glGetTexParameterPointervAPPLE( GLenum target, GLenum pname, vo
 static void null_glGetTexParameterxvOES( GLenum target, GLenum pname, GLfixed* params ) { }
 static GLuint64 null_glGetTextureHandleARB( GLuint texture ) { return 0; }
 static GLuint64 null_glGetTextureHandleNV( GLuint texture ) { return 0; }
+static void null_glGetTextureImage( GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels ) { }
 static void null_glGetTextureImageEXT( GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void* pixels ) { }
+static void null_glGetTextureLevelParameterfv( GLuint texture, GLint level, GLenum pname, GLfloat* params ) { }
 static void null_glGetTextureLevelParameterfvEXT( GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat* params ) { }
+static void null_glGetTextureLevelParameteriv( GLuint texture, GLint level, GLenum pname, GLint* params ) { }
 static void null_glGetTextureLevelParameterivEXT( GLuint texture, GLenum target, GLint level, GLenum pname, GLint* params ) { }
+static void null_glGetTextureParameterIiv( GLuint texture, GLenum pname, GLint* params ) { }
 static void null_glGetTextureParameterIivEXT( GLuint texture, GLenum target, GLenum pname, GLint* params ) { }
+static void null_glGetTextureParameterIuiv( GLuint texture, GLenum pname, GLuint* params ) { }
 static void null_glGetTextureParameterIuivEXT( GLuint texture, GLenum target, GLenum pname, GLuint* params ) { }
+static void null_glGetTextureParameterfv( GLuint texture, GLenum pname, GLfloat* params ) { }
 static void null_glGetTextureParameterfvEXT( GLuint texture, GLenum target, GLenum pname, GLfloat* params ) { }
+static void null_glGetTextureParameteriv( GLuint texture, GLenum pname, GLint* params ) { }
 static void null_glGetTextureParameterivEXT( GLuint texture, GLenum target, GLenum pname, GLint* params ) { }
 static GLuint64 null_glGetTextureSamplerHandleARB( GLuint texture, GLuint sampler ) { return 0; }
 static GLuint64 null_glGetTextureSamplerHandleNV( GLuint texture, GLuint sampler ) { return 0; }
+static void null_glGetTextureSubImage( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels ) { }
 static void null_glGetTrackMatrixivNV( GLenum target, GLuint address, GLenum pname, GLint* params ) { }
 static void null_glGetTransformFeedbackVarying( GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name ) { }
 static void null_glGetTransformFeedbackVaryingEXT( GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name ) { }
 static void null_glGetTransformFeedbackVaryingNV( GLuint program, GLuint index, GLint* location ) { }
+static void null_glGetTransformFeedbacki64_v( GLuint xfb, GLenum pname, GLuint index, GLint64* param ) { }
+static void null_glGetTransformFeedbacki_v( GLuint xfb, GLenum pname, GLuint index, GLint* param ) { }
+static void null_glGetTransformFeedbackiv( GLuint xfb, GLenum pname, GLint* param ) { }
 static GLuint null_glGetUniformBlockIndex( GLuint program, const GLchar* uniformBlockName ) { return 0; }
 static GLint null_glGetUniformBufferSizeEXT( GLuint program, GLint location ) { return 0; }
 static void null_glGetUniformIndices( GLuint program, GLsizei uniformCount, const GLchar*const* uniformNames, GLuint* uniformIndices ) { }
@@ -4195,10 +4269,13 @@ static void null_glGetVariantFloatvEXT( GLuint id, GLenum value, GLfloat* data )
 static void null_glGetVariantIntegervEXT( GLuint id, GLenum value, GLint* data ) { }
 static void null_glGetVariantPointervEXT( GLuint id, GLenum value, void** data ) { }
 static GLint null_glGetVaryingLocationNV( GLuint program, const GLchar* name ) { return 0; }
+static void null_glGetVertexArrayIndexed64iv( GLuint vaobj, GLuint index, GLenum pname, GLint64* param ) { }
+static void null_glGetVertexArrayIndexediv( GLuint vaobj, GLuint index, GLenum pname, GLint* param ) { }
 static void null_glGetVertexArrayIntegeri_vEXT( GLuint vaobj, GLuint index, GLenum pname, GLint* param ) { }
 static void null_glGetVertexArrayIntegervEXT( GLuint vaobj, GLenum pname, GLint* param ) { }
 static void null_glGetVertexArrayPointeri_vEXT( GLuint vaobj, GLuint index, GLenum pname, void** param ) { }
 static void null_glGetVertexArrayPointervEXT( GLuint vaobj, GLenum pname, void** param ) { }
+static void null_glGetVertexArrayiv( GLuint vaobj, GLenum pname, GLint* param ) { }
 static void null_glGetVertexAttribArrayObjectfvATI( GLuint index, GLenum pname, GLfloat* params ) { }
 static void null_glGetVertexAttribArrayObjectivATI( GLuint index, GLenum pname, GLint* params ) { }
 static void null_glGetVertexAttribIiv( GLuint index, GLenum pname, GLint* params ) { }
@@ -4230,23 +4307,41 @@ static void null_glGetVideoi64vNV( GLuint video_slot, GLenum pname, GLint64EXT*
 static void null_glGetVideoivNV( GLuint video_slot, GLenum pname, GLint* params ) { }
 static void null_glGetVideoui64vNV( GLuint video_slot, GLenum pname, GLuint64EXT* params ) { }
 static void null_glGetVideouivNV( GLuint video_slot, GLenum pname, GLuint* params ) { }
+static void null_glGetnColorTable( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table ) { }
 static void null_glGetnColorTableARB( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table ) { }
+static void null_glGetnCompressedTexImage( GLenum target, GLint lod, GLsizei bufSize, void* pixels ) { }
 static void null_glGetnCompressedTexImageARB( GLenum target, GLint lod, GLsizei bufSize, void* img ) { }
+static void null_glGetnConvolutionFilter( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image ) { }
 static void null_glGetnConvolutionFilterARB( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image ) { }
+static void null_glGetnHistogram( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values ) { }
 static void null_glGetnHistogramARB( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values ) { }
+static void null_glGetnMapdv( GLenum target, GLenum query, GLsizei bufSize, GLdouble* v ) { }
 static void null_glGetnMapdvARB( GLenum target, GLenum query, GLsizei bufSize, GLdouble* v ) { }
+static void null_glGetnMapfv( GLenum target, GLenum query, GLsizei bufSize, GLfloat* v ) { }
 static void null_glGetnMapfvARB( GLenum target, GLenum query, GLsizei bufSize, GLfloat* v ) { }
+static void null_glGetnMapiv( GLenum target, GLenum query, GLsizei bufSize, GLint* v ) { }
 static void null_glGetnMapivARB( GLenum target, GLenum query, GLsizei bufSize, GLint* v ) { }
+static void null_glGetnMinmax( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values ) { }
 static void null_glGetnMinmaxARB( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values ) { }
+static void null_glGetnPixelMapfv( GLenum map, GLsizei bufSize, GLfloat* values ) { }
 static void null_glGetnPixelMapfvARB( GLenum map, GLsizei bufSize, GLfloat* values ) { }
+static void null_glGetnPixelMapuiv( GLenum map, GLsizei bufSize, GLuint* values ) { }
 static void null_glGetnPixelMapuivARB( GLenum map, GLsizei bufSize, GLuint* values ) { }
+static void null_glGetnPixelMapusv( GLenum map, GLsizei bufSize, GLushort* values ) { }
 static void null_glGetnPixelMapusvARB( GLenum map, GLsizei bufSize, GLushort* values ) { }
+static void null_glGetnPolygonStipple( GLsizei bufSize, GLubyte* pattern ) { }
 static void null_glGetnPolygonStippleARB( GLsizei bufSize, GLubyte* pattern ) { }
+static void null_glGetnSeparableFilter( GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span ) { }
 static void null_glGetnSeparableFilterARB( GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span ) { }
+static void null_glGetnTexImage( GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels ) { }
 static void null_glGetnTexImageARB( GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img ) { }
+static void null_glGetnUniformdv( GLuint program, GLint location, GLsizei bufSize, GLdouble* params ) { }
 static void null_glGetnUniformdvARB( GLuint program, GLint location, GLsizei bufSize, GLdouble* params ) { }
+static void null_glGetnUniformfv( GLuint program, GLint location, GLsizei bufSize, GLfloat* params ) { }
 static void null_glGetnUniformfvARB( GLuint program, GLint location, GLsizei bufSize, GLfloat* params ) { }
+static void null_glGetnUniformiv( GLuint program, GLint location, GLsizei bufSize, GLint* params ) { }
 static void null_glGetnUniformivARB( GLuint program, GLint location, GLsizei bufSize, GLint* params ) { }
+static void null_glGetnUniformuiv( GLuint program, GLint location, GLsizei bufSize, GLuint* params ) { }
 static void null_glGetnUniformuivARB( GLuint program, GLint location, GLsizei bufSize, GLuint* params ) { }
 static void null_glGlobalAlphaFactorbSUN( GLbyte factor ) { }
 static void null_glGlobalAlphaFactordSUN( GLdouble factor ) { }
@@ -4279,6 +4374,8 @@ static void null_glInterpolatePathsNV( GLuint resultPath, GLuint pathA, GLuint p
 static void null_glInvalidateBufferData( GLuint buffer ) { }
 static void null_glInvalidateBufferSubData( GLuint buffer, GLintptr offset, GLsizeiptr length ) { }
 static void null_glInvalidateFramebuffer( GLenum target, GLsizei numAttachments, const GLenum* attachments ) { }
+static void null_glInvalidateNamedFramebufferData( GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments ) { }
+static void null_glInvalidateNamedFramebufferSubData( GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height ) { }
 static void null_glInvalidateSubFramebuffer( GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height ) { }
 static void null_glInvalidateTexImage( GLuint texture, GLint level ) { }
 static void null_glInvalidateTexSubImage( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth ) { }
@@ -4366,7 +4463,9 @@ static void* null_glMapBufferRange( GLenum target, GLintptr offset, GLsizeiptr l
 static void null_glMapControlPointsNV( GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void* points ) { }
 static void null_glMapGrid1xOES( GLint n, GLfixed u1, GLfixed u2 ) { }
 static void null_glMapGrid2xOES( GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2 ) { }
+static void* null_glMapNamedBuffer( GLuint buffer, GLenum access ) { return 0; }
 static void* null_glMapNamedBufferEXT( GLuint buffer, GLenum access ) { return 0; }
+static void* null_glMapNamedBufferRange( GLuint buffer, GLintptr offset, GLsizei length, GLbitfield access ) { return 0; }
 static void* null_glMapNamedBufferRangeEXT( GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access ) { return 0; }
 static void* null_glMapObjectBufferATI( GLuint buffer ) { return 0; }
 static void null_glMapParameterfvNV( GLenum target, GLenum pname, const GLfloat* params ) { }
@@ -4383,11 +4482,17 @@ static void null_glMatrixIndexPointerARB( GLint size, GLenum type, GLsizei strid
 static void null_glMatrixIndexubvARB( GLint size, const GLubyte* indices ) { }
 static void null_glMatrixIndexuivARB( GLint size, const GLuint* indices ) { }
 static void null_glMatrixIndexusvARB( GLint size, const GLushort* indices ) { }
+static void null_glMatrixLoad3x2fNV( GLenum matrixMode, const GLfloat* m ) { }
+static void null_glMatrixLoad3x3fNV( GLenum matrixMode, const GLfloat* m ) { }
 static void null_glMatrixLoadIdentityEXT( GLenum mode ) { }
+static void null_glMatrixLoadTranspose3x3fNV( GLenum matrixMode, const GLfloat* m ) { }
 static void null_glMatrixLoadTransposedEXT( GLenum mode, const GLdouble* m ) { }
 static void null_glMatrixLoadTransposefEXT( GLenum mode, const GLfloat* m ) { }
 static void null_glMatrixLoaddEXT( GLenum mode, const GLdouble* m ) { }
 static void null_glMatrixLoadfEXT( GLenum mode, const GLfloat* m ) { }
+static void null_glMatrixMult3x2fNV( GLenum matrixMode, const GLfloat* m ) { }
+static void null_glMatrixMult3x3fNV( GLenum matrixMode, const GLfloat* m ) { }
+static void null_glMatrixMultTranspose3x3fNV( GLenum matrixMode, const GLfloat* m ) { }
 static void null_glMatrixMultTransposedEXT( GLenum mode, const GLdouble* m ) { }
 static void null_glMatrixMultTransposefEXT( GLenum mode, const GLfloat* m ) { }
 static void null_glMatrixMultdEXT( GLenum mode, const GLdouble* m ) { }
@@ -4402,6 +4507,7 @@ static void null_glMatrixScalefEXT( GLenum mode, GLfloat x, GLfloat y, GLfloat z
 static void null_glMatrixTranslatedEXT( GLenum mode, GLdouble x, GLdouble y, GLdouble z ) { }
 static void null_glMatrixTranslatefEXT( GLenum mode, GLfloat x, GLfloat y, GLfloat z ) { }
 static void null_glMemoryBarrier( GLbitfield barriers ) { }
+static void null_glMemoryBarrierByRegion( GLbitfield barriers ) { }
 static void null_glMemoryBarrierEXT( GLbitfield barriers ) { }
 static void null_glMinSampleShading( GLfloat value ) { }
 static void null_glMinSampleShadingARB( GLfloat value ) { }
@@ -4417,6 +4523,7 @@ static void null_glMultiDrawArrays( GLenum mode, const GLint* first, const GLsiz
 static void null_glMultiDrawArraysEXT( GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount ) { }
 static void null_glMultiDrawArraysIndirect( GLenum mode, const void* indirect, GLsizei drawcount, GLsizei stride ) { }
 static void null_glMultiDrawArraysIndirectAMD( GLenum mode, const void* indirect, GLsizei primcount, GLsizei stride ) { }
+static void null_glMultiDrawArraysIndirectBindlessCountNV( GLenum mode, const void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount ) { }
 static void null_glMultiDrawArraysIndirectBindlessNV( GLenum mode, const void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount ) { }
 static void null_glMultiDrawArraysIndirectCountARB( GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride ) { }
 static void null_glMultiDrawElementArrayAPPLE( GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount ) { }
@@ -4425,6 +4532,7 @@ static void null_glMultiDrawElementsBaseVertex( GLenum mode, const GLsizei* coun
 static void null_glMultiDrawElementsEXT( GLenum mode, const GLsizei* count, GLenum type, const void*const* indices, GLsizei primcount ) { }
 static void null_glMultiDrawElementsIndirect( GLenum mode, GLenum type, const void* indirect, GLsizei drawcount, GLsizei stride ) { }
 static void null_glMultiDrawElementsIndirectAMD( GLenum mode, GLenum type, const void* indirect, GLsizei primcount, GLsizei stride ) { }
+static void null_glMultiDrawElementsIndirectBindlessCountNV( GLenum mode, GLenum type, const void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount ) { }
 static void null_glMultiDrawElementsIndirectBindlessNV( GLenum mode, GLenum type, const void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount ) { }
 static void null_glMultiDrawElementsIndirectCountARB( GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride ) { }
 static void null_glMultiDrawRangeElementArrayAPPLE( GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount ) { }
@@ -4584,17 +4692,30 @@ static void null_glMultiTexRenderbufferEXT( GLenum texunit, GLenum target, GLuin
 static void null_glMultiTexSubImage1DEXT( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels ) { }
 static void null_glMultiTexSubImage2DEXT( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels ) { }
 static void null_glMultiTexSubImage3DEXT( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels ) { }
+static void null_glNamedBufferData( GLuint buffer, GLsizei size, const void* data, GLenum usage ) { }
 static void null_glNamedBufferDataEXT( GLuint buffer, GLsizeiptr size, const void* data, GLenum usage ) { }
+static void null_glNamedBufferPageCommitmentARB( GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit ) { }
+static void null_glNamedBufferPageCommitmentEXT( GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit ) { }
+static void null_glNamedBufferStorage( GLuint buffer, GLsizei size, const void* data, GLbitfield flags ) { }
 static void null_glNamedBufferStorageEXT( GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags ) { }
+static void null_glNamedBufferSubData( GLuint buffer, GLintptr offset, GLsizei size, const void* data ) { }
 static void null_glNamedBufferSubDataEXT( GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data ) { }
 static void null_glNamedCopyBufferSubDataEXT( GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size ) { }
+static void null_glNamedFramebufferDrawBuffer( GLuint framebuffer, GLenum buf ) { }
+static void null_glNamedFramebufferDrawBuffers( GLuint framebuffer, GLsizei n, const GLenum* bufs ) { }
+static void null_glNamedFramebufferParameteri( GLuint framebuffer, GLenum pname, GLint param ) { }
 static void null_glNamedFramebufferParameteriEXT( GLuint framebuffer, GLenum pname, GLint param ) { }
+static void null_glNamedFramebufferReadBuffer( GLuint framebuffer, GLenum src ) { }
+static void null_glNamedFramebufferRenderbuffer( GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer ) { }
 static void null_glNamedFramebufferRenderbufferEXT( GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer ) { }
+static void null_glNamedFramebufferSampleLocationsfvNV( GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v ) { }
+static void null_glNamedFramebufferTexture( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level ) { }
 static void null_glNamedFramebufferTexture1DEXT( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level ) { }
 static void null_glNamedFramebufferTexture2DEXT( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level ) { }
 static void null_glNamedFramebufferTexture3DEXT( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset ) { }
 static void null_glNamedFramebufferTextureEXT( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level ) { }
 static void null_glNamedFramebufferTextureFaceEXT( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face ) { }
+static void null_glNamedFramebufferTextureLayer( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer ) { }
 static void null_glNamedFramebufferTextureLayerEXT( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer ) { }
 static void null_glNamedProgramLocalParameter4dEXT( GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w ) { }
 static void null_glNamedProgramLocalParameter4dvEXT( GLuint program, GLenum target, GLuint index, const GLdouble* params ) { }
@@ -4608,7 +4729,9 @@ static void null_glNamedProgramLocalParameters4fvEXT( GLuint program, GLenum tar
 static void null_glNamedProgramLocalParametersI4ivEXT( GLuint program, GLenum target, GLuint index, GLsizei count, const GLint* params ) { }
 static void null_glNamedProgramLocalParametersI4uivEXT( GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint* params ) { }
 static void null_glNamedProgramStringEXT( GLuint program, GLenum target, GLenum format, GLsizei len, const void* string ) { }
+static void null_glNamedRenderbufferStorage( GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height ) { }
 static void null_glNamedRenderbufferStorageEXT( GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height ) { }
+static void null_glNamedRenderbufferStorageMultisample( GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height ) { }
 static void null_glNamedRenderbufferStorageMultisampleCoverageEXT( GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height ) { }
 static void null_glNamedRenderbufferStorageMultisampleEXT( GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height ) { }
 static void null_glNamedStringARB( GLenum type, GLint namelen, const GLchar* name, GLint stringlen, const GLchar* string ) { }
@@ -4654,8 +4777,11 @@ static void null_glPathCoordsNV( GLuint path, GLsizei numCoords, GLenum coordTyp
 static void null_glPathCoverDepthFuncNV( GLenum func ) { }
 static void null_glPathDashArrayNV( GLuint path, GLsizei dashCount, const GLfloat* dashArray ) { }
 static void null_glPathFogGenNV( GLenum genMode ) { }
+static GLenum null_glPathGlyphIndexArrayNV( GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale ) { return 0; }
+static GLenum null_glPathGlyphIndexRangeNV( GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2] ) { return 0; }
 static void null_glPathGlyphRangeNV( GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale ) { }
 static void null_glPathGlyphsNV( GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void* charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale ) { }
+static GLenum null_glPathMemoryGlyphIndexArrayNV( GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void* fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale ) { return 0; }
 static void null_glPathParameterfNV( GLuint path, GLenum pname, GLfloat value ) { }
 static void null_glPathParameterfvNV( GLuint path, GLenum pname, const GLfloat* value ) { }
 static void null_glPathParameteriNV( GLuint path, GLenum pname, GLint value ) { }
@@ -4699,6 +4825,7 @@ static void null_glPointParameterxvOES( GLenum pname, const GLfixed* params ) {
 static void null_glPointSizexOES( GLfixed size ) { }
 static GLint null_glPollAsyncSGIX( GLuint* markerp ) { return 0; }
 static GLint null_glPollInstrumentsSGIX( GLint* marker_p ) { return 0; }
+static void null_glPolygonOffsetClampEXT( GLfloat factor, GLfloat units, GLfloat clamp ) { }
 static void null_glPolygonOffsetEXT( GLfloat factor, GLfloat bias ) { }
 static void null_glPolygonOffsetxOES( GLfixed factor, GLfixed units ) { }
 static void null_glPopDebugGroup( void ) { }
@@ -4749,6 +4876,7 @@ static void null_glProgramParameteriARB( GLuint program, GLenum pname, GLint val
 static void null_glProgramParameteriEXT( GLuint program, GLenum pname, GLint value ) { }
 static void null_glProgramParameters4dvNV( GLenum target, GLuint index, GLsizei count, const GLdouble* v ) { }
 static void null_glProgramParameters4fvNV( GLenum target, GLuint index, GLsizei count, const GLfloat* v ) { }
+static void null_glProgramPathFragmentInputGenNV( GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat* coeffs ) { }
 static void null_glProgramStringARB( GLenum target, GLenum format, GLsizei len, const void* string ) { }
 static void null_glProgramSubroutineParametersuivNV( GLenum target, GLsizei count, const GLuint* params ) { }
 static void null_glProgramUniform1d( GLuint program, GLint location, GLdouble v0 ) { }
@@ -4881,14 +5009,17 @@ static void null_glPushDebugGroup( GLenum source, GLuint id, GLsizei length, con
 static void null_glPushGroupMarkerEXT( GLsizei length, const GLchar* marker ) { }
 static void null_glQueryCounter( GLuint id, GLenum target ) { }
 static GLbitfield null_glQueryMatrixxOES( GLfixed* mantissa, GLint* exponent ) { return 0; }
+static void null_glQueryObjectParameteruiAMD( GLenum target, GLuint id, GLenum pname, GLuint param ) { }
 static void null_glRasterPos2xOES( GLfixed x, GLfixed y ) { }
 static void null_glRasterPos2xvOES( const GLfixed* coords ) { }
 static void null_glRasterPos3xOES( GLfixed x, GLfixed y, GLfixed z ) { }
 static void null_glRasterPos3xvOES( const GLfixed* coords ) { }
 static void null_glRasterPos4xOES( GLfixed x, GLfixed y, GLfixed z, GLfixed w ) { }
 static void null_glRasterPos4xvOES( const GLfixed* coords ) { }
+static void null_glRasterSamplesEXT( GLuint samples, GLboolean fixedsamplelocations ) { }
 static void null_glReadBufferRegion( GLenum region, GLint x, GLint y, GLsizei width, GLsizei height ) { }
 static void null_glReadInstrumentsSGIX( GLint marker ) { }
+static void null_glReadnPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data ) { }
 static void null_glReadnPixelsARB( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data ) { }
 static void null_glRectxOES( GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2 ) { }
 static void null_glRectxvOES( const GLfixed* v1, const GLfixed* v2 ) { }
@@ -4928,6 +5059,7 @@ static void null_glResetHistogramEXT( GLenum target ) { }
 static void null_glResetMinmax( GLenum target ) { }
 static void null_glResetMinmaxEXT( GLenum target ) { }
 static void null_glResizeBuffersMESA( void ) { }
+static void null_glResolveDepthValuesNV( void ) { }
 static void null_glResumeTransformFeedback( void ) { }
 static void null_glResumeTransformFeedbackNV( void ) { }
 static void null_glRotatexOES( GLfixed angle, GLfixed x, GLfixed y, GLfixed z ) { }
@@ -4938,7 +5070,7 @@ static void null_glSampleMapATI( GLuint dst, GLuint interp, GLenum swizzle ) { }
 static void null_glSampleMaskEXT( GLclampf value, GLboolean invert ) { }
 static void null_glSampleMaskIndexedNV( GLuint index, GLbitfield mask ) { }
 static void null_glSampleMaskSGIS( GLclampf value, GLboolean invert ) { }
-static void null_glSampleMaski( GLuint index, GLbitfield mask ) { }
+static void null_glSampleMaski( GLuint maskNumber, GLbitfield mask ) { }
 static void null_glSamplePatternEXT( GLenum pattern ) { }
 static void null_glSamplePatternSGIS( GLenum pattern ) { }
 static void null_glSamplerParameterIiv( GLuint sampler, GLenum pname, const GLint* param ) { }
@@ -5026,8 +5158,13 @@ static void null_glStencilOpSeparateATI( GLenum face, GLenum sfail, GLenum dpfai
 static void null_glStencilOpValueAMD( GLenum face, GLuint value ) { }
 static void null_glStencilStrokePathInstancedNV( GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat* transformValues ) { }
 static void null_glStencilStrokePathNV( GLuint path, GLint reference, GLuint mask ) { }
+static void null_glStencilThenCoverFillPathInstancedNV( GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat* transformValues ) { }
+static void null_glStencilThenCoverFillPathNV( GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode ) { }
+static void null_glStencilThenCoverStrokePathInstancedNV( GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat* transformValues ) { }
+static void null_glStencilThenCoverStrokePathNV( GLuint path, GLint reference, GLuint mask, GLenum coverMode ) { }
 static void null_glStopInstrumentsSGIX( GLint marker ) { }
 static void null_glStringMarkerGREMEDY( GLsizei len, const void* string ) { }
+static void null_glSubpixelPrecisionBiasNV( GLuint xbits, GLuint ybits ) { }
 static void null_glSwizzleEXT( GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW ) { }
 static void null_glSyncTextureINTEL( GLuint texture ) { }
 static void null_glTagSampleBufferSGIX( void ) { }
@@ -5135,8 +5272,11 @@ static void null_glTexSubImage2DEXT( GLenum target, GLint level, GLint xoffset,
 static void null_glTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels ) { }
 static void null_glTexSubImage3DEXT( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels ) { }
 static void null_glTexSubImage4DSGIS( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void* pixels ) { }
+static void null_glTextureBarrier( void ) { }
 static void null_glTextureBarrierNV( void ) { }
+static void null_glTextureBuffer( GLuint texture, GLenum internalformat, GLuint buffer ) { }
 static void null_glTextureBufferEXT( GLuint texture, GLenum target, GLenum internalformat, GLuint buffer ) { }
+static void null_glTextureBufferRange( GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizei size ) { }
 static void null_glTextureBufferRangeEXT( GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size ) { }
 static void null_glTextureColorMaskSGIS( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha ) { }
 static void null_glTextureImage1DEXT( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels ) { }
@@ -5150,26 +5290,42 @@ static void null_glTextureLightEXT( GLenum pname ) { }
 static void null_glTextureMaterialEXT( GLenum face, GLenum mode ) { }
 static void null_glTextureNormalEXT( GLenum mode ) { }
 static void null_glTexturePageCommitmentEXT( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident ) { }
+static void null_glTextureParameterIiv( GLuint texture, GLenum pname, const GLint* params ) { }
 static void null_glTextureParameterIivEXT( GLuint texture, GLenum target, GLenum pname, const GLint* params ) { }
+static void null_glTextureParameterIuiv( GLuint texture, GLenum pname, const GLuint* params ) { }
 static void null_glTextureParameterIuivEXT( GLuint texture, GLenum target, GLenum pname, const GLuint* params ) { }
+static void null_glTextureParameterf( GLuint texture, GLenum pname, GLfloat param ) { }
 static void null_glTextureParameterfEXT( GLuint texture, GLenum target, GLenum pname, GLfloat param ) { }
+static void null_glTextureParameterfv( GLuint texture, GLenum pname, const GLfloat* param ) { }
 static void null_glTextureParameterfvEXT( GLuint texture, GLenum target, GLenum pname, const GLfloat* params ) { }
+static void null_glTextureParameteri( GLuint texture, GLenum pname, GLint param ) { }
 static void null_glTextureParameteriEXT( GLuint texture, GLenum target, GLenum pname, GLint param ) { }
+static void null_glTextureParameteriv( GLuint texture, GLenum pname, const GLint* param ) { }
 static void null_glTextureParameterivEXT( GLuint texture, GLenum target, GLenum pname, const GLint* params ) { }
 static void null_glTextureRangeAPPLE( GLenum target, GLsizei length, const void* pointer ) { }
 static void null_glTextureRenderbufferEXT( GLuint texture, GLenum target, GLuint renderbuffer ) { }
+static void null_glTextureStorage1D( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width ) { }
 static void null_glTextureStorage1DEXT( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width ) { }
+static void null_glTextureStorage2D( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height ) { }
 static void null_glTextureStorage2DEXT( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height ) { }
+static void null_glTextureStorage2DMultisample( GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations ) { }
 static void null_glTextureStorage2DMultisampleEXT( GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations ) { }
+static void null_glTextureStorage3D( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth ) { }
 static void null_glTextureStorage3DEXT( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth ) { }
+static void null_glTextureStorage3DMultisample( GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations ) { }
 static void null_glTextureStorage3DMultisampleEXT( GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations ) { }
 static void null_glTextureStorageSparseAMD( GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags ) { }
+static void null_glTextureSubImage1D( GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels ) { }
 static void null_glTextureSubImage1DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels ) { }
+static void null_glTextureSubImage2D( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels ) { }
 static void null_glTextureSubImage2DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels ) { }
+static void null_glTextureSubImage3D( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels ) { }
 static void null_glTextureSubImage3DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels ) { }
 static void null_glTextureView( GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers ) { }
 static void null_glTrackMatrixNV( GLenum target, GLuint address, GLenum matrix, GLenum transform ) { }
-static void null_glTransformFeedbackAttribsNV( GLuint count, const GLint* attribs, GLenum bufferMode ) { }
+static void null_glTransformFeedbackAttribsNV( GLsizei count, const GLint* attribs, GLenum bufferMode ) { }
+static void null_glTransformFeedbackBufferBase( GLuint xfb, GLuint index, GLuint buffer ) { }
+static void null_glTransformFeedbackBufferRange( GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizei size ) { }
 static void null_glTransformFeedbackStreamAttribsNV( GLsizei count, const GLint* attribs, GLsizei nbuffers, const GLint* bufstreams, GLenum bufferMode ) { }
 static void null_glTransformFeedbackVaryings( GLuint program, GLsizei count, const GLchar*const* varyings, GLenum bufferMode ) { }
 static void null_glTransformFeedbackVaryingsEXT( GLuint program, GLsizei count, const GLchar*const* varyings, GLenum bufferMode ) { }
@@ -5281,6 +5437,7 @@ static void null_glUniformui64vNV( GLint location, GLsizei count, const GLuint64
 static void null_glUnlockArraysEXT( void ) { }
 static GLboolean null_glUnmapBuffer( GLenum target ) { return 0; }
 static GLboolean null_glUnmapBufferARB( GLenum target ) { return 0; }
+static GLboolean null_glUnmapNamedBuffer( GLuint buffer ) { return 0; }
 static GLboolean null_glUnmapNamedBufferEXT( GLuint buffer ) { return 0; }
 static void null_glUnmapObjectBufferATI( GLuint buffer ) { }
 static void null_glUnmapTexture2DINTEL( GLuint texture, GLint level ) { }
@@ -5292,7 +5449,7 @@ static void null_glUseShaderProgramEXT( GLenum type, GLuint program ) { }
 static void null_glVDPAUFiniNV( void ) { }
 static void null_glVDPAUGetSurfaceivNV( GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values ) { }
 static void null_glVDPAUInitNV( const void* vdpDevice, const void* getProcAddress ) { }
-static void null_glVDPAUIsSurfaceNV( GLvdpauSurfaceNV surface ) { }
+static GLboolean null_glVDPAUIsSurfaceNV( GLvdpauSurfaceNV surface ) { return 0; }
 static void null_glVDPAUMapSurfacesNV( GLsizei numSurfaces, const GLvdpauSurfaceNV* surfaces ) { }
 static GLvdpauSurfaceNV null_glVDPAURegisterOutputSurfaceNV( const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames ) { return 0; }
 static GLvdpauSurfaceNV null_glVDPAURegisterVideoSurfaceNV( const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames ) { return 0; }
@@ -5312,27 +5469,33 @@ static void null_glVariantsvEXT( GLuint id, const GLshort* addr ) { }
 static void null_glVariantubvEXT( GLuint id, const GLubyte* addr ) { }
 static void null_glVariantuivEXT( GLuint id, const GLuint* addr ) { }
 static void null_glVariantusvEXT( GLuint id, const GLushort* addr ) { }
-static void null_glVertex2bOES( GLbyte x ) { }
+static void null_glVertex2bOES( GLbyte x, GLbyte y ) { }
 static void null_glVertex2bvOES( const GLbyte* coords ) { }
 static void null_glVertex2hNV( GLhalfNV x, GLhalfNV y ) { }
 static void null_glVertex2hvNV( const GLhalfNV* v ) { }
 static void null_glVertex2xOES( GLfixed x ) { }
 static void null_glVertex2xvOES( const GLfixed* coords ) { }
-static void null_glVertex3bOES( GLbyte x, GLbyte y ) { }
+static void null_glVertex3bOES( GLbyte x, GLbyte y, GLbyte z ) { }
 static void null_glVertex3bvOES( const GLbyte* coords ) { }
 static void null_glVertex3hNV( GLhalfNV x, GLhalfNV y, GLhalfNV z ) { }
 static void null_glVertex3hvNV( const GLhalfNV* v ) { }
 static void null_glVertex3xOES( GLfixed x, GLfixed y ) { }
 static void null_glVertex3xvOES( const GLfixed* coords ) { }
-static void null_glVertex4bOES( GLbyte x, GLbyte y, GLbyte z ) { }
+static void null_glVertex4bOES( GLbyte x, GLbyte y, GLbyte z, GLbyte w ) { }
 static void null_glVertex4bvOES( const GLbyte* coords ) { }
 static void null_glVertex4hNV( GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w ) { }
 static void null_glVertex4hvNV( const GLhalfNV* v ) { }
 static void null_glVertex4xOES( GLfixed x, GLfixed y, GLfixed z ) { }
 static void null_glVertex4xvOES( const GLfixed* coords ) { }
+static void null_glVertexArrayAttribBinding( GLuint vaobj, GLuint attribindex, GLuint bindingindex ) { }
+static void null_glVertexArrayAttribFormat( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset ) { }
+static void null_glVertexArrayAttribIFormat( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset ) { }
+static void null_glVertexArrayAttribLFormat( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset ) { }
 static void null_glVertexArrayBindVertexBufferEXT( GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride ) { }
+static void null_glVertexArrayBindingDivisor( GLuint vaobj, GLuint bindingindex, GLuint divisor ) { }
 static void null_glVertexArrayColorOffsetEXT( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset ) { }
 static void null_glVertexArrayEdgeFlagOffsetEXT( GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset ) { }
+static void null_glVertexArrayElementBuffer( GLuint vaobj, GLuint buffer ) { }
 static void null_glVertexArrayFogCoordOffsetEXT( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset ) { }
 static void null_glVertexArrayIndexOffsetEXT( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset ) { }
 static void null_glVertexArrayMultiTexCoordOffsetEXT( GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset ) { }
@@ -5351,6 +5514,8 @@ static void null_glVertexArrayVertexAttribLFormatEXT( GLuint vaobj, GLuint attri
 static void null_glVertexArrayVertexAttribLOffsetEXT( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset ) { }
 static void null_glVertexArrayVertexAttribOffsetEXT( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset ) { }
 static void null_glVertexArrayVertexBindingDivisorEXT( GLuint vaobj, GLuint bindingindex, GLuint divisor ) { }
+static void null_glVertexArrayVertexBuffer( GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride ) { }
+static void null_glVertexArrayVertexBuffers( GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides ) { }
 static void null_glVertexArrayVertexOffsetEXT( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset ) { }
 static void null_glVertexAttrib1d( GLuint index, GLdouble x ) { }
 static void null_glVertexAttrib1dARB( GLuint index, GLdouble x ) { }
@@ -6101,6 +6266,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glBeginFragmentShaderATI,
         null_glBeginOcclusionQueryNV,
         null_glBeginPerfMonitorAMD,
+        null_glBeginPerfQueryINTEL,
         null_glBeginQuery,
         null_glBeginQueryARB,
         null_glBeginQueryIndexed,
@@ -6145,6 +6311,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glBindSamplers,
         null_glBindTexGenParameterEXT,
         null_glBindTextureEXT,
+        null_glBindTextureUnit,
         null_glBindTextureUnitParameterEXT,
         null_glBindTextures,
         null_glBindTransformFeedback,
@@ -6168,6 +6335,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glBinormal3svEXT,
         null_glBinormalPointerEXT,
         null_glBitmapxOES,
+        null_glBlendBarrierKHR,
         null_glBlendBarrierNV,
         null_glBlendColor,
         null_glBlendColorEXT,
@@ -6194,9 +6362,11 @@ struct opengl_funcs null_opengl_funcs =
         null_glBlendParameteriNV,
         null_glBlitFramebuffer,
         null_glBlitFramebufferEXT,
+        null_glBlitNamedFramebuffer,
         null_glBufferAddressRangeNV,
         null_glBufferData,
         null_glBufferDataARB,
+        null_glBufferPageCommitmentARB,
         null_glBufferParameteriAPPLE,
         null_glBufferRegionEnabled,
         null_glBufferStorage,
@@ -6204,6 +6374,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glBufferSubDataARB,
         null_glCheckFramebufferStatus,
         null_glCheckFramebufferStatusEXT,
+        null_glCheckNamedFramebufferStatus,
         null_glCheckNamedFramebufferStatusEXT,
         null_glClampColor,
         null_glClampColorARB,
@@ -6221,8 +6392,14 @@ struct opengl_funcs null_opengl_funcs =
         null_glClearDepthf,
         null_glClearDepthfOES,
         null_glClearDepthxOES,
+        null_glClearNamedBufferData,
         null_glClearNamedBufferDataEXT,
+        null_glClearNamedBufferSubData,
         null_glClearNamedBufferSubDataEXT,
+        null_glClearNamedFramebufferfi,
+        null_glClearNamedFramebufferfv,
+        null_glClearNamedFramebufferiv,
+        null_glClearNamedFramebufferuiv,
         null_glClearTexImage,
         null_glClearTexSubImage,
         null_glClientActiveTexture,
@@ -6230,6 +6407,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glClientActiveVertexStreamATI,
         null_glClientAttribDefaultEXT,
         null_glClientWaitSync,
+        null_glClipControl,
         null_glClipPlanefOES,
         null_glClipPlanexOES,
         null_glColor3fVertex3fSUN,
@@ -6301,8 +6479,11 @@ struct opengl_funcs null_opengl_funcs =
         null_glCompressedTextureImage1DEXT,
         null_glCompressedTextureImage2DEXT,
         null_glCompressedTextureImage3DEXT,
+        null_glCompressedTextureSubImage1D,
         null_glCompressedTextureSubImage1DEXT,
+        null_glCompressedTextureSubImage2D,
         null_glCompressedTextureSubImage2DEXT,
+        null_glCompressedTextureSubImage3D,
         null_glCompressedTextureSubImage3DEXT,
         null_glConvolutionFilter1D,
         null_glConvolutionFilter1DEXT,
@@ -6334,6 +6515,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glCopyMultiTexSubImage1DEXT,
         null_glCopyMultiTexSubImage2DEXT,
         null_glCopyMultiTexSubImage3DEXT,
+        null_glCopyNamedBufferSubData,
         null_glCopyPathNV,
         null_glCopyTexImage1DEXT,
         null_glCopyTexImage2DEXT,
@@ -6343,20 +6525,35 @@ struct opengl_funcs null_opengl_funcs =
         null_glCopyTexSubImage3DEXT,
         null_glCopyTextureImage1DEXT,
         null_glCopyTextureImage2DEXT,
+        null_glCopyTextureSubImage1D,
         null_glCopyTextureSubImage1DEXT,
+        null_glCopyTextureSubImage2D,
         null_glCopyTextureSubImage2DEXT,
+        null_glCopyTextureSubImage3D,
         null_glCopyTextureSubImage3DEXT,
         null_glCoverFillPathInstancedNV,
         null_glCoverFillPathNV,
         null_glCoverStrokePathInstancedNV,
         null_glCoverStrokePathNV,
+        null_glCoverageModulationNV,
+        null_glCoverageModulationTableNV,
+        null_glCreateBuffers,
+        null_glCreateFramebuffers,
+        null_glCreatePerfQueryINTEL,
         null_glCreateProgram,
         null_glCreateProgramObjectARB,
+        null_glCreateProgramPipelines,
+        null_glCreateQueries,
+        null_glCreateRenderbuffers,
+        null_glCreateSamplers,
         null_glCreateShader,
         null_glCreateShaderObjectARB,
         null_glCreateShaderProgramEXT,
         null_glCreateShaderProgramv,
         null_glCreateSyncFromCLeventARB,
+        null_glCreateTextures,
+        null_glCreateTransformFeedbacks,
+        null_glCreateVertexArrays,
         null_glCullParameterdvEXT,
         null_glCullParameterfvEXT,
         null_glCurrentPaletteMatrixARB,
@@ -6388,6 +6585,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glDeleteOcclusionQueriesNV,
         null_glDeletePathsNV,
         null_glDeletePerfMonitorsAMD,
+        null_glDeletePerfQueryINTEL,
         null_glDeleteProgram,
         null_glDeleteProgramPipelines,
         null_glDeleteProgramsARB,
@@ -6420,6 +6618,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glDisableClientStateiEXT,
         null_glDisableIndexedEXT,
         null_glDisableVariantClientStateEXT,
+        null_glDisableVertexArrayAttrib,
         null_glDisableVertexArrayAttribEXT,
         null_glDisableVertexArrayEXT,
         null_glDisableVertexAttribAPPLE,
@@ -6470,6 +6669,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glEnableClientStateiEXT,
         null_glEnableIndexedEXT,
         null_glEnableVariantClientStateEXT,
+        null_glEnableVertexArrayAttrib,
         null_glEnableVertexArrayAttribEXT,
         null_glEnableVertexArrayEXT,
         null_glEnableVertexAttribAPPLE,
@@ -6482,6 +6682,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glEndFragmentShaderATI,
         null_glEndOcclusionQueryNV,
         null_glEndPerfMonitorAMD,
+        null_glEndPerfQueryINTEL,
         null_glEndQuery,
         null_glEndQueryARB,
         null_glEndQueryIndexed,
@@ -6507,6 +6708,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glFinishTextureSUNX,
         null_glFlushMappedBufferRange,
         null_glFlushMappedBufferRangeAPPLE,
+        null_glFlushMappedNamedBufferRange,
         null_glFlushMappedNamedBufferRangeEXT,
         null_glFlushPixelDataRangeNV,
         null_glFlushRasterSGIX,
@@ -6531,6 +6733,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glFogxOES,
         null_glFogxvOES,
         null_glFragmentColorMaterialSGIX,
+        null_glFragmentCoverageColorNV,
         null_glFragmentLightModelfSGIX,
         null_glFragmentLightModelfvSGIX,
         null_glFragmentLightModeliSGIX,
@@ -6551,6 +6754,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glFramebufferReadBufferEXT,
         null_glFramebufferRenderbuffer,
         null_glFramebufferRenderbufferEXT,
+        null_glFramebufferSampleLocationsfvNV,
         null_glFramebufferTexture,
         null_glFramebufferTexture1D,
         null_glFramebufferTexture1DEXT,
@@ -6598,6 +6802,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glGenerateMipmap,
         null_glGenerateMipmapEXT,
         null_glGenerateMultiTexMipmapEXT,
+        null_glGenerateTextureMipmap,
         null_glGenerateTextureMipmapEXT,
         null_glGetActiveAtomicCounterBufferiv,
         null_glGetActiveAttrib,
@@ -6647,7 +6852,9 @@ struct opengl_funcs null_opengl_funcs =
         null_glGetCompressedMultiTexImageEXT,
         null_glGetCompressedTexImage,
         null_glGetCompressedTexImageARB,
+        null_glGetCompressedTextureImage,
         null_glGetCompressedTextureImageEXT,
+        null_glGetCompressedTextureSubImage,
         null_glGetConvolutionFilter,
         null_glGetConvolutionFilterEXT,
         null_glGetConvolutionParameterfv,
@@ -6655,6 +6862,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glGetConvolutionParameteriv,
         null_glGetConvolutionParameterivEXT,
         null_glGetConvolutionParameterxvOES,
+        null_glGetCoverageModulationTableNV,
         null_glGetDebugMessageLog,
         null_glGetDebugMessageLogAMD,
         null_glGetDebugMessageLogARB,
@@ -6665,6 +6873,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glGetFenceivNV,
         null_glGetFinalCombinerInputParameterfvNV,
         null_glGetFinalCombinerInputParameterivNV,
+        null_glGetFirstPerfQueryIdINTEL,
         null_glGetFixedvOES,
         null_glGetFloatIndexedvEXT,
         null_glGetFloati_v,
@@ -6681,6 +6890,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glGetFramebufferAttachmentParameterivEXT,
         null_glGetFramebufferParameteriv,
         null_glGetFramebufferParameterivEXT,
+        null_glGetGraphicsResetStatus,
         null_glGetGraphicsResetStatusARB,
         null_glGetHandleARB,
         null_glGetHistogram,
@@ -6702,6 +6912,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glGetIntegeri_v,
         null_glGetIntegerui64i_vNV,
         null_glGetIntegerui64vNV,
+        null_glGetInternalformatSampleivNV,
         null_glGetInternalformati64v,
         null_glGetInternalformativ,
         null_glGetInvariantBooleanvEXT,
@@ -6740,11 +6951,17 @@ struct opengl_funcs null_opengl_funcs =
         null_glGetMultiTexParameterivEXT,
         null_glGetMultisamplefv,
         null_glGetMultisamplefvNV,
+        null_glGetNamedBufferParameteri64v,
+        null_glGetNamedBufferParameteriv,
         null_glGetNamedBufferParameterivEXT,
         null_glGetNamedBufferParameterui64vNV,
+        null_glGetNamedBufferPointerv,
         null_glGetNamedBufferPointervEXT,
+        null_glGetNamedBufferSubData,
         null_glGetNamedBufferSubDataEXT,
+        null_glGetNamedFramebufferAttachmentParameteriv,
         null_glGetNamedFramebufferAttachmentParameterivEXT,
+        null_glGetNamedFramebufferParameteriv,
         null_glGetNamedFramebufferParameterivEXT,
         null_glGetNamedProgramLocalParameterIivEXT,
         null_glGetNamedProgramLocalParameterIuivEXT,
@@ -6752,9 +6969,11 @@ struct opengl_funcs null_opengl_funcs =
         null_glGetNamedProgramLocalParameterfvEXT,
         null_glGetNamedProgramStringEXT,
         null_glGetNamedProgramivEXT,
+        null_glGetNamedRenderbufferParameteriv,
         null_glGetNamedRenderbufferParameterivEXT,
         null_glGetNamedStringARB,
         null_glGetNamedStringivARB,
+        null_glGetNextPerfQueryIdINTEL,
         null_glGetObjectBufferfvATI,
         null_glGetObjectBufferivATI,
         null_glGetObjectLabel,
@@ -6778,12 +6997,16 @@ struct opengl_funcs null_opengl_funcs =
         null_glGetPathSpacingNV,
         null_glGetPathTexGenfvNV,
         null_glGetPathTexGenivNV,
+        null_glGetPerfCounterInfoINTEL,
         null_glGetPerfMonitorCounterDataAMD,
         null_glGetPerfMonitorCounterInfoAMD,
         null_glGetPerfMonitorCounterStringAMD,
         null_glGetPerfMonitorCountersAMD,
         null_glGetPerfMonitorGroupStringAMD,
         null_glGetPerfMonitorGroupsAMD,
+        null_glGetPerfQueryDataINTEL,
+        null_glGetPerfQueryIdByNameINTEL,
+        null_glGetPerfQueryInfoINTEL,
         null_glGetPixelMapxv,
         null_glGetPixelTexGenParameterfvSGIS,
         null_glGetPixelTexGenParameterivSGIS,
@@ -6813,6 +7036,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glGetProgramResourceLocation,
         null_glGetProgramResourceLocationIndex,
         null_glGetProgramResourceName,
+        null_glGetProgramResourcefvNV,
         null_glGetProgramResourceiv,
         null_glGetProgramStageiv,
         null_glGetProgramStringARB,
@@ -6821,6 +7045,10 @@ struct opengl_funcs null_opengl_funcs =
         null_glGetProgramiv,
         null_glGetProgramivARB,
         null_glGetProgramivNV,
+        null_glGetQueryBufferObjecti64v,
+        null_glGetQueryBufferObjectiv,
+        null_glGetQueryBufferObjectui64v,
+        null_glGetQueryBufferObjectuiv,
         null_glGetQueryIndexediv,
         null_glGetQueryObjecti64v,
         null_glGetQueryObjecti64vEXT,
@@ -6864,19 +7092,30 @@ struct opengl_funcs null_opengl_funcs =
         null_glGetTexParameterxvOES,
         null_glGetTextureHandleARB,
         null_glGetTextureHandleNV,
+        null_glGetTextureImage,
         null_glGetTextureImageEXT,
+        null_glGetTextureLevelParameterfv,
         null_glGetTextureLevelParameterfvEXT,
+        null_glGetTextureLevelParameteriv,
         null_glGetTextureLevelParameterivEXT,
+        null_glGetTextureParameterIiv,
         null_glGetTextureParameterIivEXT,
+        null_glGetTextureParameterIuiv,
         null_glGetTextureParameterIuivEXT,
+        null_glGetTextureParameterfv,
         null_glGetTextureParameterfvEXT,
+        null_glGetTextureParameteriv,
         null_glGetTextureParameterivEXT,
         null_glGetTextureSamplerHandleARB,
         null_glGetTextureSamplerHandleNV,
+        null_glGetTextureSubImage,
         null_glGetTrackMatrixivNV,
         null_glGetTransformFeedbackVarying,
         null_glGetTransformFeedbackVaryingEXT,
         null_glGetTransformFeedbackVaryingNV,
+        null_glGetTransformFeedbacki64_v,
+        null_glGetTransformFeedbacki_v,
+        null_glGetTransformFeedbackiv,
         null_glGetUniformBlockIndex,
         null_glGetUniformBufferSizeEXT,
         null_glGetUniformIndices,
@@ -6900,10 +7139,13 @@ struct opengl_funcs null_opengl_funcs =
         null_glGetVariantIntegervEXT,
         null_glGetVariantPointervEXT,
         null_glGetVaryingLocationNV,
+        null_glGetVertexArrayIndexed64iv,
+        null_glGetVertexArrayIndexediv,
         null_glGetVertexArrayIntegeri_vEXT,
         null_glGetVertexArrayIntegervEXT,
         null_glGetVertexArrayPointeri_vEXT,
         null_glGetVertexArrayPointervEXT,
+        null_glGetVertexArrayiv,
         null_glGetVertexAttribArrayObjectfvATI,
         null_glGetVertexAttribArrayObjectivATI,
         null_glGetVertexAttribIiv,
@@ -6935,23 +7177,41 @@ struct opengl_funcs null_opengl_funcs =
         null_glGetVideoivNV,
         null_glGetVideoui64vNV,
         null_glGetVideouivNV,
+        null_glGetnColorTable,
         null_glGetnColorTableARB,
+        null_glGetnCompressedTexImage,
         null_glGetnCompressedTexImageARB,
+        null_glGetnConvolutionFilter,
         null_glGetnConvolutionFilterARB,
+        null_glGetnHistogram,
         null_glGetnHistogramARB,
+        null_glGetnMapdv,
         null_glGetnMapdvARB,
+        null_glGetnMapfv,
         null_glGetnMapfvARB,
+        null_glGetnMapiv,
         null_glGetnMapivARB,
+        null_glGetnMinmax,
         null_glGetnMinmaxARB,
+        null_glGetnPixelMapfv,
         null_glGetnPixelMapfvARB,
+        null_glGetnPixelMapuiv,
         null_glGetnPixelMapuivARB,
+        null_glGetnPixelMapusv,
         null_glGetnPixelMapusvARB,
+        null_glGetnPolygonStipple,
         null_glGetnPolygonStippleARB,
+        null_glGetnSeparableFilter,
         null_glGetnSeparableFilterARB,
+        null_glGetnTexImage,
         null_glGetnTexImageARB,
+        null_glGetnUniformdv,
         null_glGetnUniformdvARB,
+        null_glGetnUniformfv,
         null_glGetnUniformfvARB,
+        null_glGetnUniformiv,
         null_glGetnUniformivARB,
+        null_glGetnUniformuiv,
         null_glGetnUniformuivARB,
         null_glGlobalAlphaFactorbSUN,
         null_glGlobalAlphaFactordSUN,
@@ -6984,6 +7244,8 @@ struct opengl_funcs null_opengl_funcs =
         null_glInvalidateBufferData,
         null_glInvalidateBufferSubData,
         null_glInvalidateFramebuffer,
+        null_glInvalidateNamedFramebufferData,
+        null_glInvalidateNamedFramebufferSubData,
         null_glInvalidateSubFramebuffer,
         null_glInvalidateTexImage,
         null_glInvalidateTexSubImage,
@@ -7071,7 +7333,9 @@ struct opengl_funcs null_opengl_funcs =
         null_glMapControlPointsNV,
         null_glMapGrid1xOES,
         null_glMapGrid2xOES,
+        null_glMapNamedBuffer,
         null_glMapNamedBufferEXT,
+        null_glMapNamedBufferRange,
         null_glMapNamedBufferRangeEXT,
         null_glMapObjectBufferATI,
         null_glMapParameterfvNV,
@@ -7088,11 +7352,17 @@ struct opengl_funcs null_opengl_funcs =
         null_glMatrixIndexubvARB,
         null_glMatrixIndexuivARB,
         null_glMatrixIndexusvARB,
+        null_glMatrixLoad3x2fNV,
+        null_glMatrixLoad3x3fNV,
         null_glMatrixLoadIdentityEXT,
+        null_glMatrixLoadTranspose3x3fNV,
         null_glMatrixLoadTransposedEXT,
         null_glMatrixLoadTransposefEXT,
         null_glMatrixLoaddEXT,
         null_glMatrixLoadfEXT,
+        null_glMatrixMult3x2fNV,
+        null_glMatrixMult3x3fNV,
+        null_glMatrixMultTranspose3x3fNV,
         null_glMatrixMultTransposedEXT,
         null_glMatrixMultTransposefEXT,
         null_glMatrixMultdEXT,
@@ -7107,6 +7377,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glMatrixTranslatedEXT,
         null_glMatrixTranslatefEXT,
         null_glMemoryBarrier,
+        null_glMemoryBarrierByRegion,
         null_glMemoryBarrierEXT,
         null_glMinSampleShading,
         null_glMinSampleShadingARB,
@@ -7122,6 +7393,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glMultiDrawArraysEXT,
         null_glMultiDrawArraysIndirect,
         null_glMultiDrawArraysIndirectAMD,
+        null_glMultiDrawArraysIndirectBindlessCountNV,
         null_glMultiDrawArraysIndirectBindlessNV,
         null_glMultiDrawArraysIndirectCountARB,
         null_glMultiDrawElementArrayAPPLE,
@@ -7130,6 +7402,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glMultiDrawElementsEXT,
         null_glMultiDrawElementsIndirect,
         null_glMultiDrawElementsIndirectAMD,
+        null_glMultiDrawElementsIndirectBindlessCountNV,
         null_glMultiDrawElementsIndirectBindlessNV,
         null_glMultiDrawElementsIndirectCountARB,
         null_glMultiDrawRangeElementArrayAPPLE,
@@ -7289,17 +7562,30 @@ struct opengl_funcs null_opengl_funcs =
         null_glMultiTexSubImage1DEXT,
         null_glMultiTexSubImage2DEXT,
         null_glMultiTexSubImage3DEXT,
+        null_glNamedBufferData,
         null_glNamedBufferDataEXT,
+        null_glNamedBufferPageCommitmentARB,
+        null_glNamedBufferPageCommitmentEXT,
+        null_glNamedBufferStorage,
         null_glNamedBufferStorageEXT,
+        null_glNamedBufferSubData,
         null_glNamedBufferSubDataEXT,
         null_glNamedCopyBufferSubDataEXT,
+        null_glNamedFramebufferDrawBuffer,
+        null_glNamedFramebufferDrawBuffers,
+        null_glNamedFramebufferParameteri,
         null_glNamedFramebufferParameteriEXT,
+        null_glNamedFramebufferReadBuffer,
+        null_glNamedFramebufferRenderbuffer,
         null_glNamedFramebufferRenderbufferEXT,
+        null_glNamedFramebufferSampleLocationsfvNV,
+        null_glNamedFramebufferTexture,
         null_glNamedFramebufferTexture1DEXT,
         null_glNamedFramebufferTexture2DEXT,
         null_glNamedFramebufferTexture3DEXT,
         null_glNamedFramebufferTextureEXT,
         null_glNamedFramebufferTextureFaceEXT,
+        null_glNamedFramebufferTextureLayer,
         null_glNamedFramebufferTextureLayerEXT,
         null_glNamedProgramLocalParameter4dEXT,
         null_glNamedProgramLocalParameter4dvEXT,
@@ -7313,7 +7599,9 @@ struct opengl_funcs null_opengl_funcs =
         null_glNamedProgramLocalParametersI4ivEXT,
         null_glNamedProgramLocalParametersI4uivEXT,
         null_glNamedProgramStringEXT,
+        null_glNamedRenderbufferStorage,
         null_glNamedRenderbufferStorageEXT,
+        null_glNamedRenderbufferStorageMultisample,
         null_glNamedRenderbufferStorageMultisampleCoverageEXT,
         null_glNamedRenderbufferStorageMultisampleEXT,
         null_glNamedStringARB,
@@ -7359,8 +7647,11 @@ struct opengl_funcs null_opengl_funcs =
         null_glPathCoverDepthFuncNV,
         null_glPathDashArrayNV,
         null_glPathFogGenNV,
+        null_glPathGlyphIndexArrayNV,
+        null_glPathGlyphIndexRangeNV,
         null_glPathGlyphRangeNV,
         null_glPathGlyphsNV,
+        null_glPathMemoryGlyphIndexArrayNV,
         null_glPathParameterfNV,
         null_glPathParameterfvNV,
         null_glPathParameteriNV,
@@ -7404,6 +7695,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glPointSizexOES,
         null_glPollAsyncSGIX,
         null_glPollInstrumentsSGIX,
+        null_glPolygonOffsetClampEXT,
         null_glPolygonOffsetEXT,
         null_glPolygonOffsetxOES,
         null_glPopDebugGroup,
@@ -7454,6 +7746,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glProgramParameteriEXT,
         null_glProgramParameters4dvNV,
         null_glProgramParameters4fvNV,
+        null_glProgramPathFragmentInputGenNV,
         null_glProgramStringARB,
         null_glProgramSubroutineParametersuivNV,
         null_glProgramUniform1d,
@@ -7586,14 +7879,17 @@ struct opengl_funcs null_opengl_funcs =
         null_glPushGroupMarkerEXT,
         null_glQueryCounter,
         null_glQueryMatrixxOES,
+        null_glQueryObjectParameteruiAMD,
         null_glRasterPos2xOES,
         null_glRasterPos2xvOES,
         null_glRasterPos3xOES,
         null_glRasterPos3xvOES,
         null_glRasterPos4xOES,
         null_glRasterPos4xvOES,
+        null_glRasterSamplesEXT,
         null_glReadBufferRegion,
         null_glReadInstrumentsSGIX,
+        null_glReadnPixels,
         null_glReadnPixelsARB,
         null_glRectxOES,
         null_glRectxvOES,
@@ -7633,6 +7929,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glResetMinmax,
         null_glResetMinmaxEXT,
         null_glResizeBuffersMESA,
+        null_glResolveDepthValuesNV,
         null_glResumeTransformFeedback,
         null_glResumeTransformFeedbackNV,
         null_glRotatexOES,
@@ -7731,8 +8028,13 @@ struct opengl_funcs null_opengl_funcs =
         null_glStencilOpValueAMD,
         null_glStencilStrokePathInstancedNV,
         null_glStencilStrokePathNV,
+        null_glStencilThenCoverFillPathInstancedNV,
+        null_glStencilThenCoverFillPathNV,
+        null_glStencilThenCoverStrokePathInstancedNV,
+        null_glStencilThenCoverStrokePathNV,
         null_glStopInstrumentsSGIX,
         null_glStringMarkerGREMEDY,
+        null_glSubpixelPrecisionBiasNV,
         null_glSwizzleEXT,
         null_glSyncTextureINTEL,
         null_glTagSampleBufferSGIX,
@@ -7840,8 +8142,11 @@ struct opengl_funcs null_opengl_funcs =
         null_glTexSubImage3D,
         null_glTexSubImage3DEXT,
         null_glTexSubImage4DSGIS,
+        null_glTextureBarrier,
         null_glTextureBarrierNV,
+        null_glTextureBuffer,
         null_glTextureBufferEXT,
+        null_glTextureBufferRange,
         null_glTextureBufferRangeEXT,
         null_glTextureColorMaskSGIS,
         null_glTextureImage1DEXT,
@@ -7855,26 +8160,42 @@ struct opengl_funcs null_opengl_funcs =
         null_glTextureMaterialEXT,
         null_glTextureNormalEXT,
         null_glTexturePageCommitmentEXT,
+        null_glTextureParameterIiv,
         null_glTextureParameterIivEXT,
+        null_glTextureParameterIuiv,
         null_glTextureParameterIuivEXT,
+        null_glTextureParameterf,
         null_glTextureParameterfEXT,
+        null_glTextureParameterfv,
         null_glTextureParameterfvEXT,
+        null_glTextureParameteri,
         null_glTextureParameteriEXT,
+        null_glTextureParameteriv,
         null_glTextureParameterivEXT,
         null_glTextureRangeAPPLE,
         null_glTextureRenderbufferEXT,
+        null_glTextureStorage1D,
         null_glTextureStorage1DEXT,
+        null_glTextureStorage2D,
         null_glTextureStorage2DEXT,
+        null_glTextureStorage2DMultisample,
         null_glTextureStorage2DMultisampleEXT,
+        null_glTextureStorage3D,
         null_glTextureStorage3DEXT,
+        null_glTextureStorage3DMultisample,
         null_glTextureStorage3DMultisampleEXT,
         null_glTextureStorageSparseAMD,
+        null_glTextureSubImage1D,
         null_glTextureSubImage1DEXT,
+        null_glTextureSubImage2D,
         null_glTextureSubImage2DEXT,
+        null_glTextureSubImage3D,
         null_glTextureSubImage3DEXT,
         null_glTextureView,
         null_glTrackMatrixNV,
         null_glTransformFeedbackAttribsNV,
+        null_glTransformFeedbackBufferBase,
+        null_glTransformFeedbackBufferRange,
         null_glTransformFeedbackStreamAttribsNV,
         null_glTransformFeedbackVaryings,
         null_glTransformFeedbackVaryingsEXT,
@@ -7986,6 +8307,7 @@ struct opengl_funcs null_opengl_funcs =
         null_glUnlockArraysEXT,
         null_glUnmapBuffer,
         null_glUnmapBufferARB,
+        null_glUnmapNamedBuffer,
         null_glUnmapNamedBufferEXT,
         null_glUnmapObjectBufferATI,
         null_glUnmapTexture2DINTEL,
@@ -8035,9 +8357,15 @@ struct opengl_funcs null_opengl_funcs =
         null_glVertex4hvNV,
         null_glVertex4xOES,
         null_glVertex4xvOES,
+        null_glVertexArrayAttribBinding,
+        null_glVertexArrayAttribFormat,
+        null_glVertexArrayAttribIFormat,
+        null_glVertexArrayAttribLFormat,
         null_glVertexArrayBindVertexBufferEXT,
+        null_glVertexArrayBindingDivisor,
         null_glVertexArrayColorOffsetEXT,
         null_glVertexArrayEdgeFlagOffsetEXT,
+        null_glVertexArrayElementBuffer,
         null_glVertexArrayFogCoordOffsetEXT,
         null_glVertexArrayIndexOffsetEXT,
         null_glVertexArrayMultiTexCoordOffsetEXT,
@@ -8056,6 +8384,8 @@ struct opengl_funcs null_opengl_funcs =
         null_glVertexArrayVertexAttribLOffsetEXT,
         null_glVertexArrayVertexAttribOffsetEXT,
         null_glVertexArrayVertexBindingDivisorEXT,
+        null_glVertexArrayVertexBuffer,
+        null_glVertexArrayVertexBuffers,
         null_glVertexArrayVertexOffsetEXT,
         null_glVertexAttrib1d,
         null_glVertexAttrib1dARB,
diff --git a/dlls/opengl32/wgl.c b/dlls/opengl32/wgl.c
index 3a5e148..32d241c 100644
--- a/dlls/opengl32/wgl.c
+++ b/dlls/opengl32/wgl.c
@@ -51,8 +51,9 @@ extern struct opengl_funcs null_opengl_funcs;
 
 enum wgl_handle_type
 {
-    HANDLE_CONTEXT = 0 << 12,
-    HANDLE_PBUFFER = 1 << 12,
+    HANDLE_PBUFFER = 0 << 12,
+    HANDLE_CONTEXT = 1 << 12,
+    HANDLE_CONTEXT_V3 = 3 << 12,
     HANDLE_TYPE_MASK = 15 << 12
 };
 
@@ -270,8 +271,24 @@ HGLRC WINAPI wglCreateContextAttribsARB( HDC hdc, HGLRC share, const int *attrib
     {
         if ((context = HeapAlloc( GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*context) )))
         {
+            enum wgl_handle_type type = HANDLE_CONTEXT;
+
+            if (attribs)
+            {
+                while (*attribs)
+                {
+                    if (attribs[0] == WGL_CONTEXT_MAJOR_VERSION_ARB)
+                    {
+                        if (attribs[1] >= 3)
+                            type = HANDLE_CONTEXT_V3;
+                        break;
+                    }
+                    attribs += 2;
+                }
+            }
+
             context->drv_ctx = drv_ctx;
-            if (!(ret = alloc_handle( HANDLE_CONTEXT, funcs, context )))
+            if (!(ret = alloc_handle( type, funcs, context )))
                 HeapFree( GetProcessHeap(), 0, context );
         }
         if (!ret) funcs->wgl.p_wglDeleteContext( drv_ctx );
diff --git a/dlls/rsaenh/rsaenh.c b/dlls/rsaenh/rsaenh.c
index 7123ffb..ebafa0e 100644
--- a/dlls/rsaenh/rsaenh.c
+++ b/dlls/rsaenh/rsaenh.c
@@ -3462,6 +3462,8 @@ BOOL WINAPI RSAENH_CPSetKeyParam(HCRYPTPROV hProv, HCRYPTKEY hKey, DWORD dwParam
             switch (pCryptKey->aiAlgid) {
                 case CALG_RC2:
                 case CALG_RC4:
+                {
+                    KEYCONTAINER *pKeyContainer = get_key_container(pCryptKey->hProv);
                     if (!pbData)
                     {
                         SetLastError(ERROR_INVALID_PARAMETER);
@@ -3474,11 +3476,13 @@ BOOL WINAPI RSAENH_CPSetKeyParam(HCRYPTPROV hProv, HCRYPTKEY hKey, DWORD dwParam
                            pbData, 11);
                     pCryptKey->dwSaltLen = 11;
                     setup_key(pCryptKey);
-                    /* Strange but true: salt length reset to 0 after setting
-                     * it via KP_SALT.
-                     */
-                    pCryptKey->dwSaltLen = 0;
+                    /* After setting the salt value if the provider is not base or
+                     * strong the salt length will be reset. */
+                    if (pKeyContainer->dwPersonality != RSAENH_PERSONALITY_BASE &&
+                        pKeyContainer->dwPersonality != RSAENH_PERSONALITY_STRONG)
+                        pCryptKey->dwSaltLen = 0;
                     break;
+                }
                 default:
                     SetLastError(NTE_BAD_KEY);
                     return FALSE;
diff --git a/dlls/rsaenh/tests/rsaenh.c b/dlls/rsaenh/tests/rsaenh.c
index 00be8a7..072f08a 100644
--- a/dlls/rsaenh/tests/rsaenh.c
+++ b/dlls/rsaenh/tests/rsaenh.c
@@ -62,7 +62,7 @@ static const cryptdata cTestData[4] = {
        12,12,16}
 };
 
-static int win2k;
+static int win2k, nt4;
 
 /*
  * 1. Take the MD5 Hash of the container name (with an extra null byte)
@@ -249,7 +249,10 @@ static void test_prov(void)
     SetLastError(0xdeadbeef);
     result = CryptGetProvParam(hProv, PP_SIG_KEYSIZE_INC, (BYTE*)&dwInc, &dwLen, 0);
     if (!result && GetLastError() == NTE_BAD_TYPE)
+    {
         skip("PP_SIG_KEYSIZE_INC is not supported (win9x or NT)\n");
+        nt4++;
+    }
     else
         ok(result && dwInc==8, "%08x, %d\n", GetLastError(), dwInc);
     
@@ -1472,16 +1475,16 @@ static void test_rc2(void)
         result = CryptDecrypt(hKey, 0, TRUE, 0, pbData, &dwDataLen);
         ok(result, "%08x\n", GetLastError());
 
-        /* Setting the salt also succeeds... */
+        /* Setting the salt value will not reset the salt length in base or strong providers */
         result = CryptSetKeyParam(hKey, KP_SALT, pbData, 0);
         ok(result, "setting salt failed: %08x\n", GetLastError());
-        /* but the resulting salt length is now zero? */
         dwLen = 0;
         result = CryptGetKeyParam(hKey, KP_SALT, NULL, &dwLen, 0);
         ok(result, "%08x\n", GetLastError());
-        ok(dwLen == 0 ||
-           broken(dwLen == 11), /* Win9x/WinMe/NT4 */
-           "unexpected salt length %d\n", dwLen);
+        if (BASE_PROV || STRONG_PROV)
+            ok(dwLen == 11, "expected salt length 11, got %d\n", dwLen);
+        else
+            ok(dwLen == 0 || broken(nt4 && dwLen == 11), "expected salt length 0, got %d\n", dwLen);
         /* What sizes salt can I set? */
         salt.pbData = pbData;
         for (i=0; i<24; i++)
@@ -1719,16 +1722,16 @@ static void test_rc4(void)
         result = CryptDecrypt(hKey, 0, TRUE, 0, pbData, &dwDataLen);
         ok(result, "%08x\n", GetLastError());
 
-        /* Setting the salt also succeeds... */
+        /* Setting the salt value will not reset the salt length in base or strong providers */
         result = CryptSetKeyParam(hKey, KP_SALT, pbData, 0);
         ok(result, "setting salt failed: %08x\n", GetLastError());
-        /* but the resulting salt length is now zero? */
         dwLen = 0;
         result = CryptGetKeyParam(hKey, KP_SALT, NULL, &dwLen, 0);
         ok(result, "%08x\n", GetLastError());
-        ok(dwLen == 0 ||
-           broken(dwLen == 11), /* Win9x/WinMe/NT4 */
-           "unexpected salt length %d\n", dwLen);
+        if (BASE_PROV || STRONG_PROV || nt4)
+            ok(dwLen == 11, "expected salt length 11, got %d\n", dwLen);
+        else
+            ok(dwLen == 0 || broken(nt4 && dwLen == 11), "expected salt length 0, got %d\n", dwLen);
         /* What sizes salt can I set? */
         salt.pbData = pbData;
         for (i=0; i<24; i++)
diff --git a/dlls/scrrun/scrrun.c b/dlls/scrrun/scrrun.c
index bad5b1c..3afcd50 100644
--- a/dlls/scrrun/scrrun.c
+++ b/dlls/scrrun/scrrun.c
@@ -152,6 +152,7 @@ HRESULT get_typeinfo(tid_t tid, ITypeInfo **typeinfo)
     }
 
     *typeinfo = typeinfos[tid];
+    ITypeInfo_AddRef(typeinfos[tid]);
     return S_OK;
 }
 
diff --git a/dlls/shlwapi/path.c b/dlls/shlwapi/path.c
index a3b462c..dae949a 100644
--- a/dlls/shlwapi/path.c
+++ b/dlls/shlwapi/path.c
@@ -3872,13 +3872,13 @@ BOOL WINAPI PathIsDirectoryEmptyW(LPCWSTR lpszPath)
   WCHAR szSearch[MAX_PATH];
   DWORD dwLen;
   HANDLE hfind;
-  BOOL retVal = FALSE;
+  BOOL retVal = TRUE;
   WIN32_FIND_DATAW find_data;
 
   TRACE("(%s)\n",debugstr_w(lpszPath));
 
   if (!lpszPath || !PathIsDirectoryW(lpszPath))
-      return FALSE;
+    return FALSE;
 
   lstrcpynW(szSearch, lpszPath, MAX_PATH);
   PathAddBackslashW(szSearch);
@@ -3888,14 +3888,23 @@ BOOL WINAPI PathIsDirectoryEmptyW(LPCWSTR lpszPath)
 
   strcpyW(szSearch + dwLen, szAllFiles);
   hfind = FindFirstFileW(szSearch, &find_data);
-  if (hfind != INVALID_HANDLE_VALUE)
+  if (hfind == INVALID_HANDLE_VALUE)
+    return FALSE;
+
+  do
   {
-    if (find_data.cFileName[0] == '.' && find_data.cFileName[1] == '.')
-      /* The only directory entry should be the parent */
-      retVal = !FindNextFileW(hfind, &find_data);
-    FindClose(hfind);
+    if (find_data.cFileName[0] == '.')
+    {
+      if (find_data.cFileName[1] == '\0') continue;
+      if (find_data.cFileName[1] == '.' && find_data.cFileName[2] == '\0') continue;
+    }
+
+    retVal = FALSE;
+    break;
   }
+  while (FindNextFileW(hfind, &find_data));
 
+  FindClose(hfind);
   return retVal;
 }
 
diff --git a/dlls/strmbase/enumpins.c b/dlls/strmbase/enumpins.c
index 6993bae..55fa7ec 100644
--- a/dlls/strmbase/enumpins.c
+++ b/dlls/strmbase/enumpins.c
@@ -125,7 +125,6 @@ static ULONG WINAPI IEnumPinsImpl_Release(IEnumPins * iface)
 static HRESULT WINAPI IEnumPinsImpl_Next(IEnumPins * iface, ULONG cPins, IPin ** ppPins, ULONG * pcFetched)
 {
     IEnumPinsImpl *This = impl_from_IEnumPins(iface);
-    HRESULT hr = S_OK;
     ULONG i = 0;
 
     TRACE("(%p)->(%u, %p, %p)\n", iface, cPins, ppPins, pcFetched);
@@ -142,7 +141,7 @@ static HRESULT WINAPI IEnumPinsImpl_Next(IEnumPins * iface, ULONG cPins, IPin **
     if (This->Version != This->receive_version(This->base))
         return VFW_E_ENUM_OUT_OF_SYNC;
 
-    while (i < cPins && hr == S_OK)
+    while (i < cPins)
     {
        IPin *pin;
        pin = This->receive_pin(This->base, This->uIndex + i);
diff --git a/dlls/user32/input.c b/dlls/user32/input.c
index ec81e60..1f05f34 100644
--- a/dlls/user32/input.c
+++ b/dlls/user32/input.c
@@ -966,6 +966,11 @@ BOOL WINAPI GetKeyboardLayoutNameA(LPSTR pszKLID)
  */
 BOOL WINAPI GetKeyboardLayoutNameW(LPWSTR pwszKLID)
 {
+    if (!pwszKLID)
+    {
+        SetLastError(ERROR_NOACCESS);
+        return FALSE;
+    }
     return USER_Driver->pGetKeyboardLayoutName(pwszKLID);
 }
 
diff --git a/dlls/user32/menu.c b/dlls/user32/menu.c
index f0eb66b..847540b 100644
--- a/dlls/user32/menu.c
+++ b/dlls/user32/menu.c
@@ -1737,15 +1737,17 @@ static void MENU_DrawMenuItem( HWND hwnd, HMENU hmenu, HWND hwndOwner, HDC hdc,
  */
 static void MENU_DrawPopupMenu( HWND hwnd, HDC hdc, HMENU hmenu )
 {
-    HBRUSH hPrevBrush = 0;
+    HBRUSH hPrevBrush = 0, brush = GetSysColorBrush( COLOR_MENU );
     RECT rect;
+    POPUPMENU *menu = MENU_GetMenu( hmenu );
 
     TRACE("wnd=%p dc=%p menu=%p\n", hwnd, hdc, hmenu);
 
     GetClientRect( hwnd, &rect );
 
-    if((hPrevBrush = SelectObject( hdc, GetSysColorBrush(COLOR_MENU) ))
-        && (SelectObject( hdc, get_menu_font(FALSE))))
+    if (menu && menu->hbrBack) brush = menu->hbrBack;
+    if ((hPrevBrush = SelectObject( hdc, brush ))
+        && SelectObject( hdc, get_menu_font(FALSE) ))
     {
 	HPEN hPrevPen;
 
@@ -1754,7 +1756,6 @@ static void MENU_DrawPopupMenu( HWND hwnd, HDC hdc, HMENU hmenu )
 	hPrevPen = SelectObject( hdc, GetStockObject( NULL_PEN ) );
 	if( hPrevPen )
 	{
-	    POPUPMENU *menu;
 	    BOOL flat_menu = FALSE;
 
 	    SystemParametersInfoW (SPI_GETFLATMENU, 0, &flat_menu, 0);
@@ -1763,7 +1764,7 @@ static void MENU_DrawPopupMenu( HWND hwnd, HDC hdc, HMENU hmenu )
 	    else
 		DrawEdge (hdc, &rect, EDGE_RAISED, BF_RECT);
 
-            if( (menu = MENU_GetMenu( hmenu )))
+            if (menu)
             {
                 TRACE("hmenu %p Style %08x\n", hmenu, menu->dwStyle);
                 /* draw menu items */
diff --git a/dlls/user32/tests/input.c b/dlls/user32/tests/input.c
index 39afeb7..76d0821 100644
--- a/dlls/user32/tests/input.c
+++ b/dlls/user32/tests/input.c
@@ -1595,6 +1595,14 @@ static void test_keyboard_layout_name(void)
     BOOL ret;
     char klid[KL_NAMELENGTH];
 
+if (0) /* crashes on native system */
+    ret = GetKeyboardLayoutNameA(NULL);
+
+    SetLastError(0xdeadbeef);
+    ret = GetKeyboardLayoutNameW(NULL);
+    ok(!ret, "got %d\n", ret);
+    ok(GetLastError() == ERROR_NOACCESS, "got %d\n", GetLastError());
+
     if (GetKeyboardLayout(0) != (HKL)(ULONG_PTR)0x04090409) return;
 
     klid[0] = 0;
diff --git a/dlls/user32/tests/menu.c b/dlls/user32/tests/menu.c
index 575d786..62c3229 100644
--- a/dlls/user32/tests/menu.c
+++ b/dlls/user32/tests/menu.c
@@ -2976,6 +2976,7 @@ static void test_menu_setmenuinfo(void)
     MENUITEMINFOA mii = { sizeof(MENUITEMINFOA) };
     BOOL ret;
     DWORD gle;
+    HBRUSH brush;
 
     if (!pGetMenuInfo || !pSetMenuInfo)
     {
@@ -3091,6 +3092,31 @@ static void test_menu_setmenuinfo(void)
     ok( ret, "GetMenuInfo() should have succeeded\n");
     ok( gle == 0xdeadbeef, "GetMenuInfo() error got %u\n", gle);
     ok( !(mi.dwStyle & MNS_NOCHECK), "menustyle was not expected to have the MNS_NOCHECK flag\n");
+
+    /* test background brush */
+    mi.cbSize = sizeof(mi);
+    mi.fMask = MIM_BACKGROUND;
+    ret = pGetMenuInfo( hmenu, &mi );
+    ok( ret, "GetMenuInfo() should have succeeded\n" );
+    ok( mi.hbrBack == NULL, "got %p\n", mi.hbrBack );
+
+    brush = CreateSolidBrush( RGB(0xff, 0, 0) );
+    mi.hbrBack = brush;
+    ret = pSetMenuInfo( hmenu, &mi );
+    ok( ret, "SetMenuInfo() should have succeeded\n" );
+    mi.hbrBack = NULL;
+    ret = pGetMenuInfo( hmenu, &mi );
+    ok( ret, "GetMenuInfo() should have succeeded\n" );
+    ok( mi.hbrBack == brush, "got %p original %p\n", mi.hbrBack, brush );
+
+    mi.hbrBack = NULL;
+    ret = pSetMenuInfo( hmenu, &mi );
+    ok( ret, "SetMenuInfo() should have succeeded\n" );
+    ret = pGetMenuInfo( hmenu, &mi );
+    ok( ret, "GetMenuInfo() should have succeeded\n" );
+    ok( mi.hbrBack == NULL, "got %p\n", mi.hbrBack );
+    DeleteObject( brush );
+
     /* clean up */
     DestroyMenu( hsubmenu);
     DestroyMenu( hmenu);
diff --git a/dlls/vbscript/parser.y b/dlls/vbscript/parser.y
index 681a0c9..fb95dfb 100644
--- a/dlls/vbscript/parser.y
+++ b/dlls/vbscript/parser.y
@@ -246,10 +246,10 @@ Step_opt
 
 IfStatement
     : tIF Expression tTHEN tNL StatementsNl_opt ElseIfs_opt Else_opt tEND tIF
-                                            { $$ = new_if_statement(ctx, $2, $5, $6, $7); CHECK_ERROR; }
-    | tIF Expression tTHEN Statement        { $$ = new_if_statement(ctx, $2, $4, NULL, NULL); CHECK_ERROR; }
+                                               { $$ = new_if_statement(ctx, $2, $5, $6, $7); CHECK_ERROR; }
+    | tIF Expression tTHEN Statement EndIf_opt { $$ = new_if_statement(ctx, $2, $4, NULL, NULL); CHECK_ERROR; }
     | tIF Expression tTHEN Statement tELSE Statement EndIf_opt
-                                            { $$ = new_if_statement(ctx, $2, $4, NULL, $6); CHECK_ERROR; }
+                                               { $$ = new_if_statement(ctx, $2, $4, NULL, $6); CHECK_ERROR; }
 
 EndIf_opt
     : /* empty */
diff --git a/dlls/vbscript/tests/lang.vbs b/dlls/vbscript/tests/lang.vbs
index 3ee445c..b23b709 100644
--- a/dlls/vbscript/tests/lang.vbs
+++ b/dlls/vbscript/tests/lang.vbs
@@ -234,6 +234,7 @@ if false then :
 if false then x = y : if true then call ok(false, "embedded if called")
 
 if false then x=1 else x=2 end if
+if true then x=1 end if
 
 x = false
 if false then x = true : x = true
diff --git a/dlls/wbemdisp/locator.c b/dlls/wbemdisp/locator.c
index 0a6b076..3465eb1 100644
--- a/dlls/wbemdisp/locator.c
+++ b/dlls/wbemdisp/locator.c
@@ -36,6 +36,8 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(wbemdisp);
 
+static HRESULT EnumVARIANT_create( IEnumWbemClassObject *, IEnumVARIANT ** );
+
 enum type_id
 {
     ISWbemLocator_tid,
@@ -91,11 +93,22 @@ static HRESULT get_typeinfo( enum type_id tid, ITypeInfo **ret )
     return S_OK;
 }
 
+#define DISPID_BASE 0x1800000
+
+struct member
+{
+    BSTR name;
+    DISPID dispid;
+};
+
 struct object
 {
     ISWbemObject ISWbemObject_iface;
     LONG refs;
     IWbemClassObject *object;
+    struct member *members;
+    UINT nb_members;
+    DISPID last_dispid;
 };
 
 static inline struct object *impl_from_ISWbemObject(
@@ -118,8 +131,12 @@ static ULONG WINAPI object_Release(
     LONG refs = InterlockedDecrement( &object->refs );
     if (!refs)
     {
+        UINT i;
+
         TRACE( "destroying %p\n", object );
         IWbemClassObject_Release( object->object );
+        for (i = 0; i < object->nb_members; i++) SysFreeString( object->members[i].name );
+        heap_free( object->members );
         heap_free( object );
     }
     return refs;
@@ -167,9 +184,63 @@ static HRESULT WINAPI object_GetTypeInfo(
     ITypeInfo **info )
 {
     struct object *object = impl_from_ISWbemObject( iface );
-    TRACE( "%p, %u, %u, %p\n", object, index, lcid, info );
+    FIXME( "%p, %u, %u, %p\n", object, index, lcid, info );
+    return E_NOTIMPL;
+}
+
+#define DISPID_BASE 0x1800000
+
+static HRESULT init_members( struct object *object )
+{
+    LONG bound, i;
+    SAFEARRAY *sa;
+    HRESULT hr;
+
+    if (object->members) return S_OK;
+
+    hr = IWbemClassObject_GetNames( object->object, NULL, 0, NULL, &sa );
+    if (FAILED( hr )) return hr;
+    hr = SafeArrayGetUBound( sa, 1, &bound );
+    if (FAILED( hr ))
+    {
+        SafeArrayDestroy( sa );
+        return hr;
+    }
+    if (!(object->members = heap_alloc( sizeof(struct member) * (bound + 1) )))
+    {
+        SafeArrayDestroy( sa );
+        return E_OUTOFMEMORY;
+    }
+    for (i = 0; i <= bound; i++)
+    {
+        hr = SafeArrayGetElement( sa, &i, &object->members[i].name );
+        if (FAILED( hr ))
+        {
+            for (i--; i >= 0; i--) SysFreeString( object->members[i].name );
+            SafeArrayDestroy( sa );
+            heap_free( object->members );
+            object->members = NULL;
+            return E_OUTOFMEMORY;
+        }
+        object->members[i].dispid = 0;
+    }
+    object->nb_members = bound + 1;
+    SafeArrayDestroy( sa );
+    return S_OK;
+}
 
-    return get_typeinfo( ISWbemObject_tid, info );
+static DISPID get_member_dispid( struct object *object, const WCHAR *name )
+{
+    UINT i;
+    for (i = 0; i < object->nb_members; i++)
+    {
+        if (!strcmpiW( object->members[i].name, name ))
+        {
+            if (!object->members[i].dispid) object->members[i].dispid = ++object->last_dispid;
+            return object->members[i].dispid;
+        }
+    }
+    return DISPID_UNKNOWN;
 }
 
 static HRESULT WINAPI object_GetIDsOfNames(
@@ -181,20 +252,32 @@ static HRESULT WINAPI object_GetIDsOfNames(
     DISPID *dispid )
 {
     struct object *object = impl_from_ISWbemObject( iface );
-    ITypeInfo *typeinfo;
     HRESULT hr;
+    UINT i;
 
     TRACE( "%p, %s, %p, %u, %u, %p\n", object, debugstr_guid(riid), names, count, lcid, dispid );
 
     if (!names || !count || !dispid) return E_INVALIDARG;
 
-    hr = get_typeinfo( ISWbemObject_tid, &typeinfo );
-    if (SUCCEEDED(hr))
+    hr = init_members( object );
+    if (FAILED( hr )) return hr;
+
+    for (i = 0; i < count; i++)
     {
-        hr = ITypeInfo_GetIDsOfNames( typeinfo, names, count, dispid );
-        ITypeInfo_Release( typeinfo );
+        if ((dispid[i] = get_member_dispid( object, names[i] )) == DISPID_UNKNOWN) break;
     }
-    return hr;
+    if (i != count) return DISP_E_UNKNOWNNAME;
+    return S_OK;
+}
+
+static BSTR get_member_name( struct object *object, DISPID dispid )
+{
+    UINT i;
+    for (i = 0; i < object->nb_members; i++)
+    {
+        if (object->members[i].dispid == dispid) return object->members[i].name;
+    }
+    return NULL;
 }
 
 static HRESULT WINAPI object_Invoke(
@@ -209,20 +292,21 @@ static HRESULT WINAPI object_Invoke(
     UINT *arg_err )
 {
     struct object *object = impl_from_ISWbemObject( iface );
-    ITypeInfo *typeinfo;
-    HRESULT hr;
+    BSTR name;
 
-    TRACE( "%p, %d, %s, %d, %d, %p, %p, %p, %p\n", object, member, debugstr_guid(riid),
+    TRACE( "%p, %x, %s, %u, %x, %p, %p, %p, %p\n", object, member, debugstr_guid(riid),
            lcid, flags, params, result, excep_info, arg_err );
 
-    hr = get_typeinfo( ISWbemObject_tid, &typeinfo );
-    if (SUCCEEDED(hr))
+    if (flags != (DISPATCH_METHOD|DISPATCH_PROPERTYGET))
     {
-        hr = ITypeInfo_Invoke( typeinfo, &object->ISWbemObject_iface, member, flags,
-                               params, result, excep_info, arg_err );
-        ITypeInfo_Release( typeinfo );
+        FIXME( "flags %x not supported\n", flags );
+        return E_NOTIMPL;
     }
-    return hr;
+    if (!(name = get_member_name( object, member )))
+        return DISP_E_MEMBERNOTFOUND;
+
+    memset( params, 0, sizeof(*params) );
+    return IWbemClassObject_Get( object->object, name, 0, result, NULL, NULL );
 }
 
 static HRESULT WINAPI object_Put_(
@@ -258,6 +342,9 @@ static HRESULT SWbemObject_create( IWbemClassObject *wbem_object, ISWbemObject *
     object->refs = 1;
     object->object = wbem_object;
     IWbemClassObject_AddRef( object->object );
+    object->members = NULL;
+    object->nb_members = 0;
+    object->last_dispid = DISPID_BASE;
 
     *obj = &object->ISWbemObject_iface;
     TRACE( "returning iface %p\n", *obj );
@@ -401,8 +488,18 @@ static HRESULT WINAPI objectset_get__NewEnum(
     ISWbemObjectSet *iface,
     IUnknown **pUnk )
 {
-    FIXME( "\n" );
-    return E_NOTIMPL;
+    struct objectset *objectset = impl_from_ISWbemObjectSet( iface );
+    IEnumWbemClassObject *objectenum;
+    HRESULT hr;
+
+    TRACE( "%p, %p\n", objectset, pUnk );
+
+    hr = IEnumWbemClassObject_Clone( objectset->objectenum, &objectenum );
+    if (FAILED( hr )) return hr;
+
+    hr = EnumVARIANT_create( objectenum, (IEnumVARIANT **)pUnk );
+    IEnumWbemClassObject_Release( objectenum );
+    return hr;
 }
 
 static HRESULT WINAPI objectset_Item(
@@ -420,12 +517,20 @@ static HRESULT WINAPI objectset_get_Count(
     LONG *iCount )
 {
     struct objectset *objectset = impl_from_ISWbemObjectSet( iface );
+    LONG count = 0, total = 0;
 
     TRACE( "%p, %p\n", objectset, iCount );
 
-    *iCount = 0;
+    while (IEnumWbemClassObject_Skip( objectset->objectenum, WBEM_INFINITE, 1 ) == S_OK) count++;
+
     IEnumWbemClassObject_Reset( objectset->objectenum );
-    while (!IEnumWbemClassObject_Skip( objectset->objectenum, WBEM_INFINITE, 1 )) (*iCount)++;
+    while (IEnumWbemClassObject_Skip( objectset->objectenum, WBEM_INFINITE, 1 ) == S_OK) total++;
+
+    count = total - count;
+    IEnumWbemClassObject_Reset( objectset->objectenum );
+    while (count--) IEnumWbemClassObject_Skip( objectset->objectenum, WBEM_INFINITE, 1 );
+
+    *iCount = total;
     return S_OK;
 }
 
@@ -479,6 +584,138 @@ static HRESULT SWbemObjectSet_create( IEnumWbemClassObject *wbem_objectenum, ISW
     return S_OK;
 }
 
+struct enumvar
+{
+    IEnumVARIANT IEnumVARIANT_iface;
+    LONG refs;
+    IEnumWbemClassObject *objectenum;
+};
+
+static inline struct enumvar *impl_from_IEnumVARIANT(
+    IEnumVARIANT *iface )
+{
+    return CONTAINING_RECORD( iface, struct enumvar, IEnumVARIANT_iface );
+}
+
+static ULONG WINAPI enumvar_AddRef(
+    IEnumVARIANT *iface )
+{
+    struct enumvar *enumvar = impl_from_IEnumVARIANT( iface );
+    return InterlockedIncrement( &enumvar->refs );
+}
+
+static ULONG WINAPI enumvar_Release(
+    IEnumVARIANT *iface )
+{
+    struct enumvar *enumvar = impl_from_IEnumVARIANT( iface );
+    LONG refs = InterlockedDecrement( &enumvar->refs );
+    if (!refs)
+    {
+        TRACE( "destroying %p\n", enumvar );
+        IEnumWbemClassObject_Release( enumvar->objectenum );
+        heap_free( enumvar );
+    }
+    return refs;
+}
+
+static HRESULT WINAPI enumvar_QueryInterface(
+    IEnumVARIANT *iface,
+    REFIID riid,
+    void **ppvObject )
+{
+    struct enumvar *enumvar = impl_from_IEnumVARIANT( iface );
+
+    TRACE( "%p %s %p\n", enumvar, debugstr_guid(riid), ppvObject );
+
+    if (IsEqualGUID( riid, &IID_IEnumVARIANT ) ||
+        IsEqualGUID( riid, &IID_IUnknown ))
+    {
+        *ppvObject = enumvar;
+    }
+    else
+    {
+        FIXME( "interface %s not implemented\n", debugstr_guid(riid) );
+        return E_NOINTERFACE;
+    }
+    IEnumVARIANT_AddRef( iface );
+    return S_OK;
+}
+
+static HRESULT WINAPI enumvar_Next( IEnumVARIANT *iface, ULONG celt, VARIANT *var, ULONG *fetched )
+{
+    struct enumvar *enumvar = impl_from_IEnumVARIANT( iface );
+    IWbemClassObject *obj;
+    ULONG count = 0;
+
+    TRACE( "%p, %u, %p, %p\n", iface, celt, var, fetched );
+
+    if (celt) IEnumWbemClassObject_Next( enumvar->objectenum, WBEM_INFINITE, 1, &obj, &count );
+    if (count)
+    {
+        ISWbemObject *sobj;
+        HRESULT hr;
+
+        hr = SWbemObject_create( obj, &sobj );
+        IWbemClassObject_Release( obj );
+        if (FAILED( hr )) return hr;
+
+        V_VT( var ) = VT_DISPATCH;
+        V_DISPATCH( var ) = (IDispatch *)sobj;
+    }
+    if (fetched) *fetched = count;
+    return (count < celt) ? S_FALSE : S_OK;
+}
+
+static HRESULT WINAPI enumvar_Skip( IEnumVARIANT *iface, ULONG celt )
+{
+    struct enumvar *enumvar = impl_from_IEnumVARIANT( iface );
+
+    TRACE( "%p, %u\n", iface, celt );
+
+    return IEnumWbemClassObject_Skip( enumvar->objectenum, WBEM_INFINITE, celt );
+}
+
+static HRESULT WINAPI enumvar_Reset( IEnumVARIANT *iface )
+{
+    struct enumvar *enumvar = impl_from_IEnumVARIANT( iface );
+
+    TRACE( "%p\n", iface );
+
+    return IEnumWbemClassObject_Reset( enumvar->objectenum );
+}
+
+static HRESULT WINAPI enumvar_Clone( IEnumVARIANT *iface, IEnumVARIANT **penum )
+{
+    FIXME( "%p, %p\n", iface, penum );
+    return E_NOTIMPL;
+}
+
+static const struct IEnumVARIANTVtbl enumvar_vtbl =
+{
+    enumvar_QueryInterface,
+    enumvar_AddRef,
+    enumvar_Release,
+    enumvar_Next,
+    enumvar_Skip,
+    enumvar_Reset,
+    enumvar_Clone
+};
+
+static HRESULT EnumVARIANT_create( IEnumWbemClassObject *objectenum, IEnumVARIANT **obj )
+{
+    struct enumvar *enumvar;
+
+    if (!(enumvar = heap_alloc( sizeof(*enumvar) ))) return E_OUTOFMEMORY;
+    enumvar->IEnumVARIANT_iface.lpVtbl = &enumvar_vtbl;
+    enumvar->refs = 1;
+    enumvar->objectenum = objectenum;
+    IEnumWbemClassObject_AddRef( enumvar->objectenum );
+
+    *obj = &enumvar->IEnumVARIANT_iface;
+    TRACE( "returning iface %p\n", *obj );
+    return S_OK;
+}
+
 struct services
 {
     ISWbemServices ISWbemServices_iface;
@@ -671,6 +908,18 @@ static HRESULT WINAPI services_DeleteAsync(
     return E_NOTIMPL;
 }
 
+static BSTR build_query_string( const WCHAR *class )
+{
+    static const WCHAR selectW[] = {'S','E','L','E','C','T',' ','*',' ','F','R','O','M',' ',0};
+    UINT len = strlenW(class) + sizeof(selectW) / sizeof(selectW[0]);
+    BSTR ret;
+
+    if (!(ret = SysAllocStringLen( NULL, len ))) return NULL;
+    strcpyW( ret, selectW );
+    strcatW( ret, class );
+    return ret;
+}
+
 static HRESULT WINAPI services_InstancesOf(
     ISWbemServices *iface,
     BSTR strClass,
@@ -678,8 +927,22 @@ static HRESULT WINAPI services_InstancesOf(
     IDispatch *objWbemNamedValueSet,
     ISWbemObjectSet **objWbemObjectSet )
 {
-    FIXME( "\n" );
-    return E_NOTIMPL;
+    static const WCHAR wqlW[] = {'W','Q','L',0};
+    BSTR query, wql = SysAllocString( wqlW );
+    HRESULT hr;
+
+    TRACE( "%p, %s, %x, %p, %p\n", iface, debugstr_w(strClass), iFlags, objWbemNamedValueSet,
+           objWbemObjectSet );
+
+    if (!(query = build_query_string( strClass )))
+    {
+        SysFreeString( wql );
+        return E_OUTOFMEMORY;
+    }
+    hr = ISWbemServices_ExecQuery( iface, query, wql, iFlags, objWbemNamedValueSet, objWbemObjectSet );
+    SysFreeString( wql );
+    SysFreeString( query );
+    return hr;
 }
 
 static HRESULT WINAPI services_InstancesOfAsync(
diff --git a/dlls/wbemdisp/tests/wbemdisp.c b/dlls/wbemdisp/tests/wbemdisp.c
index 8c0b628..e3d432b 100644
--- a/dlls/wbemdisp/tests/wbemdisp.c
+++ b/dlls/wbemdisp/tests/wbemdisp.c
@@ -26,9 +26,14 @@
 #include "wine/test.h"
 
 DEFINE_GUID(CLSID_WINMGMTS,0x172bddf8,0xceea,0x11d1,0x8b,0x05,0x00,0x60,0x08,0x06,0xd9,0xb6);
+DEFINE_GUID(GUID_NULL,0,0,0,0,0,0,0,0,0,0,0);
 
 static void test_ParseDisplayName(void)
 {
+    static const WCHAR biosW[] = {'W','i','n','3','2','_','B','i','o','s',0};
+    static const WCHAR manufacturerW[] = {'M','a','n','u','f','a','c','t','u','r','e','r',0};
+    static const WCHAR versionW[] = {'v','e','r','s','i','o','n',0};
+    static const WCHAR nosuchW[] = {'N','o','S','u','c','h',0};
     static const WCHAR name1[] =
         {'w','i','n','m','g','m','t','s',':',0};
     static const WCHAR name2[] =
@@ -53,12 +58,13 @@ static void test_ParseDisplayName(void)
         { name3, S_OK, &IID_ISWbemObject, sizeof(name3)/sizeof(name3[0]) - 1 },
         { name4, S_OK, &IID_ISWbemObject, sizeof(name4)/sizeof(name4[0]) - 1 }
     };
+    LCID english = MAKELCID(MAKELANGID(LANG_ENGLISH,SUBLANG_ENGLISH_US),SORT_DEFAULT);
     IParseDisplayName *displayname;
     IBindCtx *ctx;
     IMoniker *moniker;
     IUnknown *obj;
     BSTR str;
-    ULONG i, eaten;
+    ULONG i, eaten, count;
     HRESULT hr;
 
     hr = CoCreateInstance( &CLSID_WINMGMTS, NULL, CLSCTX_INPROC_SERVER, &IID_IParseDisplayName, (void **)&displayname );
@@ -90,6 +96,149 @@ static void test_ParseDisplayName(void)
         }
     }
 
+    str = SysAllocString( name1 );
+    eaten = 0xdeadbeef;
+    moniker = NULL;
+    hr = IParseDisplayName_ParseDisplayName( displayname, NULL, str, &eaten, &moniker );
+    SysFreeString( str );
+    ok( hr == S_OK, "got %x\n", hr );
+    ok( eaten == lstrlenW(name1), "got %u\n", eaten );
+    if (moniker)
+    {
+        ISWbemServices *services = NULL;
+
+        hr = IMoniker_BindToObject( moniker, ctx, NULL, &IID_IUnknown, (void **)&services );
+        ok( hr == S_OK, "got %x\n", hr );
+        if (services)
+        {
+            ISWbemObjectSet *objectset = NULL;
+
+            str = SysAllocString( biosW );
+            hr = ISWbemServices_InstancesOf( services, str, 0, NULL, &objectset );
+            SysFreeString( str );
+            ok( hr == S_OK, "got %x\n", hr );
+            if (objectset)
+            {
+                hr = ISWbemObjectSet_get__NewEnum( objectset, &obj );
+                ok( hr == S_OK, "got %x\n", hr );
+                if (obj)
+                {
+                    IEnumVARIANT *enumvar = NULL;
+
+                    hr = IUnknown_QueryInterface( obj, &IID_IEnumVARIANT, (void **)&enumvar );
+                    ok( hr == S_OK, "got %x\n", hr );
+
+                    if (enumvar)
+                    {
+                        VARIANT var, res;
+                        ULONG fetched;
+                        IDispatch *dispatch = NULL;
+                        DISPID dispid;
+                        DISPPARAMS params;
+                        UINT arg_err;
+
+                        fetched = 0xdeadbeef;
+                        hr = IEnumVARIANT_Next( enumvar, 0, &var, &fetched );
+                        ok( hr == S_OK, "got %x\n", hr );
+                        ok( !fetched, "got %u\n", fetched );
+
+                        fetched = 0xdeadbeef;
+                        V_VT( &var ) = VT_ERROR;
+                        V_ERROR( &var ) = 0xdeadbeef;
+                        hr = IEnumVARIANT_Next( enumvar, 1, &var, &fetched );
+                        ok( hr == S_OK, "got %x\n", hr );
+                        ok( fetched == 1, "got %u\n", fetched );
+                        ok( V_VT( &var ) == VT_DISPATCH, "got %u\n", V_VT( &var ) );
+                        ok( V_DISPATCH( &var ) != (IDispatch *)0xdeadbeef, "got %u\n", V_VT( &var ) );
+
+                        dispatch = V_DISPATCH( &var );
+                        count = 0;
+                        hr = IDispatch_GetTypeInfoCount( dispatch, &count );
+                        ok( hr == S_OK, "got %x\n", hr );
+                        ok( count == 1, "got %u\n", count );
+
+                        str = SysAllocString( manufacturerW );
+                        dispid = 0xdeadbeef;
+                        hr = IDispatch_GetIDsOfNames( dispatch, &IID_NULL, &str, 1, english, &dispid );
+                        SysFreeString( str );
+                        ok( hr == S_OK, "got %x\n", hr );
+                        ok( dispid == 0x1800001 || dispid == 0x10b /* win2k */, "got %x\n", dispid );
+
+                        str = SysAllocString( versionW );
+                        dispid = 0xdeadbeef;
+                        hr = IDispatch_GetIDsOfNames( dispatch, &IID_NULL, &str, 1, english, &dispid );
+                        SysFreeString( str );
+                        ok( hr == S_OK, "got %x\n", hr );
+                        ok( dispid == 0x1800002 || dispid == 0x119 /* win2k */, "got %x\n", dispid );
+
+                        str = SysAllocString( nosuchW );
+                        dispid = 0xdeadbeef;
+                        hr = IDispatch_GetIDsOfNames( dispatch, &IID_NULL, &str, 1, english, &dispid );
+                        SysFreeString( str );
+                        ok( hr == DISP_E_UNKNOWNNAME, "got %x\n", hr );
+                        ok( dispid == DISPID_UNKNOWN, "got %x\n", dispid );
+
+                        str = SysAllocString( manufacturerW );
+                        dispid = 0xdeadbeef;
+                        hr = IDispatch_GetIDsOfNames( dispatch, &IID_NULL, &str, 1, english, &dispid );
+                        SysFreeString( str );
+                        ok( hr == S_OK, "got %x\n", hr );
+                        ok( dispid == 0x1800001 || dispid == 0x10b /* win2k */, "got %x\n", dispid );
+
+                        if (dispid == 0x1800001) /* crashes on win2k */
+                        {
+                            V_VT( &res ) = VT_ERROR;
+                            V_BSTR( &res ) = (BSTR)0xdeadbeef;
+                            params.rgvarg = (VARIANTARG *)0xdeadbeef;
+                            params.rgdispidNamedArgs = (DISPID *)0xdeadbeef;
+                            params.cArgs = params.cNamedArgs = 0xdeadbeef;
+                            arg_err = 0xdeadbeef;
+                            hr = IDispatch_Invoke( dispatch, DISPID_UNKNOWN, &IID_NULL, english,
+                                                   DISPATCH_METHOD|DISPATCH_PROPERTYGET,
+                                                   &params, &res, NULL, &arg_err );
+                            ok( hr == DISP_E_MEMBERNOTFOUND || hr == S_OK /* winxp */, "got %x\n", hr );
+                            ok( params.rgvarg == (VARIANTARG *)0xdeadbeef, "got %p\n", params.rgvarg );
+                            ok( params.rgdispidNamedArgs == (DISPID *)0xdeadbeef, "got %p\n", params.rgdispidNamedArgs );
+                            ok( params.cArgs == 0xdeadbeef, "got %u\n", params.cArgs );
+                            ok( params.cNamedArgs == 0xdeadbeef, "got %u\n", params.cNamedArgs );
+                            ok( V_VT( &res ) == VT_ERROR, "got %u\n", V_VT( &res ) );
+                            ok( V_ERROR( &res ) == 0xdeadbeef, "got %u\n", V_VT( &res ) );
+                            ok( arg_err == 0xdeadbeef, "got %u\n", arg_err );
+                            if (hr == S_OK) VariantClear( &res );
+                        }
+
+                        V_VT( &res ) = VT_ERROR;
+                        V_BSTR( &res ) = (BSTR)0xdeadbeef;
+                        memset( &params, 0, sizeof(params) );
+                        hr = IDispatch_Invoke( dispatch, dispid, &IID_NULL, english,
+                                               DISPATCH_METHOD|DISPATCH_PROPERTYGET,
+                                               &params, &res, NULL, NULL );
+                        ok( hr == S_OK, "got %x\n", hr );
+                        ok( params.rgvarg == NULL, "got %p\n", params.rgvarg );
+                        ok( params.rgdispidNamedArgs == NULL, "got %p\n", params.rgdispidNamedArgs );
+                        ok( !params.cArgs, "got %u\n", params.cArgs );
+                        ok( !params.cNamedArgs, "got %u\n", params.cNamedArgs );
+                        ok( V_VT( &res ) == VT_BSTR, "got %u\n", V_VT( &res ) );
+                        ok( V_BSTR( &res ) != (BSTR)0xdeadbeef, "got %u\n", V_VT( &res ) );
+                        VariantClear( &res );
+                        VariantClear( &var );
+
+                        fetched = 0xdeadbeef;
+                        hr = IEnumVARIANT_Next( enumvar, 1, &var, &fetched );
+                        ok( hr == S_FALSE, "got %x\n", hr );
+                        ok( !fetched, "got %u\n", fetched );
+
+                        IEnumVARIANT_Release( enumvar );
+                    }
+                    IUnknown_Release( obj );
+                }
+                ISWbemObjectSet_Release( objectset );
+            }
+            IUnknown_Release( services );
+        }
+        IMoniker_Release( moniker );
+    }
+
     IBindCtx_Release( ctx );
     IParseDisplayName_Release( displayname );
 }
diff --git a/dlls/winealsa.drv/mmdevdrv.c b/dlls/winealsa.drv/mmdevdrv.c
index 2079dcc..e32cb54 100644
--- a/dlls/winealsa.drv/mmdevdrv.c
+++ b/dlls/winealsa.drv/mmdevdrv.c
@@ -1130,11 +1130,11 @@ static int alsa_channel_index(DWORD flag)
     return -1;
 }
 
-static BOOL need_remapping(ACImpl *This, const WAVEFORMATEX *fmt)
+static BOOL need_remapping(ACImpl *This, const WAVEFORMATEX *fmt, int *map)
 {
     unsigned int i;
     for(i = 0; i < fmt->nChannels; ++i){
-        if(This->alsa_channel_map[i] != i)
+        if(map[i] != i)
             return TRUE;
     }
     return FALSE;
@@ -1166,8 +1166,10 @@ static DWORD get_channel_mask(unsigned int channels)
     return 0;
 }
 
-static HRESULT map_channels(ACImpl *This, const WAVEFORMATEX *fmt)
+static HRESULT map_channels(ACImpl *This, const WAVEFORMATEX *fmt, int *alsa_channels, int *map)
 {
+    BOOL need_remap;
+
     if(This->dataflow != eCapture && (fmt->wFormatTag == WAVE_FORMAT_EXTENSIBLE || fmt->nChannels > 2) ){
         WAVEFORMATEXTENSIBLE *fmtex = (void*)fmt;
         DWORD mask, flag = SPEAKER_FRONT_LEFT;
@@ -1179,47 +1181,47 @@ static HRESULT map_channels(ACImpl *This, const WAVEFORMATEX *fmt)
         else
             mask = get_channel_mask(fmt->nChannels);
 
-        This->alsa_channels = 0;
+        *alsa_channels = 0;
 
         while(i < fmt->nChannels && !(flag & SPEAKER_RESERVED)){
             if(mask & flag){
-                This->alsa_channel_map[i] = alsa_channel_index(flag);
+                map[i] = alsa_channel_index(flag);
                 TRACE("Mapping mmdevapi channel %u (0x%x) to ALSA channel %d\n",
-                        i, flag, This->alsa_channel_map[i]);
-                if(This->alsa_channel_map[i] >= This->alsa_channels)
-                    This->alsa_channels = This->alsa_channel_map[i] + 1;
+                        i, flag, map[i]);
+                if(map[i] >= *alsa_channels)
+                    *alsa_channels = map[i] + 1;
                 ++i;
             }
             flag <<= 1;
         }
 
         while(i < fmt->nChannels){
-            This->alsa_channel_map[i] = This->alsa_channels;
+            map[i] = *alsa_channels;
             TRACE("Mapping mmdevapi channel %u to ALSA channel %d\n",
-                    i, This->alsa_channel_map[i]);
-            ++This->alsa_channels;
+                    i, map[i]);
+            ++*alsa_channels;
             ++i;
         }
 
         for(i = 0; i < fmt->nChannels; ++i){
-            if(This->alsa_channel_map[i] == -1){
-                This->alsa_channel_map[i] = This->alsa_channels;
-                ++This->alsa_channels;
+            if(map[i] == -1){
+                map[i] = *alsa_channels;
+                ++*alsa_channels;
                 TRACE("Remapping mmdevapi channel %u to ALSA channel %d\n",
-                        i, This->alsa_channel_map[i]);
+                        i, map[i]);
             }
         }
 
-        This->need_remapping = need_remapping(This, fmt);
-
-        TRACE("need_remapping: %u, alsa_channels: %d\n", This->need_remapping, This->alsa_channels);
+        need_remap = need_remapping(This, fmt, map);
     }else{
-        This->need_remapping = FALSE;
-        This->alsa_channels = fmt->nChannels;
-        TRACE("need_remapping: %u, alsa_channels: %d\n", This->need_remapping, This->alsa_channels);
+        *alsa_channels = fmt->nChannels;
+
+        need_remap = FALSE;
     }
 
-    return S_OK;
+    TRACE("need_remapping: %u, alsa_channels: %d\n", need_remap, *alsa_channels);
+
+    return need_remap ? S_OK : S_FALSE;
 }
 
 static void silence_buffer(ACImpl *This, BYTE *buffer, UINT32 frames)
@@ -1304,11 +1306,7 @@ static HRESULT WINAPI AudioClient_Initialize(IAudioClient *iface,
 
     dump_fmt(fmt);
 
-    if(FAILED(map_channels(This, fmt))){
-        WARN("map_channels failed\n");
-        hr = AUDCLNT_E_ENDPOINT_CREATE_FAILED;
-        goto exit;
-    }
+    This->need_remapping = map_channels(This, fmt, &This->alsa_channels, This->alsa_channel_map) == S_OK ? TRUE : FALSE;
 
     if((err = snd_pcm_hw_params_any(This->pcm_handle, This->hw_params)) < 0){
         WARN("Unable to get hw_params: %d (%s)\n", err, snd_strerror(err));
@@ -1623,6 +1621,7 @@ static HRESULT WINAPI AudioClient_IsFormatSupported(IAudioClient *iface,
     WAVEFORMATEX *closest = NULL;
     unsigned int max = 0, min = 0;
     int err;
+    int alsa_channels, alsa_channel_map[32];
 
     TRACE("(%p)->(%x, %p, %p)\n", This, mode, fmt, out);
 
@@ -1717,12 +1716,9 @@ static HRESULT WINAPI AudioClient_IsFormatSupported(IAudioClient *iface,
         closest->nChannels = min;
     }
 
-    if(FAILED(map_channels(This, fmt))){
-        hr = AUDCLNT_E_DEVICE_INVALIDATED;
-        WARN("map_channels failed\n");
-        goto exit;
-    }
-    if(This->alsa_channels > max){
+    map_channels(This, fmt, &alsa_channels, alsa_channel_map);
+
+    if(alsa_channels > max){
         hr = S_FALSE;
         closest->nChannels = max;
     }
diff --git a/dlls/wined3d/buffer.c b/dlls/wined3d/buffer.c
index 989026f..2fba83b 100644
--- a/dlls/wined3d/buffer.c
+++ b/dlls/wined3d/buffer.c
@@ -105,8 +105,8 @@ static void delete_gl_buffer(struct wined3d_buffer *This, const struct wined3d_g
 {
     if(!This->buffer_object) return;
 
-    GL_EXTCALL(glDeleteBuffersARB(1, &This->buffer_object));
-    checkGLcall("glDeleteBuffersARB");
+    GL_EXTCALL(glDeleteBuffers(1, &This->buffer_object));
+    checkGLcall("glDeleteBuffers");
     This->buffer_object = 0;
 
     if(This->query)
@@ -140,7 +140,7 @@ static void buffer_create_buffer_object(struct wined3d_buffer *This, struct wine
      * to be verified to check if the rhw and color values are in the correct
      * format. */
 
-    GL_EXTCALL(glGenBuffersARB(1, &This->buffer_object));
+    GL_EXTCALL(glGenBuffers(1, &This->buffer_object));
     error = gl_info->gl_ops.gl.p_glGetError();
     if (!This->buffer_object || error != GL_NO_ERROR)
     {
@@ -150,7 +150,7 @@ static void buffer_create_buffer_object(struct wined3d_buffer *This, struct wine
 
     if (This->buffer_type_hint == GL_ELEMENT_ARRAY_BUFFER_ARB)
         context_invalidate_state(context, STATE_INDEXBUFFER);
-    GL_EXTCALL(glBindBufferARB(This->buffer_type_hint, This->buffer_object));
+    GL_EXTCALL(glBindBuffer(This->buffer_type_hint, This->buffer_object));
     error = gl_info->gl_ops.gl.p_glGetError();
     if (error != GL_NO_ERROR)
     {
@@ -181,11 +181,11 @@ static void buffer_create_buffer_object(struct wined3d_buffer *This, struct wine
      * calling glBufferSubData on updates. Upload the actual data in case
      * we're not double buffering, so we can release the heap mem afterwards
      */
-    GL_EXTCALL(glBufferDataARB(This->buffer_type_hint, This->resource.size, This->resource.heap_memory, gl_usage));
+    GL_EXTCALL(glBufferData(This->buffer_type_hint, This->resource.size, This->resource.heap_memory, gl_usage));
     error = gl_info->gl_ops.gl.p_glGetError();
     if (error != GL_NO_ERROR)
     {
-        ERR("glBufferDataARB failed with error %s (%#x)\n", debug_glerror(error), error);
+        ERR("glBufferData failed with error %s (%#x)\n", debug_glerror(error), error);
         goto fail;
     }
 
@@ -500,8 +500,8 @@ BYTE *buffer_get_sysmem(struct wined3d_buffer *This, struct wined3d_context *con
     if (This->buffer_type_hint == GL_ELEMENT_ARRAY_BUFFER_ARB)
         context_invalidate_state(context, STATE_INDEXBUFFER);
 
-    GL_EXTCALL(glBindBufferARB(This->buffer_type_hint, This->buffer_object));
-    GL_EXTCALL(glGetBufferSubDataARB(This->buffer_type_hint, 0, This->resource.size, This->resource.heap_memory));
+    GL_EXTCALL(glBindBuffer(This->buffer_type_hint, This->buffer_object));
+    GL_EXTCALL(glGetBufferSubData(This->buffer_type_hint, 0, This->resource.size, This->resource.heap_memory));
     This->flags |= WINED3D_BUFFER_DOUBLEBUFFER;
 
     return This->resource.heap_memory;
@@ -589,8 +589,8 @@ static void buffer_sync_apple(struct wined3d_buffer *This, DWORD flags, const st
 
     if (flags & WINED3D_MAP_DISCARD)
     {
-        GL_EXTCALL(glBufferDataARB(This->buffer_type_hint, This->resource.size, NULL, This->buffer_object_usage));
-        checkGLcall("glBufferDataARB\n");
+        GL_EXTCALL(glBufferData(This->buffer_type_hint, This->resource.size, NULL, This->buffer_object_usage));
+        checkGLcall("glBufferData");
         return;
     }
 
@@ -654,8 +654,8 @@ static void buffer_direct_upload(struct wined3d_buffer *This, const struct wined
 
     /* This potentially invalidates the element array buffer binding, but the
      * caller always takes care of this. */
-    GL_EXTCALL(glBindBufferARB(This->buffer_type_hint, This->buffer_object));
-    checkGLcall("glBindBufferARB");
+    GL_EXTCALL(glBindBuffer(This->buffer_type_hint, This->buffer_object));
+    checkGLcall("glBindBuffer");
     if (gl_info->supported[ARB_MAP_BUFFER_RANGE])
     {
         GLbitfield mapflags;
@@ -679,8 +679,8 @@ static void buffer_direct_upload(struct wined3d_buffer *This, const struct wined
                 syncflags |= WINED3D_MAP_NOOVERWRITE;
             buffer_sync_apple(This, syncflags, gl_info);
         }
-        map = GL_EXTCALL(glMapBufferARB(This->buffer_type_hint, GL_WRITE_ONLY_ARB));
-        checkGLcall("glMapBufferARB");
+        map = GL_EXTCALL(glMapBuffer(This->buffer_type_hint, GL_WRITE_ONLY));
+        checkGLcall("glMapBuffer");
     }
     if (!map)
     {
@@ -707,8 +707,8 @@ static void buffer_direct_upload(struct wined3d_buffer *This, const struct wined
             checkGLcall("glFlushMappedBufferRangeAPPLE");
         }
     }
-    GL_EXTCALL(glUnmapBufferARB(This->buffer_type_hint));
-    checkGLcall("glUnmapBufferARB");
+    GL_EXTCALL(glUnmapBuffer(This->buffer_type_hint));
+    checkGLcall("glUnmapBuffer");
 }
 
 void buffer_mark_used(struct wined3d_buffer *buffer)
@@ -913,10 +913,10 @@ void buffer_internal_preload(struct wined3d_buffer *buffer, struct wined3d_conte
             }
         }
 
-        GL_EXTCALL(glBindBufferARB(buffer->buffer_type_hint, buffer->buffer_object));
-        checkGLcall("glBindBufferARB");
-        GL_EXTCALL(glBufferSubDataARB(buffer->buffer_type_hint, start, len, data + start));
-        checkGLcall("glBufferSubDataARB");
+        GL_EXTCALL(glBindBuffer(buffer->buffer_type_hint, buffer->buffer_object));
+        checkGLcall("glBindBuffer");
+        GL_EXTCALL(glBufferSubData(buffer->buffer_type_hint, start, len, data + start));
+        checkGLcall("glBufferSubData");
     }
 
     HeapFree(GetProcessHeap(), 0, data);
@@ -979,7 +979,7 @@ HRESULT CDECL wined3d_buffer_map(struct wined3d_buffer *buffer, UINT offset, UIN
 
                 if (buffer->buffer_type_hint == GL_ELEMENT_ARRAY_BUFFER_ARB)
                     context_invalidate_state(context, STATE_INDEXBUFFER);
-                GL_EXTCALL(glBindBufferARB(buffer->buffer_type_hint, buffer->buffer_object));
+                GL_EXTCALL(glBindBuffer(buffer->buffer_type_hint, buffer->buffer_object));
 
                 if (gl_info->supported[ARB_MAP_BUFFER_RANGE])
                 {
@@ -992,17 +992,17 @@ HRESULT CDECL wined3d_buffer_map(struct wined3d_buffer *buffer, UINT offset, UIN
                 {
                     if (buffer->flags & WINED3D_BUFFER_APPLESYNC)
                         buffer_sync_apple(buffer, flags, gl_info);
-                    buffer->map_ptr = GL_EXTCALL(glMapBufferARB(buffer->buffer_type_hint,
-                            GL_READ_WRITE_ARB));
-                    checkGLcall("glMapBufferARB");
+                    buffer->map_ptr = GL_EXTCALL(glMapBuffer(buffer->buffer_type_hint,
+                            GL_READ_WRITE));
+                    checkGLcall("glMapBuffer");
                 }
 
                 if (((DWORD_PTR)buffer->map_ptr) & (RESOURCE_ALIGNMENT - 1))
                 {
                     WARN("Pointer %p is not %u byte aligned.\n", buffer->map_ptr, RESOURCE_ALIGNMENT);
 
-                    GL_EXTCALL(glUnmapBufferARB(buffer->buffer_type_hint));
-                    checkGLcall("glUnmapBufferARB");
+                    GL_EXTCALL(glUnmapBuffer(buffer->buffer_type_hint));
+                    checkGLcall("glUnmapBuffer");
                     buffer->map_ptr = NULL;
 
                     if (buffer->resource.usage & WINED3DUSAGE_DYNAMIC)
@@ -1078,7 +1078,7 @@ void CDECL wined3d_buffer_unmap(struct wined3d_buffer *buffer)
 
         if (buffer->buffer_type_hint == GL_ELEMENT_ARRAY_BUFFER_ARB)
             context_invalidate_state(context, STATE_INDEXBUFFER);
-        GL_EXTCALL(glBindBufferARB(buffer->buffer_type_hint, buffer->buffer_object));
+        GL_EXTCALL(glBindBuffer(buffer->buffer_type_hint, buffer->buffer_object));
 
         if (gl_info->supported[ARB_MAP_BUFFER_RANGE])
         {
@@ -1099,7 +1099,7 @@ void CDECL wined3d_buffer_unmap(struct wined3d_buffer *buffer)
             }
         }
 
-        GL_EXTCALL(glUnmapBufferARB(buffer->buffer_type_hint));
+        GL_EXTCALL(glUnmapBuffer(buffer->buffer_type_hint));
         if (wined3d_settings.strict_draw_ordering)
             gl_info->gl_ops.gl.p_glFlush(); /* Flush to ensure ordering across contexts. */
         context_release(context);
diff --git a/dlls/wined3d/context.c b/dlls/wined3d/context.c
index ead7e1b..851eb9a 100644
--- a/dlls/wined3d/context.c
+++ b/dlls/wined3d/context.c
@@ -1920,6 +1920,8 @@ static void SetupForBlit(const struct wined3d_device *device, struct wined3d_con
             context_invalidate_state(context, STATE_SAMPLER(sampler));
         }
     }
+    if (gl_info->supported[ARB_SAMPLER_OBJECTS])
+        GL_EXTCALL(glBindSampler(0, 0));
     context_active_texture(context, gl_info, 0);
 
     sampler = context->rev_tex_unit_map[0];
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 1d293bf..1156a7e 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -479,6 +479,13 @@ ULONG CDECL wined3d_device_incref(struct wined3d_device *device)
     return refcount;
 }
 
+static void device_leftover_sampler(struct wine_rb_entry *entry, void *context)
+{
+    struct wined3d_sampler *sampler = WINE_RB_ENTRY_VALUE(entry, struct wined3d_sampler, entry);
+
+    ERR("Leftover sampler %p.\n", sampler);
+}
+
 ULONG CDECL wined3d_device_decref(struct wined3d_device *device)
 {
     ULONG refcount = InterlockedDecrement(&device->ref);
@@ -522,6 +529,8 @@ ULONG CDECL wined3d_device_decref(struct wined3d_device *device)
             DestroyCursor(device->hardwareCursor);
         device->hardwareCursor = 0;
 
+        wine_rb_destroy(&device->samplers, device_leftover_sampler, NULL);
+
         wined3d_decref(device->wined3d);
         device->wined3d = NULL;
         HeapFree(GetProcessHeap(), 0, device);
@@ -1020,6 +1029,14 @@ err_out:
     return hr;
 }
 
+static void device_free_sampler(struct wine_rb_entry *entry, void *context)
+{
+    struct wined3d_sampler *sampler = WINE_RB_ENTRY_VALUE(entry, struct wined3d_sampler, entry);
+    struct wined3d_device *device = context;
+
+    wine_rb_remove(&device->samplers, &sampler->desc);
+}
+
 HRESULT CDECL wined3d_device_uninit_3d(struct wined3d_device *device)
 {
     struct wined3d_resource *resource, *cursor;
@@ -1054,6 +1071,8 @@ HRESULT CDECL wined3d_device_uninit_3d(struct wined3d_device *device)
         resource->resource_ops->resource_unload(resource);
     }
 
+    wine_rb_for_each_entry(&device->samplers, device_free_sampler, device);
+
     /* Destroy the depth blt resources, they will be invalid after the reset. Also free shader
      * private data, it might contain opengl pointers
      */
@@ -3019,7 +3038,7 @@ HRESULT CDECL wined3d_device_process_vertices(struct wined3d_device *device,
         e->data.addr += (ULONG_PTR)buffer_get_sysmem(buffer, context);
         if (buffer->buffer_object)
         {
-            GL_EXTCALL(glDeleteBuffersARB(1, &buffer->buffer_object));
+            GL_EXTCALL(glDeleteBuffers(1, &buffer->buffer_object));
             buffer->buffer_object = 0;
         }
         if (e->data.addr)
@@ -4658,6 +4677,8 @@ HRESULT CDECL wined3d_device_reset(struct wined3d_device *device,
     swapchain_update_render_to_fbo(swapchain);
     swapchain_update_draw_bindings(swapchain);
 
+    wine_rb_for_each_entry(&device->samplers, device_free_sampler, device);
+
     if (reset_state && device->d3d_initialized)
         hr = create_primary_opengl_context(device, swapchain);
 
@@ -4850,6 +4871,21 @@ struct wined3d_surface * CDECL wined3d_device_get_surface_from_dc(const struct w
     return NULL;
 }
 
+static int wined3d_sampler_compare(const void *key, const struct wine_rb_entry *entry)
+{
+    const struct wined3d_sampler *sampler = WINE_RB_ENTRY_VALUE(entry, struct wined3d_sampler, entry);
+
+    return memcmp(&sampler->desc, key, sizeof(sampler->desc));
+}
+
+static const struct wine_rb_functions wined3d_sampler_rb_functions =
+{
+    wined3d_rb_alloc,
+    wined3d_rb_realloc,
+    wined3d_rb_free,
+    wined3d_sampler_compare,
+};
+
 HRESULT device_init(struct wined3d_device *device, struct wined3d *wined3d,
         UINT adapter_idx, enum wined3d_device_type device_type, HWND focus_window, DWORD flags,
         BYTE surface_alignment, struct wined3d_device_parent *device_parent)
@@ -4881,12 +4917,19 @@ HRESULT device_init(struct wined3d_device *device, struct wined3d *wined3d,
 
     fragment_pipeline = adapter->fragment_pipe;
 
+    if (wine_rb_init(&device->samplers, &wined3d_sampler_rb_functions) == -1)
+    {
+        ERR("Failed to initialize sampler rbtree.\n");
+        return E_OUTOFMEMORY;
+    }
+
     if (vertex_pipeline->vp_states && fragment_pipeline->states
             && FAILED(hr = compile_state_table(device->StateTable, device->multistate_funcs,
             &adapter->gl_info, &adapter->d3d_info, vertex_pipeline,
             fragment_pipeline, misc_state_template)))
     {
         ERR("Failed to compile state table, hr %#x.\n", hr);
+        wine_rb_destroy(&device->samplers, NULL, NULL);
         wined3d_decref(device->wined3d);
         return hr;
     }
@@ -4916,6 +4959,7 @@ err:
     {
         HeapFree(GetProcessHeap(), 0, device->multistate_funcs[i]);
     }
+    wine_rb_destroy(&device->samplers, NULL, NULL);
     wined3d_decref(device->wined3d);
     return hr;
 }
diff --git a/dlls/wined3d/directx.c b/dlls/wined3d/directx.c
index f42769b..a91090e 100644
--- a/dlls/wined3d/directx.c
+++ b/dlls/wined3d/directx.c
@@ -135,6 +135,7 @@ static const struct wined3d_extension_map gl_extension_map[] =
     {"GL_ARB_point_parameters",             ARB_POINT_PARAMETERS          },
     {"GL_ARB_point_sprite",                 ARB_POINT_SPRITE              },
     {"GL_ARB_provoking_vertex",             ARB_PROVOKING_VERTEX          },
+    {"GL_ARB_sampler_objects",              ARB_SAMPLER_OBJECTS           },
     {"GL_ARB_shader_bit_encoding",          ARB_SHADER_BIT_ENCODING       },
     {"GL_ARB_shader_objects",               ARB_SHADER_OBJECTS            },
     {"GL_ARB_shader_texture_lod",           ARB_SHADER_TEXTURE_LOD        },
@@ -247,34 +248,12 @@ const struct min_lookup minMipLookup[] =
     {{GL_LINEAR,    GL_LINEAR_MIPMAP_NEAREST,   GL_LINEAR_MIPMAP_LINEAR}},  /* LINEAR */
 };
 
-const struct min_lookup minMipLookup_noFilter[] =
-{
-    /* NONE         POINT                       LINEAR */
-    {{GL_NEAREST,   GL_NEAREST,                 GL_NEAREST}},               /* NONE */
-    {{GL_NEAREST,   GL_NEAREST,                 GL_NEAREST}},               /* POINT */
-    {{GL_NEAREST,   GL_NEAREST,                 GL_NEAREST}},               /* LINEAR */
-};
-
-const struct min_lookup minMipLookup_noMip[] =
-{
-    /* NONE         POINT                       LINEAR */
-    {{GL_NEAREST,   GL_NEAREST,                 GL_NEAREST}},               /* NONE */
-    {{GL_NEAREST,   GL_NEAREST,                 GL_NEAREST}},               /* POINT */
-    {{GL_LINEAR,    GL_LINEAR,                  GL_LINEAR }},               /* LINEAR */
-};
-
 const GLenum magLookup[] =
 {
     /* NONE     POINT       LINEAR */
     GL_NEAREST, GL_NEAREST, GL_LINEAR,
 };
 
-const GLenum magLookup_noFilter[] =
-{
-    /* NONE     POINT       LINEAR */
-    GL_NEAREST, GL_NEAREST, GL_NEAREST,
-};
-
 struct wined3d_caps_gl_ctx
 {
     HDC dc;
@@ -570,15 +549,15 @@ static void test_pbo_functionality(struct wined3d_gl_info *gl_info)
     gl_info->gl_ops.gl.p_glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, 4, 4, 0, GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV, 0);
     checkGLcall("Specifying the PBO test texture");
 
-    GL_EXTCALL(glGenBuffersARB(1, &pbo));
-    GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, pbo));
-    GL_EXTCALL(glBufferDataARB(GL_PIXEL_UNPACK_BUFFER_ARB, sizeof(pattern), pattern, GL_STREAM_DRAW_ARB));
+    GL_EXTCALL(glGenBuffers(1, &pbo));
+    GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, pbo));
+    GL_EXTCALL(glBufferData(GL_PIXEL_UNPACK_BUFFER, sizeof(pattern), pattern, GL_STREAM_DRAW));
     checkGLcall("Specifying the PBO test pbo");
 
     gl_info->gl_ops.gl.p_glTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, 4, 4, GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV, NULL);
     checkGLcall("Loading the PBO test texture");
 
-    GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, 0));
+    GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, 0));
 
     gl_info->gl_ops.gl.p_glFinish(); /* just to be sure */
 
@@ -587,7 +566,7 @@ static void test_pbo_functionality(struct wined3d_gl_info *gl_info)
     checkGLcall("Reading back the PBO test texture");
 
     gl_info->gl_ops.gl.p_glDeleteTextures(1, &texture);
-    GL_EXTCALL(glDeleteBuffersARB(1, &pbo));
+    GL_EXTCALL(glDeleteBuffers(1, &pbo));
     checkGLcall("PBO test cleanup");
 
     if (memcmp(check, pattern, sizeof(check)))
@@ -2539,6 +2518,21 @@ static void load_gl_funcs(struct wined3d_gl_info *gl_info)
     USE_GL_FUNC(glPointParameterfvARB)
     /* GL_ARB_provoking_vertex */
     USE_GL_FUNC(glProvokingVertex)
+    /* GL_ARB_sampler_objects */
+    USE_GL_FUNC(glGenSamplers)
+    USE_GL_FUNC(glDeleteSamplers)
+    USE_GL_FUNC(glIsSampler)
+    USE_GL_FUNC(glBindSampler)
+    USE_GL_FUNC(glSamplerParameteri)
+    USE_GL_FUNC(glSamplerParameterf)
+    USE_GL_FUNC(glSamplerParameteriv)
+    USE_GL_FUNC(glSamplerParameterfv)
+    USE_GL_FUNC(glSamplerParameterIiv)
+    USE_GL_FUNC(glSamplerParameterIuiv)
+    USE_GL_FUNC(glGetSamplerParameteriv)
+    USE_GL_FUNC(glGetSamplerParameterfv)
+    USE_GL_FUNC(glGetSamplerParameterIiv)
+    USE_GL_FUNC(glGetSamplerParameterIuiv)
     /* GL_ARB_shader_objects */
     USE_GL_FUNC(glAttachObjectARB)
     USE_GL_FUNC(glBindAttribLocationARB)
@@ -2876,10 +2870,19 @@ static void load_gl_funcs(struct wined3d_gl_info *gl_info)
 
     /* Newer core functions */
     USE_GL_FUNC(glActiveTexture)            /* OpenGL 1.3 */
+    USE_GL_FUNC(glBindBuffer)               /* OpenGL 1.5 */
     USE_GL_FUNC(glBlendColor)               /* OpenGL 1.4 */
     USE_GL_FUNC(glBlendEquation)            /* OpenGL 1.4 */
     USE_GL_FUNC(glBlendEquationSeparate)    /* OpenGL 2.0 */
     USE_GL_FUNC(glBlendFuncSeparate)        /* OpenGL 1.4 */
+    USE_GL_FUNC(glBufferData)               /* OpenGL 1.5 */
+    USE_GL_FUNC(glBufferSubData)            /* OpenGL 1.5 */
+    USE_GL_FUNC(glColorMaski)               /* OpenGL 3.0 */
+    USE_GL_FUNC(glDeleteBuffers)            /* OpenGL 1.5 */
+    USE_GL_FUNC(glGenBuffers)               /* OpenGL 1.5 */
+    USE_GL_FUNC(glGetBufferSubData)         /* OpenGL 1.5 */
+    USE_GL_FUNC(glMapBuffer)                /* OpenGL 1.5 */
+    USE_GL_FUNC(glUnmapBuffer)              /* OpenGL 1.5 */
 #undef USE_GL_FUNC
 
 #ifndef USE_WIN32_OPENGL
@@ -2896,10 +2899,19 @@ static void load_gl_funcs(struct wined3d_gl_info *gl_info)
         } while (0)
 
     MAP_GL_FUNCTION(glActiveTexture, glActiveTextureARB);
+    MAP_GL_FUNCTION(glBindBuffer, glBindBufferARB);
     MAP_GL_FUNCTION(glBlendColor, glBlendColorEXT);
     MAP_GL_FUNCTION(glBlendEquation, glBlendEquationEXT);
     MAP_GL_FUNCTION(glBlendEquationSeparate, glBlendEquationSeparateEXT);
     MAP_GL_FUNCTION(glBlendFuncSeparate, glBlendFuncSeparateEXT);
+    MAP_GL_FUNCTION(glBufferData, glBufferDataARB);
+    MAP_GL_FUNCTION(glBufferSubData, glBufferSubDataARB);
+    MAP_GL_FUNCTION(glColorMaski, glColorMaskIndexedEXT);
+    MAP_GL_FUNCTION(glDeleteBuffers, glDeleteBuffersARB);
+    MAP_GL_FUNCTION(glGenBuffers, glGenBuffersARB);
+    MAP_GL_FUNCTION(glGetBufferSubData, glGetBufferSubDataARB);
+    MAP_GL_FUNCTION(glMapBuffer, glMapBufferARB);
+    MAP_GL_FUNCTION(glUnmapBuffer, glUnmapBufferARB);
 #undef MAP_GL_FUNCTION
 }
 
diff --git a/dlls/wined3d/glsl_shader.c b/dlls/wined3d/glsl_shader.c
index 0ab591f..a829651 100644
--- a/dlls/wined3d/glsl_shader.c
+++ b/dlls/wined3d/glsl_shader.c
@@ -413,55 +413,50 @@ static void shader_glsl_validate_link(const struct wined3d_gl_info *gl_info, GLh
 }
 
 /* Context activation is done by the caller. */
-static void shader_glsl_load_psamplers(const struct wined3d_gl_info *gl_info,
-        const DWORD *tex_unit_map, GLhandleARB programId)
+static void shader_glsl_load_samplers(const struct wined3d_gl_info *gl_info,
+        const DWORD *tex_unit_map, GLhandleARB program_id)
 {
-    GLint name_loc;
+    unsigned int mapped_unit;
     char sampler_name[20];
-    unsigned int i;
+    const char *prefix;
+    unsigned int i, j;
+    GLint name_loc;
 
-    for (i = 0; i < MAX_FRAGMENT_SAMPLERS; ++i)
+    static const struct
     {
-        snprintf(sampler_name, sizeof(sampler_name), "ps_sampler%u", i);
-        name_loc = GL_EXTCALL(glGetUniformLocationARB(programId, sampler_name));
-        if (name_loc != -1) {
-            DWORD mapped_unit = tex_unit_map[i];
-            if (mapped_unit != WINED3D_UNMAPPED_STAGE && mapped_unit < gl_info->limits.fragment_samplers)
-            {
-                TRACE("Loading %s for texture %d\n", sampler_name, mapped_unit);
-                GL_EXTCALL(glUniform1iARB(name_loc, mapped_unit));
-                checkGLcall("glUniform1iARB");
-            } else {
-                ERR("Trying to load sampler %s on unsupported unit %d\n", sampler_name, mapped_unit);
-            }
-        }
+        enum wined3d_shader_type type;
+        unsigned int base_idx;
+        unsigned int count;
     }
-}
-
-/* Context activation is done by the caller. */
-static void shader_glsl_load_vsamplers(const struct wined3d_gl_info *gl_info,
-        const DWORD *tex_unit_map, GLhandleARB programId)
-{
-    GLint name_loc;
-    char sampler_name[20];
-    unsigned int i;
+    sampler_info[] =
+    {
+        {WINED3D_SHADER_TYPE_PIXEL,     0,                      MAX_FRAGMENT_SAMPLERS},
+        {WINED3D_SHADER_TYPE_VERTEX,    MAX_FRAGMENT_SAMPLERS,  MAX_VERTEX_SAMPLERS},
+    };
 
-    for (i = 0; i < MAX_VERTEX_SAMPLERS; ++i)
+    for (i = 0; i < ARRAY_SIZE(sampler_info); ++i)
     {
-        snprintf(sampler_name, sizeof(sampler_name), "vs_sampler%u", i);
-        name_loc = GL_EXTCALL(glGetUniformLocationARB(programId, sampler_name));
-        if (name_loc != -1) {
-            DWORD mapped_unit = tex_unit_map[MAX_FRAGMENT_SAMPLERS + i];
-            if (mapped_unit != WINED3D_UNMAPPED_STAGE && mapped_unit < gl_info->limits.combined_samplers)
+        prefix = shader_glsl_get_prefix(sampler_info[i].type);
+
+        for (j = 0; j < sampler_info[i].count; ++j)
+        {
+            snprintf(sampler_name, sizeof(sampler_name), "%s_sampler%u", prefix, j);
+            name_loc = GL_EXTCALL(glGetUniformLocationARB(program_id, sampler_name));
+            if (name_loc == -1)
+                continue;
+
+            mapped_unit = tex_unit_map[sampler_info[i].base_idx + j];
+            if (mapped_unit == WINED3D_UNMAPPED_STAGE || mapped_unit >= gl_info->limits.combined_samplers)
             {
-                TRACE("Loading %s for texture %d\n", sampler_name, mapped_unit);
-                GL_EXTCALL(glUniform1iARB(name_loc, mapped_unit));
-                checkGLcall("glUniform1iARB");
-            } else {
-                ERR("Trying to load sampler %s on unsupported unit %d\n", sampler_name, mapped_unit);
+                ERR("Trying to load sampler %s on unsupported unit %u.\n", sampler_name, mapped_unit);
+                continue;
             }
+
+            TRACE("Loading sampler %s on unit %u.\n", sampler_name, mapped_unit);
+            GL_EXTCALL(glUniform1iARB(name_loc, mapped_unit));
         }
     }
+    checkGLcall("glUniform1iARB");
 }
 
 /* Context activation is done by the caller. */
@@ -5996,10 +5991,8 @@ static void set_glsl_shader_program(const struct wined3d_context *context, const
      * vertex shader with fixed function pixel processing is used we make sure that the card
      * supports enough samplers to allow the max number of vertex samplers with all possible
      * fixed function fragment processing setups. So once the program is linked these samplers
-     * won't change.
-     */
-    shader_glsl_load_vsamplers(gl_info, context->tex_unit_map, programId);
-    shader_glsl_load_psamplers(gl_info, context->tex_unit_map, programId);
+     * won't change. */
+    shader_glsl_load_samplers(gl_info, context->tex_unit_map, programId);
 
     entry->constant_update_mask = 0;
     if (vshader)
@@ -6604,7 +6597,7 @@ static void shader_glsl_get_caps(const struct wined3d_gl_info *gl_info, struct s
     if (gl_info->supported[EXT_GPU_SHADER4] && gl_info->supported[ARB_SHADER_BIT_ENCODING]
             && gl_info->supported[ARB_GEOMETRY_SHADER4] && gl_info->glsl_version >= MAKEDWORD_VERSION(1, 50)
             && gl_info->supported[ARB_DRAW_ELEMENTS_BASE_VERTEX] && gl_info->supported[ARB_DRAW_INSTANCED]
-            && gl_info->supported[ARB_TEXTURE_RG])
+            && gl_info->supported[ARB_TEXTURE_RG] && gl_info->supported[ARB_SAMPLER_OBJECTS])
         shader_model = 4;
     /* ARB_shader_texture_lod or EXT_gpu_shader4 is required for the SM3
      * texldd and texldl instructions. */
diff --git a/dlls/wined3d/sampler.c b/dlls/wined3d/sampler.c
index d5c44c9..ffa1155 100644
--- a/dlls/wined3d/sampler.c
+++ b/dlls/wined3d/sampler.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Henri Verbeet for CodeWeavers
+ * Copyright 2012, 2015 Henri Verbeet for CodeWeavers
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -36,11 +36,20 @@ ULONG CDECL wined3d_sampler_incref(struct wined3d_sampler *sampler)
 ULONG CDECL wined3d_sampler_decref(struct wined3d_sampler *sampler)
 {
     ULONG refcount = InterlockedDecrement(&sampler->refcount);
+    const struct wined3d_gl_info *gl_info;
+    struct wined3d_context *context;
 
     TRACE("%p decreasing refcount to %u.\n", sampler, refcount);
 
     if (!refcount)
+    {
+        context = context_acquire(sampler->device, NULL);
+        gl_info = context->gl_info;
+        GL_EXTCALL(glDeleteSamplers(1, &sampler->name));
+        context_release(context);
+
         HeapFree(GetProcessHeap(), 0, sampler);
+    }
 
     return refcount;
 }
@@ -52,22 +61,74 @@ void * CDECL wined3d_sampler_get_parent(const struct wined3d_sampler *sampler)
     return sampler->parent;
 }
 
-static void wined3d_sampler_init(struct wined3d_sampler *sampler, void *parent)
+static void wined3d_sampler_init(struct wined3d_sampler *sampler, struct wined3d_device *device,
+        const struct wined3d_sampler_desc *desc, void *parent)
 {
+    const struct wined3d_gl_info *gl_info;
+    struct wined3d_context *context;
+
     sampler->refcount = 1;
+    sampler->device = device;
     sampler->parent = parent;
+    sampler->desc = *desc;
+
+    context = context_acquire(device, NULL);
+    gl_info = context->gl_info;
+
+    GL_EXTCALL(glGenSamplers(1, &sampler->name));
+    GL_EXTCALL(glSamplerParameteri(sampler->name, GL_TEXTURE_WRAP_S,
+            gl_info->wrap_lookup[desc->address_u - WINED3D_TADDRESS_WRAP]));
+    GL_EXTCALL(glSamplerParameteri(sampler->name, GL_TEXTURE_WRAP_T,
+            gl_info->wrap_lookup[desc->address_v - WINED3D_TADDRESS_WRAP]));
+    GL_EXTCALL(glSamplerParameteri(sampler->name, GL_TEXTURE_WRAP_R,
+            gl_info->wrap_lookup[desc->address_w - WINED3D_TADDRESS_WRAP]));
+    GL_EXTCALL(glSamplerParameterfv(sampler->name, GL_TEXTURE_BORDER_COLOR, &desc->border_color[0]));
+    GL_EXTCALL(glSamplerParameteri(sampler->name, GL_TEXTURE_MAG_FILTER,
+            wined3d_gl_mag_filter(desc->mag_filter)));
+    GL_EXTCALL(glSamplerParameteri(sampler->name, GL_TEXTURE_MIN_FILTER,
+            wined3d_gl_min_mip_filter(desc->min_filter, desc->mip_filter)));
+    GL_EXTCALL(glSamplerParameterf(sampler->name, GL_TEXTURE_LOD_BIAS, desc->lod_bias));
+    GL_EXTCALL(glSamplerParameterf(sampler->name, GL_TEXTURE_MIN_LOD, desc->min_lod));
+    GL_EXTCALL(glSamplerParameterf(sampler->name, GL_TEXTURE_MAX_LOD, desc->max_lod));
+    if (gl_info->supported[EXT_TEXTURE_FILTER_ANISOTROPIC])
+        GL_EXTCALL(glSamplerParameteri(sampler->name, GL_TEXTURE_MAX_ANISOTROPY_EXT, desc->max_anisotropy));
+    if (desc->compare)
+        GL_EXTCALL(glSamplerParameteri(sampler->name, GL_TEXTURE_COMPARE_MODE, GL_COMPARE_R_TO_TEXTURE));
+    GL_EXTCALL(glSamplerParameteri(sampler->name, GL_TEXTURE_COMPARE_FUNC,
+            wined3d_gl_compare_func(desc->comparison_func)));
+    if (gl_info->supported[EXT_TEXTURE_SRGB_DECODE] && !desc->srgb_decode)
+        GL_EXTCALL(glSamplerParameteri(sampler->name, GL_TEXTURE_SRGB_DECODE_EXT, GL_SKIP_DECODE_EXT));
+    checkGLcall("sampler creation");
+
+    TRACE("Created sampler %u.\n", sampler->name);
+
+    context_release(context);
 }
 
-HRESULT CDECL wined3d_sampler_create(void *parent, struct wined3d_sampler **sampler)
+HRESULT CDECL wined3d_sampler_create(struct wined3d_device *device, const struct wined3d_sampler_desc *desc,
+        void *parent, struct wined3d_sampler **sampler)
 {
     struct wined3d_sampler *object;
 
-    TRACE("parent %p, sampler %p.\n", parent, sampler);
+    TRACE("device %p, desc %p, parent %p, sampler %p.\n", device, desc, parent, sampler);
+
+    if (!device->adapter->gl_info.supported[ARB_SAMPLER_OBJECTS])
+        return WINED3DERR_INVALIDCALL;
+
+    if (desc->address_u < WINED3D_TADDRESS_WRAP || desc->address_u > WINED3D_TADDRESS_MIRROR_ONCE
+            || desc->address_v < WINED3D_TADDRESS_WRAP || desc->address_v > WINED3D_TADDRESS_MIRROR_ONCE
+            || desc->address_w < WINED3D_TADDRESS_WRAP || desc->address_w > WINED3D_TADDRESS_MIRROR_ONCE)
+        return WINED3DERR_INVALIDCALL;
+
+    if (desc->mag_filter < WINED3D_TEXF_POINT || desc->mag_filter > WINED3D_TEXF_LINEAR
+            || desc->min_filter < WINED3D_TEXF_POINT || desc->min_filter > WINED3D_TEXF_LINEAR
+            || desc->mip_filter > WINED3D_TEXF_LINEAR)
+        return WINED3DERR_INVALIDCALL;
 
     if (!(object = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*object))))
         return E_OUTOFMEMORY;
 
-    wined3d_sampler_init(object, parent);
+    wined3d_sampler_init(object, device, desc, parent);
 
     TRACE("Created sampler %p.\n", object);
     *sampler = object;
diff --git a/dlls/wined3d/state.c b/dlls/wined3d/state.c
index 048ec13..3c672db 100644
--- a/dlls/wined3d/state.c
+++ b/dlls/wined3d/state.c
@@ -234,7 +234,7 @@ static void state_zwritenable(struct wined3d_context *context, const struct wine
     }
 }
 
-static GLenum gl_compare_func(enum wined3d_cmp_func f)
+GLenum wined3d_gl_compare_func(enum wined3d_cmp_func f)
 {
     switch (f)
     {
@@ -262,7 +262,7 @@ static GLenum gl_compare_func(enum wined3d_cmp_func f)
 
 static void state_zfunc(struct wined3d_context *context, const struct wined3d_state *state, DWORD state_id)
 {
-    GLenum depth_func = gl_compare_func(state->render_states[WINED3D_RS_ZFUNC]);
+    GLenum depth_func = wined3d_gl_compare_func(state->render_states[WINED3D_RS_ZFUNC]);
     const struct wined3d_gl_info *gl_info = context->gl_info;
 
     if (!depth_func) return;
@@ -566,7 +566,7 @@ static void state_alpha(struct wined3d_context *context, const struct wined3d_st
     else
     {
         ref = ((float)state->render_states[WINED3D_RS_ALPHAREF]) / 255.0f;
-        glParm = gl_compare_func(state->render_states[WINED3D_RS_ALPHAFUNC]);
+        glParm = wined3d_gl_compare_func(state->render_states[WINED3D_RS_ALPHAFUNC]);
     }
     if (glParm)
     {
@@ -835,9 +835,9 @@ static void state_stencil(struct wined3d_context *context, const struct wined3d_
 
     onesided_enable = state->render_states[WINED3D_RS_STENCILENABLE];
     twosided_enable = state->render_states[WINED3D_RS_TWOSIDEDSTENCILMODE];
-    if (!(func = gl_compare_func(state->render_states[WINED3D_RS_STENCILFUNC])))
+    if (!(func = wined3d_gl_compare_func(state->render_states[WINED3D_RS_STENCILFUNC])))
         func = GL_ALWAYS;
-    if (!(func_ccw = gl_compare_func(state->render_states[WINED3D_RS_CCW_STENCILFUNC])))
+    if (!(func_ccw = wined3d_gl_compare_func(state->render_states[WINED3D_RS_CCW_STENCILFUNC])))
         func_ccw = GL_ALWAYS;
     ref = state->render_states[WINED3D_RS_STENCILREF];
     mask = state->render_states[WINED3D_RS_STENCILMASK];
@@ -1600,11 +1600,12 @@ static void state_colorwrite(struct wined3d_context *context, const struct wined
 
 static void set_color_mask(const struct wined3d_gl_info *gl_info, UINT index, DWORD mask)
 {
-    GL_EXTCALL(glColorMaskIndexedEXT(index,
+    GL_EXTCALL(glColorMaski(index,
             mask & WINED3DCOLORWRITEENABLE_RED ? GL_TRUE : GL_FALSE,
             mask & WINED3DCOLORWRITEENABLE_GREEN ? GL_TRUE : GL_FALSE,
             mask & WINED3DCOLORWRITEENABLE_BLUE ? GL_TRUE : GL_FALSE,
             mask & WINED3DCOLORWRITEENABLE_ALPHA ? GL_TRUE : GL_FALSE));
+    checkGLcall("glColorMaski");
 }
 
 static void state_colorwrite0(struct wined3d_context *context, const struct wined3d_state *state, DWORD state_id)
@@ -3366,8 +3367,8 @@ static void load_tex_coords(const struct wined3d_context *context, const struct
 
             if (*curVBO != e->data.buffer_object)
             {
-                GL_EXTCALL(glBindBufferARB(GL_ARRAY_BUFFER_ARB, e->data.buffer_object));
-                checkGLcall("glBindBufferARB");
+                GL_EXTCALL(glBindBuffer(GL_ARRAY_BUFFER, e->data.buffer_object));
+                checkGLcall("glBindBuffer");
                 *curVBO = e->data.buffer_object;
             }
 
@@ -3603,24 +3604,92 @@ void sampler_texmatrix(struct wined3d_context *context, const struct wined3d_sta
     }
 }
 
-static void sampler(struct wined3d_context *context, const struct wined3d_state *state, DWORD state_id)
+static enum wined3d_texture_address wined3d_texture_address_mode(const struct wined3d_texture *texture,
+        enum wined3d_texture_address t)
 {
-    DWORD sampler = state_id - STATE_SAMPLER(0);
-    DWORD mapped_stage = context->tex_unit_map[sampler];
-    const struct wined3d_gl_info *gl_info = context->gl_info;
-    union {
+    if (t < WINED3D_TADDRESS_WRAP || t > WINED3D_TADDRESS_MIRROR_ONCE)
+    {
+        FIXME("Unrecognized or unsupported texture address mode %#x.\n", t);
+        return WINED3D_TADDRESS_WRAP;
+    }
+
+    /* Cubemaps are always set to clamp, regardless of the sampler state. */
+    if (texture->target == GL_TEXTURE_CUBE_MAP_ARB || ((texture->flags & WINED3D_TEXTURE_COND_NP2)
+            && t == WINED3D_TADDRESS_WRAP))
+        return WINED3D_TADDRESS_CLAMP;
+
+    return t;
+}
+
+static void wined3d_sampler_desc_from_sampler_states(struct wined3d_sampler_desc *desc,
+        const struct wined3d_gl_info *gl_info, const DWORD *sampler_states, const struct wined3d_texture *texture)
+{
+    union
+    {
         float f;
         DWORD d;
-    } tmpvalue;
+    } lod_bias;
+
+    desc->address_u = wined3d_texture_address_mode(texture, sampler_states[WINED3D_SAMP_ADDRESS_U]);
+    desc->address_v = wined3d_texture_address_mode(texture, sampler_states[WINED3D_SAMP_ADDRESS_V]);
+    desc->address_w = wined3d_texture_address_mode(texture, sampler_states[WINED3D_SAMP_ADDRESS_W]);
+    D3DCOLORTOGLFLOAT4(sampler_states[WINED3D_SAMP_BORDER_COLOR], desc->border_color);
+    if (sampler_states[WINED3D_SAMP_MAG_FILTER] > WINED3D_TEXF_ANISOTROPIC)
+        FIXME("Unrecognized or unsupported WINED3D_SAMP_MAG_FILTER %#x.\n",
+                sampler_states[WINED3D_SAMP_MAG_FILTER]);
+    desc->mag_filter = min(max(sampler_states[WINED3D_SAMP_MAG_FILTER], WINED3D_TEXF_POINT), WINED3D_TEXF_LINEAR);
+    if (sampler_states[WINED3D_SAMP_MIN_FILTER] > WINED3D_TEXF_ANISOTROPIC)
+        FIXME("Unrecognized or unsupported WINED3D_SAMP_MIN_FILTER %#x.\n",
+                sampler_states[WINED3D_SAMP_MIN_FILTER]);
+    desc->min_filter = min(max(sampler_states[WINED3D_SAMP_MIN_FILTER], WINED3D_TEXF_POINT), WINED3D_TEXF_LINEAR);
+    if (sampler_states[WINED3D_SAMP_MIP_FILTER] > WINED3D_TEXF_ANISOTROPIC)
+        FIXME("Unrecognized or unsupported WINED3D_SAMP_MIP_FILTER %#x.\n",
+                sampler_states[WINED3D_SAMP_MIP_FILTER]);
+    desc->mip_filter = min(max(sampler_states[WINED3D_SAMP_MIP_FILTER], WINED3D_TEXF_NONE), WINED3D_TEXF_LINEAR);
+    lod_bias.d = sampler_states[WINED3D_SAMP_MIPMAP_LOD_BIAS];
+    desc->lod_bias = lod_bias.f;
+    desc->min_lod = -1000.0f;
+    desc->max_lod = 1000.0f;
+    desc->max_anisotropy = sampler_states[WINED3D_SAMP_MAX_ANISOTROPY];
+    if ((sampler_states[WINED3D_SAMP_MAG_FILTER] != WINED3D_TEXF_ANISOTROPIC
+                && sampler_states[WINED3D_SAMP_MIN_FILTER] != WINED3D_TEXF_ANISOTROPIC
+                && sampler_states[WINED3D_SAMP_MIP_FILTER] != WINED3D_TEXF_ANISOTROPIC)
+            || (texture->flags & WINED3D_TEXTURE_COND_NP2))
+        desc->max_anisotropy = 1;
+    desc->compare = texture->resource.format->flags & WINED3DFMT_FLAG_SHADOW;
+    desc->comparison_func = WINED3D_CMP_LESSEQUAL;
+    desc->srgb_decode = sampler_states[WINED3D_SAMP_SRGB_TEXTURE];
+
+    if (!(texture->resource.format->flags & WINED3DFMT_FLAG_FILTERING))
+    {
+        desc->mag_filter = WINED3D_TEXF_POINT;
+        desc->min_filter = WINED3D_TEXF_POINT;
+        desc->mip_filter = WINED3D_TEXF_NONE;
+    }
+
+    if (texture->flags & WINED3D_TEXTURE_COND_NP2)
+    {
+        desc->mip_filter = WINED3D_TEXF_NONE;
+        if (gl_info->supported[WINED3D_GL_NORMALIZED_TEXRECT])
+            desc->min_filter = WINED3D_TEXF_POINT;
+    }
+}
+
+/* Enabling and disabling texture dimensions is done by texture stage state /
+ * pixel shader setup, this function only has to bind textures and set the per
+ * texture states. */
+static void sampler(struct wined3d_context *context, const struct wined3d_state *state, DWORD state_id)
+{
+    DWORD sampler_idx = state_id - STATE_SAMPLER(0);
+    DWORD mapped_stage = context->tex_unit_map[sampler_idx];
+    const struct wined3d_gl_info *gl_info = context->gl_info;
+
+    TRACE("Sampler %u.\n", sampler_idx);
 
-    TRACE("Sampler: %d\n", sampler);
-    /* Enabling and disabling texture dimensions is done by texture stage state / pixel shader setup, this function
-     * only has to bind textures and set the per texture states
-     */
 
     if (mapped_stage == WINED3D_UNMAPPED_STAGE)
     {
-        TRACE("No sampler mapped to stage %d. Returning.\n", sampler);
+        TRACE("No sampler mapped to stage %u. Returning.\n", sampler_idx);
         return;
     }
 
@@ -3630,25 +3699,75 @@ static void sampler(struct wined3d_context *context, const struct wined3d_state
     }
     context_active_texture(context, gl_info, mapped_stage);
 
-    if (state->textures[sampler])
+    if (state->textures[sampler_idx])
     {
-        struct wined3d_texture *texture = state->textures[sampler];
-        BOOL srgb = state->sampler_states[sampler][WINED3D_SAMP_SRGB_TEXTURE];
+        struct wined3d_texture *texture = state->textures[sampler_idx];
+        BOOL srgb = state->sampler_states[sampler_idx][WINED3D_SAMP_SRGB_TEXTURE];
+        const DWORD *sampler_states = state->sampler_states[sampler_idx];
+        struct wined3d_sampler_desc desc;
+        struct gl_texture *gl_tex;
+        unsigned int base_level;
+
+        wined3d_sampler_desc_from_sampler_states(&desc, gl_info, sampler_states, texture);
 
         wined3d_texture_bind(texture, context, srgb);
-        wined3d_texture_apply_state_changes(texture, state->sampler_states[sampler], gl_info);
+        if (!gl_info->supported[ARB_SAMPLER_OBJECTS])
+        {
+            wined3d_texture_apply_sampler_desc(texture, &desc, gl_info);
+        }
+        else
+        {
+            struct wined3d_device *device = context->swapchain->device;
+            struct wined3d_sampler *sampler;
+            struct wine_rb_entry *entry;
+
+            if ((entry = wine_rb_get(&device->samplers, &desc)))
+            {
+                sampler = WINE_RB_ENTRY_VALUE(entry, struct wined3d_sampler, entry);
+            }
+            else
+            {
+                if (FAILED(wined3d_sampler_create(device, &desc, NULL, &sampler)))
+                {
+                    ERR("Failed to create sampler.\n");
+                    sampler = NULL;
+                }
+                else
+                {
+                    if (wine_rb_put(&device->samplers, &desc, &sampler->entry) == -1)
+                        ERR("Failed to insert sampler.\n");
+                }
+            }
+
+            if (sampler)
+            {
+                GL_EXTCALL(glBindSampler(sampler_idx, sampler->name));
+                checkGLcall("glBindSampler");
+            }
+        }
+
+        if (texture->flags & WINED3D_TEXTURE_COND_NP2)
+            base_level = 0;
+        else if (desc.mip_filter == WINED3D_TEXF_NONE)
+            base_level = texture->lod;
+        else
+            base_level = min(max(sampler_states[WINED3D_SAMP_MAX_MIP_LEVEL],
+                    texture->lod), texture->level_count - 1);
 
-        if (gl_info->supported[EXT_TEXTURE_LOD_BIAS])
+        gl_tex = wined3d_texture_get_gl_texture(texture, texture->flags & WINED3D_TEXTURE_IS_SRGB);
+        if (base_level != gl_tex->base_level)
         {
-            tmpvalue.d = state->sampler_states[sampler][WINED3D_SAMP_MIPMAP_LOD_BIAS];
-            gl_info->gl_ops.gl.p_glTexEnvf(GL_TEXTURE_FILTER_CONTROL_EXT,
-                      GL_TEXTURE_LOD_BIAS_EXT, tmpvalue.f);
-            checkGLcall("glTexEnvf(GL_TEXTURE_LOD_BIAS_EXT, ...)");
+            /* Note that WINED3D_SAMP_MAX_MIP_LEVEL specifies the largest mipmap
+             * (default 0), while GL_TEXTURE_MAX_LEVEL specifies the smallest
+             * mimap used (default 1000). So WINED3D_SAMP_MAX_MIP_LEVEL
+             * corresponds to GL_TEXTURE_BASE_LEVEL. */
+            gl_info->gl_ops.gl.p_glTexParameteri(texture->target, GL_TEXTURE_BASE_LEVEL, base_level);
+            gl_tex->base_level = base_level;
         }
 
-        if (!use_ps(state) && sampler < context->lowest_disabled_stage)
+        if (!use_ps(state) && sampler_idx < context->lowest_disabled_stage)
         {
-            if (state->render_states[WINED3D_RS_COLORKEYENABLE] && !sampler)
+            if (state->render_states[WINED3D_RS_COLORKEYENABLE] && !sampler_idx)
             {
                 /* If color keying is enabled update the alpha test, it
                  * depends on the existence of a color key in stage 0. */
@@ -3662,10 +3781,10 @@ static void sampler(struct wined3d_context *context, const struct wined3d_state
     }
     else
     {
-        if (sampler < context->lowest_disabled_stage)
+        if (sampler_idx < context->lowest_disabled_stage)
         {
             /* TODO: What should I do with pixel shaders here ??? */
-            if (state->render_states[WINED3D_RS_COLORKEYENABLE] && !sampler)
+            if (state->render_states[WINED3D_RS_COLORKEYENABLE] && !sampler_idx)
             {
                 /* If color keying is enabled update the alpha test, it
                  * depends on the existence of a color key in stage 0. */
@@ -4100,8 +4219,8 @@ static void load_numbered_arrays(struct wined3d_context *context,
         {
             if (curVBO != stream_info->elements[i].data.buffer_object)
             {
-                GL_EXTCALL(glBindBufferARB(GL_ARRAY_BUFFER_ARB, stream_info->elements[i].data.buffer_object));
-                checkGLcall("glBindBufferARB");
+                GL_EXTCALL(glBindBuffer(GL_ARRAY_BUFFER, stream_info->elements[i].data.buffer_object));
+                checkGLcall("glBindBuffer");
                 curVBO = stream_info->elements[i].data.buffer_object;
             }
             /* Use the VBO to find out if a vertex buffer exists, not the vb
@@ -4271,8 +4390,8 @@ static void load_vertex_data(struct wined3d_context *context,
 
             if (curVBO != e->data.buffer_object)
             {
-                GL_EXTCALL(glBindBufferARB(GL_ARRAY_BUFFER_ARB, e->data.buffer_object));
-                checkGLcall("glBindBufferARB");
+                GL_EXTCALL(glBindBuffer(GL_ARRAY_BUFFER, e->data.buffer_object));
+                checkGLcall("glBindBuffer");
                 curVBO = e->data.buffer_object;
             }
 
@@ -4327,8 +4446,8 @@ static void load_vertex_data(struct wined3d_context *context,
 
         if (curVBO != e->data.buffer_object)
         {
-            GL_EXTCALL(glBindBufferARB(GL_ARRAY_BUFFER_ARB, e->data.buffer_object));
-            checkGLcall("glBindBufferARB");
+            GL_EXTCALL(glBindBuffer(GL_ARRAY_BUFFER, e->data.buffer_object));
+            checkGLcall("glBindBuffer");
             curVBO = e->data.buffer_object;
         }
 
@@ -4349,8 +4468,8 @@ static void load_vertex_data(struct wined3d_context *context,
 
         if (curVBO != e->data.buffer_object)
         {
-            GL_EXTCALL(glBindBufferARB(GL_ARRAY_BUFFER_ARB, e->data.buffer_object));
-            checkGLcall("glBindBufferARB");
+            GL_EXTCALL(glBindBuffer(GL_ARRAY_BUFFER, e->data.buffer_object));
+            checkGLcall("glBindBuffer");
             curVBO = e->data.buffer_object;
         }
 
@@ -4376,8 +4495,8 @@ static void load_vertex_data(struct wined3d_context *context,
 
         if (curVBO != e->data.buffer_object)
         {
-            GL_EXTCALL(glBindBufferARB(GL_ARRAY_BUFFER_ARB, e->data.buffer_object));
-            checkGLcall("glBindBufferARB");
+            GL_EXTCALL(glBindBuffer(GL_ARRAY_BUFFER, e->data.buffer_object));
+            checkGLcall("glBindBuffer");
             curVBO = e->data.buffer_object;
         }
 
@@ -4411,8 +4530,8 @@ static void load_vertex_data(struct wined3d_context *context,
 
             if (curVBO != e->data.buffer_object)
             {
-                GL_EXTCALL(glBindBufferARB(GL_ARRAY_BUFFER_ARB, e->data.buffer_object));
-                checkGLcall("glBindBufferARB");
+                GL_EXTCALL(glBindBuffer(GL_ARRAY_BUFFER, e->data.buffer_object));
+                checkGLcall("glBindBuffer");
                 curVBO = e->data.buffer_object;
             }
 
@@ -4850,12 +4969,12 @@ static void indexbuffer(struct wined3d_context *context, const struct wined3d_st
 
     if (!state->index_buffer || !stream_info->all_vbo)
     {
-        GL_EXTCALL(glBindBufferARB(GL_ELEMENT_ARRAY_BUFFER_ARB, 0));
+        GL_EXTCALL(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0));
     }
     else
     {
         struct wined3d_buffer *ib = state->index_buffer;
-        GL_EXTCALL(glBindBufferARB(GL_ELEMENT_ARRAY_BUFFER_ARB, ib->buffer_object));
+        GL_EXTCALL(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ib->buffer_object));
     }
 }
 
diff --git a/dlls/wined3d/surface.c b/dlls/wined3d/surface.c
index fb27c8a..4249322 100644
--- a/dlls/wined3d/surface.c
+++ b/dlls/wined3d/surface.c
@@ -59,7 +59,7 @@ static void surface_cleanup(struct wined3d_surface *surface)
         if (surface->pbo)
         {
             TRACE("Deleting PBO %u.\n", surface->pbo);
-            GL_EXTCALL(glDeleteBuffersARB(1, &surface->pbo));
+            GL_EXTCALL(glDeleteBuffers(1, &surface->pbo));
         }
 
         if (surface->rb_multisample)
@@ -310,11 +310,10 @@ void draw_textured_quad(const struct wined3d_surface *src_surface, struct wined3
     context_bind_texture(context, info.bind_target, texture->texture_rgb.name);
 
     /* Filtering for StretchRect */
-    gl_info->gl_ops.gl.p_glTexParameteri(info.bind_target, GL_TEXTURE_MAG_FILTER,
-            wined3d_gl_mag_filter(magLookup, filter));
+    gl_info->gl_ops.gl.p_glTexParameteri(info.bind_target, GL_TEXTURE_MAG_FILTER, wined3d_gl_mag_filter(filter));
     checkGLcall("glTexParameteri");
     gl_info->gl_ops.gl.p_glTexParameteri(info.bind_target, GL_TEXTURE_MIN_FILTER,
-            wined3d_gl_min_mip_filter(minMipLookup, filter, WINED3D_TEXF_NONE));
+            wined3d_gl_min_mip_filter(filter, WINED3D_TEXF_NONE));
     checkGLcall("glTexParameteri");
     gl_info->gl_ops.gl.p_glTexParameteri(info.bind_target, GL_TEXTURE_WRAP_S, GL_CLAMP);
     gl_info->gl_ops.gl.p_glTexParameteri(info.bind_target, GL_TEXTURE_WRAP_T, GL_CLAMP);
@@ -343,10 +342,10 @@ void draw_textured_quad(const struct wined3d_surface *src_surface, struct wined3
 
     /* We changed the filtering settings on the texture. Inform the
      * container about this to get the filters reset properly next draw. */
-    texture->texture_rgb.states[WINED3DTEXSTA_MAGFILTER] = WINED3D_TEXF_POINT;
-    texture->texture_rgb.states[WINED3DTEXSTA_MINFILTER] = WINED3D_TEXF_POINT;
-    texture->texture_rgb.states[WINED3DTEXSTA_MIPFILTER] = WINED3D_TEXF_NONE;
-    texture->texture_rgb.states[WINED3DTEXSTA_SRGBTEXTURE] = FALSE;
+    texture->texture_rgb.sampler_desc.mag_filter = WINED3D_TEXF_POINT;
+    texture->texture_rgb.sampler_desc.min_filter = WINED3D_TEXF_POINT;
+    texture->texture_rgb.sampler_desc.mip_filter = WINED3D_TEXF_NONE;
+    texture->texture_rgb.sampler_desc.srgb_decode = FALSE;
 }
 
 /* Works correctly only for <= 4 bpp formats. */
@@ -522,22 +521,22 @@ static void surface_prepare_buffer(struct wined3d_surface *surface)
     context = context_acquire(surface->resource.device, NULL);
     gl_info = context->gl_info;
 
-    GL_EXTCALL(glGenBuffersARB(1, &surface->pbo));
+    GL_EXTCALL(glGenBuffers(1, &surface->pbo));
     error = gl_info->gl_ops.gl.p_glGetError();
     if (!surface->pbo || error != GL_NO_ERROR)
         ERR("Failed to create a PBO with error %s (%#x).\n", debug_glerror(error), error);
 
     TRACE("Binding PBO %u.\n", surface->pbo);
 
-    GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, surface->pbo));
-    checkGLcall("glBindBufferARB");
+    GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, surface->pbo));
+    checkGLcall("glBindBuffer");
 
-    GL_EXTCALL(glBufferDataARB(GL_PIXEL_UNPACK_BUFFER_ARB, surface->resource.size + 4,
-            NULL, GL_STREAM_DRAW_ARB));
-    checkGLcall("glBufferDataARB");
+    GL_EXTCALL(glBufferData(GL_PIXEL_UNPACK_BUFFER, surface->resource.size + 4,
+            NULL, GL_STREAM_DRAW));
+    checkGLcall("glBufferData");
 
-    GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, 0));
-    checkGLcall("glBindBufferARB");
+    GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, 0));
+    checkGLcall("glBindBuffer");
 
     context_release(context);
 }
@@ -733,10 +732,10 @@ static void surface_unmap(struct wined3d_surface *surface)
             context = context_acquire(device, NULL);
             gl_info = context->gl_info;
 
-            GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, surface->pbo));
-            GL_EXTCALL(glUnmapBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB));
-            GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, 0));
-            checkGLcall("glUnmapBufferARB");
+            GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, surface->pbo));
+            GL_EXTCALL(glUnmapBuffer(GL_PIXEL_UNPACK_BUFFER));
+            GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, 0));
+            checkGLcall("glUnmapBuffer");
             context_release(context);
             break;
 
@@ -1152,8 +1151,8 @@ HRESULT CDECL wined3d_surface_get_render_target_data(struct wined3d_surface *sur
 /* Context activation is done by the caller. */
 static void surface_remove_pbo(struct wined3d_surface *surface, const struct wined3d_gl_info *gl_info)
 {
-    GL_EXTCALL(glDeleteBuffersARB(1, &surface->pbo));
-    checkGLcall("glDeleteBuffersARB(1, &surface->pbo)");
+    GL_EXTCALL(glDeleteBuffers(1, &surface->pbo));
+    checkGLcall("glDeleteBuffers(1, &surface->pbo)");
 
     surface->pbo = 0;
     surface_invalidate_location(surface, WINED3D_LOCATION_BUFFER);
@@ -1340,12 +1339,12 @@ static void surface_download_data(struct wined3d_surface *surface, const struct
 
         if (data.buffer_object)
         {
-            GL_EXTCALL(glBindBufferARB(GL_PIXEL_PACK_BUFFER_ARB, data.buffer_object));
-            checkGLcall("glBindBufferARB");
+            GL_EXTCALL(glBindBuffer(GL_PIXEL_PACK_BUFFER, data.buffer_object));
+            checkGLcall("glBindBuffer");
             GL_EXTCALL(glGetCompressedTexImageARB(surface->texture_target, surface->texture_level, NULL));
             checkGLcall("glGetCompressedTexImageARB");
-            GL_EXTCALL(glBindBufferARB(GL_PIXEL_PACK_BUFFER_ARB, 0));
-            checkGLcall("glBindBufferARB");
+            GL_EXTCALL(glBindBuffer(GL_PIXEL_PACK_BUFFER, 0));
+            checkGLcall("glBindBuffer");
         }
         else
         {
@@ -1380,15 +1379,15 @@ static void surface_download_data(struct wined3d_surface *surface, const struct
 
         if (data.buffer_object)
         {
-            GL_EXTCALL(glBindBufferARB(GL_PIXEL_PACK_BUFFER_ARB, data.buffer_object));
-            checkGLcall("glBindBufferARB");
+            GL_EXTCALL(glBindBuffer(GL_PIXEL_PACK_BUFFER, data.buffer_object));
+            checkGLcall("glBindBuffer");
 
             gl_info->gl_ops.gl.p_glGetTexImage(surface->texture_target, surface->texture_level,
                     gl_format, gl_type, NULL);
             checkGLcall("glGetTexImage");
 
-            GL_EXTCALL(glBindBufferARB(GL_PIXEL_PACK_BUFFER_ARB, 0));
-            checkGLcall("glBindBufferARB");
+            GL_EXTCALL(glBindBuffer(GL_PIXEL_PACK_BUFFER, 0));
+            checkGLcall("glBindBuffer");
         }
         else
         {
@@ -1494,8 +1493,8 @@ void wined3d_surface_upload_data(struct wined3d_surface *surface, const struct w
 
     if (data->buffer_object)
     {
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, data->buffer_object));
-        checkGLcall("glBindBufferARB");
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, data->buffer_object));
+        checkGLcall("glBindBuffer");
     }
 
     if (format->flags & WINED3DFMT_FLAG_COMPRESSED)
@@ -1561,8 +1560,8 @@ void wined3d_surface_upload_data(struct wined3d_surface *surface, const struct w
 
     if (data->buffer_object)
     {
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, 0));
-        checkGLcall("glBindBufferARB");
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, 0));
+        checkGLcall("glBindBuffer");
     }
 
     if (wined3d_settings.strict_draw_ordering)
@@ -2665,9 +2664,9 @@ HRESULT CDECL wined3d_surface_map(struct wined3d_surface *surface,
             context = context_acquire(device, NULL);
             gl_info = context->gl_info;
 
-            GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, surface->pbo));
-            base_memory = GL_EXTCALL(glMapBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, GL_READ_WRITE_ARB));
-            GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, 0));
+            GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, surface->pbo));
+            base_memory = GL_EXTCALL(glMapBuffer(GL_PIXEL_UNPACK_BUFFER, GL_READ_WRITE));
+            GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, 0));
             checkGLcall("map PBO");
 
             context_release(context);
@@ -2839,8 +2838,8 @@ static void read_from_framebuffer(struct wined3d_surface *surface, DWORD dst_loc
 
     if (data.buffer_object)
     {
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_PACK_BUFFER_ARB, data.buffer_object));
-        checkGLcall("glBindBufferARB");
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_PACK_BUFFER, data.buffer_object));
+        checkGLcall("glBindBuffer");
     }
 
     /* Setup pixel store pack state -- to glReadPixels into the correct place */
@@ -2868,8 +2867,8 @@ static void read_from_framebuffer(struct wined3d_surface *surface, DWORD dst_loc
 
         if (data.buffer_object)
         {
-            mem = GL_EXTCALL(glMapBufferARB(GL_PIXEL_PACK_BUFFER_ARB, GL_READ_WRITE_ARB));
-            checkGLcall("glMapBufferARB(GL_PIXEL_PACK_BUFFER_ARB, GL_READ_WRITE_ARB)");
+            mem = GL_EXTCALL(glMapBuffer(GL_PIXEL_PACK_BUFFER, GL_READ_WRITE));
+            checkGLcall("glMapBuffer");
         }
         else
             mem = data.addr;
@@ -2887,14 +2886,14 @@ static void read_from_framebuffer(struct wined3d_surface *surface, DWORD dst_loc
         HeapFree(GetProcessHeap(), 0, row);
 
         if (data.buffer_object)
-            GL_EXTCALL(glUnmapBufferARB(GL_PIXEL_PACK_BUFFER_ARB));
+            GL_EXTCALL(glUnmapBuffer(GL_PIXEL_PACK_BUFFER));
     }
 
 error:
     if (data.buffer_object)
     {
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_PACK_BUFFER_ARB, 0));
-        checkGLcall("glBindBufferARB(GL_PIXEL_PACK_BUFFER_ARB, 0)");
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_PACK_BUFFER, 0));
+        checkGLcall("glBindBuffer");
     }
 
     context_release(context);
@@ -3239,11 +3238,10 @@ static void fb_copy_to_texture_hwstretch(struct wined3d_surface *dst_surface, st
     checkGLcall("glCopyTexSubImage2D");
 
     /* No issue with overriding these - the sampler is dirty due to blit usage */
-    gl_info->gl_ops.gl.p_glTexParameteri(texture_target, GL_TEXTURE_MAG_FILTER,
-            wined3d_gl_mag_filter(magLookup, filter));
+    gl_info->gl_ops.gl.p_glTexParameteri(texture_target, GL_TEXTURE_MAG_FILTER, wined3d_gl_mag_filter(filter));
     checkGLcall("glTexParameteri");
     gl_info->gl_ops.gl.p_glTexParameteri(texture_target, GL_TEXTURE_MIN_FILTER,
-            wined3d_gl_min_mip_filter(minMipLookup, filter, WINED3D_TEXF_NONE));
+            wined3d_gl_min_mip_filter(filter, WINED3D_TEXF_NONE));
     checkGLcall("glTexParameteri");
 
     if (!src_surface->container->swapchain
@@ -4004,9 +4002,9 @@ static void surface_copy_simple_location(struct wined3d_surface *surface, DWORD
     {
         context = context_acquire(device, NULL);
         gl_info = context->gl_info;
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, dst.buffer_object));
-        GL_EXTCALL(glBufferSubDataARB(GL_PIXEL_UNPACK_BUFFER_ARB, 0, size, src.addr));
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, 0));
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, dst.buffer_object));
+        GL_EXTCALL(glBufferSubData(GL_PIXEL_UNPACK_BUFFER, 0, size, src.addr));
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, 0));
         checkGLcall("Upload PBO");
         context_release(context);
         return;
@@ -4015,9 +4013,9 @@ static void surface_copy_simple_location(struct wined3d_surface *surface, DWORD
     {
         context = context_acquire(device, NULL);
         gl_info = context->gl_info;
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_PACK_BUFFER_ARB, src.buffer_object));
-        GL_EXTCALL(glGetBufferSubDataARB(GL_PIXEL_PACK_BUFFER_ARB, 0, size, dst.addr));
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_PACK_BUFFER_ARB, 0));
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_PACK_BUFFER, src.buffer_object));
+        GL_EXTCALL(glGetBufferSubData(GL_PIXEL_PACK_BUFFER, 0, size, dst.addr));
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_PACK_BUFFER, 0));
         checkGLcall("Download PBO");
         context_release(context);
         return;
diff --git a/dlls/wined3d/texture.c b/dlls/wined3d/texture.c
index d33bad1..f63f84b 100644
--- a/dlls/wined3d/texture.c
+++ b/dlls/wined3d/texture.c
@@ -85,17 +85,6 @@ static HRESULT wined3d_texture_init(struct wined3d_texture *texture, const struc
     if (surface_flags & WINED3D_SURFACE_PIN_SYSMEM)
         texture->flags |= WINED3D_TEXTURE_PIN_SYSMEM;
 
-    if (texture->resource.format->flags & WINED3DFMT_FLAG_FILTERING)
-    {
-        texture->min_mip_lookup = minMipLookup;
-        texture->mag_lookup = magLookup;
-    }
-    else
-    {
-        texture->min_mip_lookup = minMipLookup_noFilter;
-        texture->mag_lookup = magLookup_noFilter;
-    }
-
     return WINED3D_OK;
 }
 
@@ -207,20 +196,24 @@ void wined3d_texture_bind(struct wined3d_texture *texture,
 
     /* Initialise the state of the texture object to the OpenGL defaults, not
      * the wined3d defaults. */
-    gl_tex->states[WINED3DTEXSTA_ADDRESSU] = WINED3D_TADDRESS_WRAP;
-    gl_tex->states[WINED3DTEXSTA_ADDRESSV] = WINED3D_TADDRESS_WRAP;
-    gl_tex->states[WINED3DTEXSTA_ADDRESSW] = WINED3D_TADDRESS_WRAP;
-    gl_tex->states[WINED3DTEXSTA_BORDERCOLOR] = 0;
-    gl_tex->states[WINED3DTEXSTA_MAGFILTER] = WINED3D_TEXF_LINEAR;
-    gl_tex->states[WINED3DTEXSTA_MINFILTER] = WINED3D_TEXF_POINT; /* GL_NEAREST_MIPMAP_LINEAR */
-    gl_tex->states[WINED3DTEXSTA_MIPFILTER] = WINED3D_TEXF_LINEAR; /* GL_NEAREST_MIPMAP_LINEAR */
-    gl_tex->states[WINED3DTEXSTA_MAXMIPLEVEL] = 0;
-    gl_tex->states[WINED3DTEXSTA_MAXANISOTROPY] = 1;
+    gl_tex->sampler_desc.address_u = WINED3D_TADDRESS_WRAP;
+    gl_tex->sampler_desc.address_v = WINED3D_TADDRESS_WRAP;
+    gl_tex->sampler_desc.address_w = WINED3D_TADDRESS_WRAP;
+    memset(gl_tex->sampler_desc.border_color, 0, sizeof(gl_tex->sampler_desc.border_color));
+    gl_tex->sampler_desc.mag_filter = WINED3D_TEXF_LINEAR;
+    gl_tex->sampler_desc.min_filter = WINED3D_TEXF_POINT; /* GL_NEAREST_MIPMAP_LINEAR */
+    gl_tex->sampler_desc.mip_filter = WINED3D_TEXF_LINEAR; /* GL_NEAREST_MIPMAP_LINEAR */
+    gl_tex->sampler_desc.lod_bias = 0.0f;
+    gl_tex->sampler_desc.min_lod = -1000.0f;
+    gl_tex->sampler_desc.max_lod = 1000.0f;
+    gl_tex->sampler_desc.max_anisotropy = 1;
+    gl_tex->sampler_desc.compare = FALSE;
+    gl_tex->sampler_desc.comparison_func = WINED3D_CMP_LESSEQUAL;
     if (context->gl_info->supported[EXT_TEXTURE_SRGB_DECODE])
-        gl_tex->states[WINED3DTEXSTA_SRGBTEXTURE] = TRUE;
+        gl_tex->sampler_desc.srgb_decode = TRUE;
     else
-        gl_tex->states[WINED3DTEXSTA_SRGBTEXTURE] = srgb;
-    gl_tex->states[WINED3DTEXSTA_SHADOW] = FALSE;
+        gl_tex->sampler_desc.srgb_decode = srgb;
+    gl_tex->base_level = 0;
     wined3d_texture_set_dirty(texture);
 
     context_bind_texture(context, target, gl_tex->name);
@@ -267,11 +260,11 @@ void wined3d_texture_bind(struct wined3d_texture *texture,
         gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
         gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
         checkGLcall("glTexParameteri");
-        gl_tex->states[WINED3DTEXSTA_ADDRESSU] = WINED3D_TADDRESS_CLAMP;
-        gl_tex->states[WINED3DTEXSTA_ADDRESSV] = WINED3D_TADDRESS_CLAMP;
-        gl_tex->states[WINED3DTEXSTA_MAGFILTER] = WINED3D_TEXF_POINT;
-        gl_tex->states[WINED3DTEXSTA_MINFILTER] = WINED3D_TEXF_POINT;
-        gl_tex->states[WINED3DTEXSTA_MIPFILTER] = WINED3D_TEXF_NONE;
+        gl_tex->sampler_desc.address_u = WINED3D_TADDRESS_CLAMP;
+        gl_tex->sampler_desc.address_v = WINED3D_TADDRESS_CLAMP;
+        gl_tex->sampler_desc.mag_filter = WINED3D_TEXF_POINT;
+        gl_tex->sampler_desc.min_filter = WINED3D_TEXF_POINT;
+        gl_tex->sampler_desc.mip_filter = WINED3D_TEXF_NONE;
     }
 }
 
@@ -297,190 +290,106 @@ void wined3d_texture_bind_and_dirtify(struct wined3d_texture *texture,
     wined3d_texture_bind(texture, context, srgb);
 }
 
-/* Context activation is done by the caller. */
-static void apply_wrap(const struct wined3d_gl_info *gl_info, GLenum target,
-        enum wined3d_texture_address d3d_wrap, GLenum param, BOOL cond_np2)
-{
-    GLint gl_wrap;
-
-    if (d3d_wrap < WINED3D_TADDRESS_WRAP || d3d_wrap > WINED3D_TADDRESS_MIRROR_ONCE)
-    {
-        FIXME("Unrecognized or unsupported texture address mode %#x.\n", d3d_wrap);
-        return;
-    }
-
-    /* Cubemaps are always set to clamp, regardless of the sampler state. */
-    if (target == GL_TEXTURE_CUBE_MAP_ARB
-            || (cond_np2 && d3d_wrap == WINED3D_TADDRESS_WRAP))
-        gl_wrap = GL_CLAMP_TO_EDGE;
-    else
-        gl_wrap = gl_info->wrap_lookup[d3d_wrap - WINED3D_TADDRESS_WRAP];
-
-    TRACE("Setting param %#x to %#x for target %#x.\n", param, gl_wrap, target);
-    gl_info->gl_ops.gl.p_glTexParameteri(target, param, gl_wrap);
-    checkGLcall("glTexParameteri(target, param, gl_wrap)");
-}
-
 /* Context activation is done by the caller (state handler). */
-void wined3d_texture_apply_state_changes(struct wined3d_texture *texture,
-        const DWORD sampler_states[WINED3D_HIGHEST_SAMPLER_STATE + 1],
-        const struct wined3d_gl_info *gl_info)
+/* This function relies on the correct texture being bound and loaded. */
+void wined3d_texture_apply_sampler_desc(struct wined3d_texture *texture,
+        const struct wined3d_sampler_desc *sampler_desc, const struct wined3d_gl_info *gl_info)
 {
-    BOOL cond_np2 = texture->flags & WINED3D_TEXTURE_COND_NP2;
     GLenum target = texture->target;
     struct gl_texture *gl_tex;
     DWORD state;
-    DWORD aniso;
 
-    TRACE("texture %p, sampler_states %p.\n", texture, sampler_states);
+    TRACE("texture %p, sampler_desc %p, gl_info %p.\n", texture, sampler_desc, gl_info);
 
     gl_tex = wined3d_texture_get_gl_texture(texture, texture->flags & WINED3D_TEXTURE_IS_SRGB);
 
-    /* This function relies on the correct texture being bound and loaded. */
-
-    if (sampler_states[WINED3D_SAMP_ADDRESS_U] != gl_tex->states[WINED3DTEXSTA_ADDRESSU])
+    state = sampler_desc->address_u;
+    if (state != gl_tex->sampler_desc.address_u)
     {
-        state = sampler_states[WINED3D_SAMP_ADDRESS_U];
-        apply_wrap(gl_info, target, state, GL_TEXTURE_WRAP_S, cond_np2);
-        gl_tex->states[WINED3DTEXSTA_ADDRESSU] = state;
+        gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_WRAP_S,
+                gl_info->wrap_lookup[state - WINED3D_TADDRESS_WRAP]);
+        gl_tex->sampler_desc.address_u = state;
     }
 
-    if (sampler_states[WINED3D_SAMP_ADDRESS_V] != gl_tex->states[WINED3DTEXSTA_ADDRESSV])
+    state = sampler_desc->address_v;
+    if (state != gl_tex->sampler_desc.address_v)
     {
-        state = sampler_states[WINED3D_SAMP_ADDRESS_V];
-        apply_wrap(gl_info, target, state, GL_TEXTURE_WRAP_T, cond_np2);
-        gl_tex->states[WINED3DTEXSTA_ADDRESSV] = state;
+        gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_WRAP_T,
+                gl_info->wrap_lookup[state - WINED3D_TADDRESS_WRAP]);
+        gl_tex->sampler_desc.address_v = state;
     }
 
-    if (sampler_states[WINED3D_SAMP_ADDRESS_W] != gl_tex->states[WINED3DTEXSTA_ADDRESSW])
+    state = sampler_desc->address_w;
+    if (state != gl_tex->sampler_desc.address_w)
     {
-        state = sampler_states[WINED3D_SAMP_ADDRESS_W];
-        apply_wrap(gl_info, target, state, GL_TEXTURE_WRAP_R, cond_np2);
-        gl_tex->states[WINED3DTEXSTA_ADDRESSW] = state;
+        gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_WRAP_R,
+                gl_info->wrap_lookup[state - WINED3D_TADDRESS_WRAP]);
+        gl_tex->sampler_desc.address_w = state;
     }
 
-    if (sampler_states[WINED3D_SAMP_BORDER_COLOR] != gl_tex->states[WINED3DTEXSTA_BORDERCOLOR])
+    if (memcmp(gl_tex->sampler_desc.border_color, sampler_desc->border_color,
+            sizeof(gl_tex->sampler_desc.border_color)))
     {
-        float col[4];
-
-        state = sampler_states[WINED3D_SAMP_BORDER_COLOR];
-        D3DCOLORTOGLFLOAT4(state, col);
-        TRACE("Setting border color for %#x to %#x.\n", target, state);
-        gl_info->gl_ops.gl.p_glTexParameterfv(target, GL_TEXTURE_BORDER_COLOR, &col[0]);
-        checkGLcall("glTexParameterfv(..., GL_TEXTURE_BORDER_COLOR, ...)");
-        gl_tex->states[WINED3DTEXSTA_BORDERCOLOR] = state;
+        gl_info->gl_ops.gl.p_glTexParameterfv(target, GL_TEXTURE_BORDER_COLOR, &sampler_desc->border_color[0]);
+        memcpy(gl_tex->sampler_desc.border_color, sampler_desc->border_color,
+                sizeof(gl_tex->sampler_desc.border_color));
     }
 
-    if (sampler_states[WINED3D_SAMP_MAG_FILTER] != gl_tex->states[WINED3DTEXSTA_MAGFILTER])
+    state = sampler_desc->mag_filter;
+    if (state != gl_tex->sampler_desc.mag_filter)
     {
-        GLint gl_value;
-
-        state = sampler_states[WINED3D_SAMP_MAG_FILTER];
-        if (state > WINED3D_TEXF_ANISOTROPIC)
-            FIXME("Unrecognized or unsupported MAGFILTER* value %d.\n", state);
-
-        gl_value = wined3d_gl_mag_filter(texture->mag_lookup,
-                min(max(state, WINED3D_TEXF_POINT), WINED3D_TEXF_LINEAR));
-        TRACE("ValueMAG=%#x setting MAGFILTER to %#x.\n", state, gl_value);
-        gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_MAG_FILTER, gl_value);
-
-        gl_tex->states[WINED3DTEXSTA_MAGFILTER] = state;
+        gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_MAG_FILTER, wined3d_gl_mag_filter(state));
+        gl_tex->sampler_desc.mag_filter = state;
     }
 
-    if ((sampler_states[WINED3D_SAMP_MIN_FILTER] != gl_tex->states[WINED3DTEXSTA_MINFILTER]
-            || sampler_states[WINED3D_SAMP_MIP_FILTER] != gl_tex->states[WINED3DTEXSTA_MIPFILTER]
-            || sampler_states[WINED3D_SAMP_MAX_MIP_LEVEL] != gl_tex->states[WINED3DTEXSTA_MAXMIPLEVEL]))
+    if (sampler_desc->min_filter != gl_tex->sampler_desc.min_filter
+            || sampler_desc->mip_filter != gl_tex->sampler_desc.mip_filter)
     {
-        GLint gl_value;
-
-        gl_tex->states[WINED3DTEXSTA_MIPFILTER] = sampler_states[WINED3D_SAMP_MIP_FILTER];
-        gl_tex->states[WINED3DTEXSTA_MINFILTER] = sampler_states[WINED3D_SAMP_MIN_FILTER];
-        gl_tex->states[WINED3DTEXSTA_MAXMIPLEVEL] = sampler_states[WINED3D_SAMP_MAX_MIP_LEVEL];
-
-        if (gl_tex->states[WINED3DTEXSTA_MINFILTER] > WINED3D_TEXF_ANISOTROPIC
-            || gl_tex->states[WINED3DTEXSTA_MIPFILTER] > WINED3D_TEXF_ANISOTROPIC)
-        {
-            FIXME("Unrecognized or unsupported MIN_FILTER value %#x MIP_FILTER value %#x.\n",
-                  gl_tex->states[WINED3DTEXSTA_MINFILTER],
-                  gl_tex->states[WINED3DTEXSTA_MIPFILTER]);
-        }
-        gl_value = wined3d_gl_min_mip_filter(texture->min_mip_lookup,
-                min(max(sampler_states[WINED3D_SAMP_MIN_FILTER], WINED3D_TEXF_POINT), WINED3D_TEXF_LINEAR),
-                min(max(sampler_states[WINED3D_SAMP_MIP_FILTER], WINED3D_TEXF_NONE), WINED3D_TEXF_LINEAR));
-
-        TRACE("ValueMIN=%#x, ValueMIP=%#x, setting MINFILTER to %#x.\n",
-              sampler_states[WINED3D_SAMP_MIN_FILTER],
-              sampler_states[WINED3D_SAMP_MIP_FILTER], gl_value);
-        gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_MIN_FILTER, gl_value);
-        checkGLcall("glTexParameter GL_TEXTURE_MIN_FILTER, ...");
-
-        if (!cond_np2)
-        {
-            if (gl_tex->states[WINED3DTEXSTA_MIPFILTER] == WINED3D_TEXF_NONE)
-                gl_value = texture->lod;
-            else if (gl_tex->states[WINED3DTEXSTA_MAXMIPLEVEL] >= texture->level_count)
-                gl_value = texture->level_count - 1;
-            else if (gl_tex->states[WINED3DTEXSTA_MAXMIPLEVEL] < texture->lod)
-                /* texture->lod is already clamped in the setter. */
-                gl_value = texture->lod;
-            else
-                gl_value = gl_tex->states[WINED3DTEXSTA_MAXMIPLEVEL];
-
-            /* Note that WINED3D_SAMP_MAX_MIP_LEVEL specifies the largest mipmap
-             * (default 0), while GL_TEXTURE_MAX_LEVEL specifies the smallest
-             * mimap used (default 1000). So WINED3D_SAMP_MAX_MIP_LEVEL
-             * corresponds to GL_TEXTURE_BASE_LEVEL. */
-            gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_BASE_LEVEL, gl_value);
-        }
+        gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_MIN_FILTER,
+                wined3d_gl_min_mip_filter(sampler_desc->min_filter, sampler_desc->mip_filter));
+        gl_tex->sampler_desc.min_filter = sampler_desc->min_filter;
+        gl_tex->sampler_desc.mip_filter = sampler_desc->mip_filter;
     }
 
-    if ((gl_tex->states[WINED3DTEXSTA_MAGFILTER] != WINED3D_TEXF_ANISOTROPIC
-            && gl_tex->states[WINED3DTEXSTA_MINFILTER] != WINED3D_TEXF_ANISOTROPIC
-            && gl_tex->states[WINED3DTEXSTA_MIPFILTER] != WINED3D_TEXF_ANISOTROPIC)
-            || cond_np2)
-        aniso = 1;
-    else
-        aniso = sampler_states[WINED3D_SAMP_MAX_ANISOTROPY];
-
-    if (gl_tex->states[WINED3DTEXSTA_MAXANISOTROPY] != aniso)
+    state = sampler_desc->max_anisotropy;
+    if (state != gl_tex->sampler_desc.max_anisotropy)
     {
         if (gl_info->supported[EXT_TEXTURE_FILTER_ANISOTROPIC])
-        {
-            gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, aniso);
-            checkGLcall("glTexParameteri(GL_TEXTURE_MAX_ANISOTROPY_EXT, aniso)");
-        }
+            gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, state);
         else
-        {
             WARN("Anisotropic filtering not supported.\n");
-        }
-        gl_tex->states[WINED3DTEXSTA_MAXANISOTROPY] = aniso;
+        gl_tex->sampler_desc.max_anisotropy = state;
     }
 
     /* These should always be the same unless EXT_texture_sRGB_decode is supported. */
-    if (sampler_states[WINED3D_SAMP_SRGB_TEXTURE] != gl_tex->states[WINED3DTEXSTA_SRGBTEXTURE])
+    if (!sampler_desc->srgb_decode != !gl_tex->sampler_desc.srgb_decode)
     {
         gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_SRGB_DECODE_EXT,
-                sampler_states[WINED3D_SAMP_SRGB_TEXTURE] ? GL_DECODE_EXT : GL_SKIP_DECODE_EXT);
-        checkGLcall("glTexParameteri(GL_TEXTURE_SRGB_DECODE_EXT)");
-        gl_tex->states[WINED3DTEXSTA_SRGBTEXTURE] = sampler_states[WINED3D_SAMP_SRGB_TEXTURE];
+                sampler_desc->srgb_decode ? GL_DECODE_EXT : GL_SKIP_DECODE_EXT);
+        gl_tex->sampler_desc.srgb_decode = sampler_desc->srgb_decode;
     }
 
-    if (!(texture->resource.format->flags & WINED3DFMT_FLAG_SHADOW)
-            != !gl_tex->states[WINED3DTEXSTA_SHADOW])
+    if (!sampler_desc->compare != !gl_tex->sampler_desc.compare)
     {
-        if (texture->resource.format->flags & WINED3DFMT_FLAG_SHADOW)
+        if (sampler_desc->compare)
         {
             gl_info->gl_ops.gl.p_glTexParameteri(target, GL_DEPTH_TEXTURE_MODE_ARB, GL_LUMINANCE);
             gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_COMPARE_MODE_ARB, GL_COMPARE_R_TO_TEXTURE_ARB);
-            checkGLcall("glTexParameteri(target, GL_TEXTURE_COMPARE_MODE_ARB, GL_COMPARE_R_TO_TEXTURE_ARB)");
-            gl_tex->states[WINED3DTEXSTA_SHADOW] = TRUE;
         }
         else
         {
             gl_info->gl_ops.gl.p_glTexParameteri(target, GL_TEXTURE_COMPARE_MODE_ARB, GL_NONE);
-            checkGLcall("glTexParameteri(target, GL_TEXTURE_COMPARE_MODE_ARB, GL_NONE)");
-            gl_tex->states[WINED3DTEXSTA_SHADOW] = FALSE;
         }
+        gl_tex->sampler_desc.compare = sampler_desc->compare;
+    }
+
+    checkGLcall("Texture parameter application");
+
+    if (gl_info->supported[EXT_TEXTURE_LOD_BIAS])
+    {
+        gl_info->gl_ops.gl.p_glTexEnvf(GL_TEXTURE_FILTER_CONTROL_EXT,
+                GL_TEXTURE_LOD_BIAS_EXT, sampler_desc->lod_bias);
+        checkGLcall("glTexEnvf(GL_TEXTURE_LOD_BIAS_EXT, ...)");
     }
 }
 
@@ -597,8 +506,8 @@ DWORD CDECL wined3d_texture_set_lod(struct wined3d_texture *texture, DWORD lod)
     {
         texture->lod = lod;
 
-        texture->texture_rgb.states[WINED3DTEXSTA_MAXMIPLEVEL] = ~0U;
-        texture->texture_srgb.states[WINED3DTEXSTA_MAXMIPLEVEL] = ~0U;
+        texture->texture_rgb.base_level = ~0u;
+        texture->texture_srgb.base_level = ~0u;
         if (texture->resource.bind_count)
             device_invalidate_state(texture->resource.device, STATE_SAMPLER(texture->sampler));
     }
@@ -1237,7 +1146,6 @@ static HRESULT texture_init(struct wined3d_texture *texture, const struct wined3
         texture->pow2_matrix[15] = 1.0f;
         texture->target = GL_TEXTURE_2D;
         texture->flags |= WINED3D_TEXTURE_COND_NP2;
-        texture->min_mip_lookup = minMipLookup_noFilter;
     }
     else if (gl_info->supported[ARB_TEXTURE_RECTANGLE]
             && (desc->width != pow2_width || desc->height != pow2_height))
@@ -1249,11 +1157,6 @@ static HRESULT texture_init(struct wined3d_texture *texture, const struct wined3
         texture->target = GL_TEXTURE_RECTANGLE_ARB;
         texture->flags |= WINED3D_TEXTURE_COND_NP2;
         texture->flags &= ~(WINED3D_TEXTURE_POW2_MAT_IDENT | WINED3D_TEXTURE_NORMALIZED_COORDS);
-
-        if (texture->resource.format->flags & WINED3DFMT_FLAG_FILTERING)
-            texture->min_mip_lookup = minMipLookup_noMip;
-        else
-            texture->min_mip_lookup = minMipLookup_noFilter;
     }
     else
     {
diff --git a/dlls/wined3d/volume.c b/dlls/wined3d/volume.c
index b5ab862..f2dd9e9 100644
--- a/dlls/wined3d/volume.c
+++ b/dlls/wined3d/volume.c
@@ -105,8 +105,8 @@ void wined3d_volume_upload_data(struct wined3d_volume *volume, const struct wine
 
     if (data->buffer_object)
     {
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, data->buffer_object));
-        checkGLcall("glBindBufferARB");
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, data->buffer_object));
+        checkGLcall("glBindBuffer");
     }
 
     GL_EXTCALL(glTexSubImage3DEXT(GL_TEXTURE_3D, volume->texture_level, 0, 0, 0,
@@ -116,8 +116,8 @@ void wined3d_volume_upload_data(struct wined3d_volume *volume, const struct wine
 
     if (data->buffer_object)
     {
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, 0));
-        checkGLcall("glBindBufferARB");
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, 0));
+        checkGLcall("glBindBuffer");
     }
 
     HeapFree(GetProcessHeap(), 0, converted_mem);
@@ -153,8 +153,8 @@ static void wined3d_volume_download_data(struct wined3d_volume *volume,
 
     if (data->buffer_object)
     {
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_PACK_BUFFER_ARB, data->buffer_object));
-        checkGLcall("glBindBufferARB");
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_PACK_BUFFER, data->buffer_object));
+        checkGLcall("glBindBuffer");
     }
 
     gl_info->gl_ops.gl.p_glGetTexImage(GL_TEXTURE_3D, volume->texture_level,
@@ -163,8 +163,8 @@ static void wined3d_volume_download_data(struct wined3d_volume *volume,
 
     if (data->buffer_object)
     {
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_PACK_BUFFER_ARB, 0));
-        checkGLcall("glBindBufferARB");
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_PACK_BUFFER, 0));
+        checkGLcall("glBindBuffer");
     }
 
 }
@@ -383,10 +383,10 @@ static void wined3d_volume_prepare_pbo(struct wined3d_volume *volume, struct win
     if (volume->pbo)
         return;
 
-    GL_EXTCALL(glGenBuffersARB(1, &volume->pbo));
-    GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, volume->pbo));
-    GL_EXTCALL(glBufferDataARB(GL_PIXEL_UNPACK_BUFFER_ARB, volume->resource.size, NULL, GL_STREAM_DRAW_ARB));
-    GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, 0));
+    GL_EXTCALL(glGenBuffers(1, &volume->pbo));
+    GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, volume->pbo));
+    GL_EXTCALL(glBufferData(GL_PIXEL_UNPACK_BUFFER, volume->resource.size, NULL, GL_STREAM_DRAW));
+    GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, 0));
     checkGLcall("Create PBO");
 
     TRACE("Created PBO %u for volume %p.\n", volume->pbo, volume);
@@ -398,8 +398,8 @@ static void wined3d_volume_free_pbo(struct wined3d_volume *volume)
     const struct wined3d_gl_info *gl_info = context->gl_info;
 
     TRACE("Deleting PBO %u belonging to volume %p.\n", volume->pbo, volume);
-    GL_EXTCALL(glDeleteBuffersARB(1, &volume->pbo));
-    checkGLcall("glDeleteBuffersARB");
+    GL_EXTCALL(glDeleteBuffers(1, &volume->pbo));
+    checkGLcall("glDeleteBuffers");
     volume->pbo = 0;
     context_release(context);
 }
@@ -587,22 +587,22 @@ HRESULT CDECL wined3d_volume_map(struct wined3d_volume *volume,
         else
             wined3d_volume_load_location(volume, context, WINED3D_LOCATION_BUFFER);
 
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, volume->pbo));
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, volume->pbo));
 
         if (gl_info->supported[ARB_MAP_BUFFER_RANGE])
         {
             GLbitfield mapflags = wined3d_resource_gl_map_flags(flags);
             mapflags &= ~GL_MAP_FLUSH_EXPLICIT_BIT;
-            base_memory = GL_EXTCALL(glMapBufferRange(GL_PIXEL_UNPACK_BUFFER_ARB,
+            base_memory = GL_EXTCALL(glMapBufferRange(GL_PIXEL_UNPACK_BUFFER,
                     0, volume->resource.size, mapflags));
         }
         else
         {
             GLenum access = wined3d_resource_gl_legacy_map_flags(flags);
-            base_memory = GL_EXTCALL(glMapBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, access));
+            base_memory = GL_EXTCALL(glMapBuffer(GL_PIXEL_UNPACK_BUFFER, access));
         }
 
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, 0));
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, 0));
         checkGLcall("Map PBO");
 
         context_release(context);
@@ -704,9 +704,9 @@ HRESULT CDECL wined3d_volume_unmap(struct wined3d_volume *volume)
         struct wined3d_context *context = context_acquire(device, NULL);
         const struct wined3d_gl_info *gl_info = context->gl_info;
 
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, volume->pbo));
-        GL_EXTCALL(glUnmapBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB));
-        GL_EXTCALL(glBindBufferARB(GL_PIXEL_UNPACK_BUFFER_ARB, 0));
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, volume->pbo));
+        GL_EXTCALL(glUnmapBuffer(GL_PIXEL_UNPACK_BUFFER));
+        GL_EXTCALL(glBindBuffer(GL_PIXEL_UNPACK_BUFFER, 0));
         checkGLcall("Unmap PBO");
 
         context_release(context);
diff --git a/dlls/wined3d/wined3d.spec b/dlls/wined3d/wined3d.spec
index 7a77003..63e18c7 100644
--- a/dlls/wined3d/wined3d.spec
+++ b/dlls/wined3d/wined3d.spec
@@ -194,7 +194,7 @@
 @ cdecl wined3d_rendertarget_view_incref(ptr)
 @ cdecl wined3d_rendertarget_view_set_parent(ptr ptr)
 
-@ cdecl wined3d_sampler_create(ptr ptr)
+@ cdecl wined3d_sampler_create(ptr ptr ptr ptr)
 @ cdecl wined3d_sampler_decref(ptr)
 @ cdecl wined3d_sampler_get_parent(ptr)
 @ cdecl wined3d_sampler_incref(ptr)
diff --git a/dlls/wined3d/wined3d_gl.h b/dlls/wined3d/wined3d_gl.h
index aadc3d5..cbb99e5 100644
--- a/dlls/wined3d/wined3d_gl.h
+++ b/dlls/wined3d/wined3d_gl.h
@@ -71,6 +71,7 @@ enum wined3d_gl_extension
     ARB_POINT_PARAMETERS,
     ARB_POINT_SPRITE,
     ARB_PROVOKING_VERTEX,
+    ARB_SAMPLER_OBJECTS,
     ARB_SHADER_BIT_ENCODING,
     ARB_SHADER_OBJECTS,
     ARB_SHADER_TEXTURE_LOD,
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 047946b..9107697 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -186,20 +186,19 @@ struct min_lookup
 };
 
 extern const struct min_lookup minMipLookup[WINED3D_TEXF_LINEAR + 1] DECLSPEC_HIDDEN;
-extern const struct min_lookup minMipLookup_noFilter[WINED3D_TEXF_LINEAR + 1] DECLSPEC_HIDDEN;
-extern const struct min_lookup minMipLookup_noMip[WINED3D_TEXF_LINEAR + 1] DECLSPEC_HIDDEN;
 extern const GLenum magLookup[WINED3D_TEXF_LINEAR + 1] DECLSPEC_HIDDEN;
-extern const GLenum magLookup_noFilter[WINED3D_TEXF_LINEAR + 1] DECLSPEC_HIDDEN;
 
-static inline GLenum wined3d_gl_mag_filter(const GLenum mag_lookup[], enum wined3d_texture_filter_type mag_filter)
+GLenum wined3d_gl_compare_func(enum wined3d_cmp_func f) DECLSPEC_HIDDEN;
+
+static inline GLenum wined3d_gl_mag_filter(enum wined3d_texture_filter_type mag_filter)
 {
-    return mag_lookup[mag_filter];
+    return magLookup[mag_filter];
 }
 
-static inline GLenum wined3d_gl_min_mip_filter(const struct min_lookup min_mip_lookup[],
-        enum wined3d_texture_filter_type min_filter, enum wined3d_texture_filter_type mip_filter)
+static inline GLenum wined3d_gl_min_mip_filter(enum wined3d_texture_filter_type min_filter,
+        enum wined3d_texture_filter_type mip_filter)
 {
-    return min_mip_lookup[min_filter].mip[mip_filter];
+    return minMipLookup[min_filter].mip[mip_filter];
 }
 
 /* float_16_to_32() and float_32_to_16() (see implementation in
@@ -1995,6 +1994,7 @@ struct wined3d_device
 
     struct list             resources; /* a linked list to track resources created by the device */
     struct list             shaders;   /* a linked list to track shaders (pixel and vertex)      */
+    struct wine_rb_tree samplers;
 
     /* Render Target Support */
     struct wined3d_fb_state fb;
@@ -2127,26 +2127,11 @@ void wined3d_resource_update_draw_binding(struct wined3d_resource *resource) DEC
 /* Tests show that the start address of resources is 32 byte aligned */
 #define RESOURCE_ALIGNMENT 16
 
-enum wined3d_texture_state
-{
-    WINED3DTEXSTA_ADDRESSU       = 0,
-    WINED3DTEXSTA_ADDRESSV       = 1,
-    WINED3DTEXSTA_ADDRESSW       = 2,
-    WINED3DTEXSTA_BORDERCOLOR    = 3,
-    WINED3DTEXSTA_MAGFILTER      = 4,
-    WINED3DTEXSTA_MINFILTER      = 5,
-    WINED3DTEXSTA_MIPFILTER      = 6,
-    WINED3DTEXSTA_MAXMIPLEVEL    = 7,
-    WINED3DTEXSTA_MAXANISOTROPY  = 8,
-    WINED3DTEXSTA_SRGBTEXTURE    = 9,
-    WINED3DTEXSTA_SHADOW         = 10,
-    MAX_WINETEXTURESTATES        = 11,
-};
-
 struct gl_texture
 {
-    DWORD                   states[MAX_WINETEXTURESTATES];
-    GLuint                  name;
+    struct wined3d_sampler_desc sampler_desc;
+    unsigned int base_level;
+    GLuint name;
 };
 
 struct wined3d_texture_ops
@@ -2190,8 +2175,6 @@ struct wined3d_texture
     enum wined3d_texture_filter_type filter_type;
     DWORD sampler;
     DWORD flags;
-    const struct min_lookup *min_mip_lookup;
-    const GLenum *mag_lookup;
     GLenum target;
 
     /* Color keys for DDraw */
@@ -2213,9 +2196,8 @@ static inline struct gl_texture *wined3d_texture_get_gl_texture(struct wined3d_t
     return srgb ? &texture->texture_srgb : &texture->texture_rgb;
 }
 
-void wined3d_texture_apply_state_changes(struct wined3d_texture *texture,
-        const DWORD samplerStates[WINED3D_HIGHEST_SAMPLER_STATE + 1],
-        const struct wined3d_gl_info *gl_info) DECLSPEC_HIDDEN;
+void wined3d_texture_apply_sampler_desc(struct wined3d_texture *texture,
+        const struct wined3d_sampler_desc *sampler_desc, const struct wined3d_gl_info *gl_info) DECLSPEC_HIDDEN;
 void wined3d_texture_bind(struct wined3d_texture *texture,
         struct wined3d_context *context, BOOL srgb) DECLSPEC_HIDDEN;
 void wined3d_texture_bind_and_dirtify(struct wined3d_texture *texture,
@@ -2407,8 +2389,12 @@ void flip_surface(struct wined3d_surface *front, struct wined3d_surface *back) D
 
 struct wined3d_sampler
 {
+    struct wine_rb_entry entry;
     LONG refcount;
+    struct wined3d_device *device;
     void *parent;
+    struct wined3d_sampler_desc desc;
+    GLuint name;
 };
 
 struct wined3d_vertex_declaration_element
diff --git a/dlls/winhttp/main.c b/dlls/winhttp/main.c
index 9cdcc98..cd2d114 100644
--- a/dlls/winhttp/main.c
+++ b/dlls/winhttp/main.c
@@ -48,6 +48,7 @@ BOOL WINAPI DllMain(HINSTANCE hInstDLL, DWORD fdwReason, LPVOID lpv)
     case DLL_PROCESS_DETACH:
         if (lpv) break;
         netconn_unload();
+        release_typelib();
         break;
     }
     return TRUE;
diff --git a/dlls/winhttp/request.c b/dlls/winhttp/request.c
index 61f5439..de5eae4 100644
--- a/dlls/winhttp/request.c
+++ b/dlls/winhttp/request.c
@@ -2754,9 +2754,22 @@ static HRESULT get_typeinfo( enum type_id tid, ITypeInfo **ret )
             ITypeInfo_Release( typeinfo );
     }
     *ret = winhttp_typeinfo[tid];
+    ITypeInfo_AddRef(winhttp_typeinfo[tid]);
     return S_OK;
 }
 
+void release_typelib(void)
+{
+    unsigned i;
+
+    for (i = 0; i < sizeof(winhttp_typeinfo)/sizeof(*winhttp_typeinfo); i++)
+        if (winhttp_typeinfo[i])
+            ITypeInfo_Release(winhttp_typeinfo[i]);
+
+    if (winhttp_typelib)
+        ITypeLib_Release(winhttp_typelib);
+}
+
 static HRESULT WINAPI winhttp_request_GetTypeInfo(
     IWinHttpRequest *iface,
     UINT index,
diff --git a/dlls/winhttp/winhttp_private.h b/dlls/winhttp/winhttp_private.h
index d08d153..51043fd 100644
--- a/dlls/winhttp/winhttp_private.h
+++ b/dlls/winhttp/winhttp_private.h
@@ -283,6 +283,7 @@ BOOL set_server_for_hostname( connect_t *, LPCWSTR, INTERNET_PORT ) DECLSPEC_HID
 void destroy_authinfo( struct authinfo * ) DECLSPEC_HIDDEN;
 
 extern HRESULT WinHttpRequest_create( void ** ) DECLSPEC_HIDDEN;
+void release_typelib( void ) DECLSPEC_HIDDEN;
 
 static inline void *heap_alloc( SIZE_T size )
 {
diff --git a/dlls/wininet/ftp.c b/dlls/wininet/ftp.c
index f45e495..64c06c3 100644
--- a/dlls/wininet/ftp.c
+++ b/dlls/wininet/ftp.c
@@ -831,6 +831,7 @@ static HINTERNET FTP_FtpFindFirstFileW(ftp_session_t *lpwfs,
     INT nResCode;
     appinfo_t *hIC = NULL;
     HINTERNET hFindNext = NULL;
+    LPWSTR lpszSearchPath = NULL;
 
     TRACE("\n");
 
@@ -846,7 +847,20 @@ static HINTERNET FTP_FtpFindFirstFileW(ftp_session_t *lpwfs,
     if (!FTP_SendPortOrPasv(lpwfs))
         goto lend;
 
-    if (!FTP_SendCommand(lpwfs->sndSocket, FTP_CMD_LIST, NULL,
+    /* split search path into file and path */
+    if (lpszSearchFile)
+    {
+        LPCWSTR name = lpszSearchFile, p;
+        if ((p = strrchrW( name, '\\' ))) name = p + 1;
+        if ((p = strrchrW( name, '/' ))) name = p + 1;
+        if (name != lpszSearchFile)
+        {
+            lpszSearchPath = heap_strndupW(lpszSearchFile, name - lpszSearchFile);
+            lpszSearchFile = name;
+        }
+    }
+
+    if (!FTP_SendCommand(lpwfs->sndSocket, FTP_CMD_LIST, lpszSearchPath,
         lpwfs->hdr.lpfnStatusCB, &lpwfs->hdr, lpwfs->hdr.dwContext))
         goto lend;
 
@@ -872,6 +886,8 @@ static HINTERNET FTP_FtpFindFirstFileW(ftp_session_t *lpwfs,
     }
 
 lend:
+    heap_free(lpszSearchPath);
+
     if (lpwfs->lstnSocket != -1)
     {
         closesocket(lpwfs->lstnSocket);
diff --git a/dlls/wininet/tests/ftp.c b/dlls/wininet/tests/ftp.c
index b88b136..567545d 100644
--- a/dlls/wininet/tests/ftp.c
+++ b/dlls/wininet/tests/ftp.c
@@ -751,6 +751,7 @@ static void test_find_first_file(HINTERNET hFtp, HINTERNET hConnect)
     HINTERNET hSearch2;
     HINTERNET hOpenFile;
     DWORD error;
+    BOOL success;
 
     /* NULL as the search file ought to return the first file in the directory */
     SetLastError(0xdeadbeef);
@@ -770,13 +771,13 @@ static void test_find_first_file(HINTERNET hFtp, HINTERNET hConnect)
     /* Try a valid filename in a subdirectory search */
     SetLastError(0xdeadbeef);
     hSearch = FtpFindFirstFileA(hFtp, "pub/wine", &findData, 0, 0);
-    todo_wine ok ( hSearch != NULL, "Expected FtpFindFirstFileA to pass\n" );
+    ok( hSearch != NULL, "Expected FtpFindFirstFileA to pass\n" );
     InternetCloseHandle(hSearch);
 
     /* Try a valid filename in a subdirectory wildcard search */
     SetLastError(0xdeadbeef);
     hSearch = FtpFindFirstFileA(hFtp, "pub/w*", &findData, 0, 0);
-    todo_wine ok ( hSearch != NULL, "Expected FtpFindFirstFileA to pass\n" );
+    ok( hSearch != NULL, "Expected FtpFindFirstFileA to pass\n" );
     InternetCloseHandle(hSearch);
 
     /* Try an invalid wildcard search */
@@ -785,6 +786,24 @@ static void test_find_first_file(HINTERNET hFtp, HINTERNET hConnect)
     ok ( hSearch == NULL, "Expected FtpFindFirstFileA to fail\n" );
     InternetCloseHandle(hSearch); /* Just in case */
 
+    /* change current directory, and repeat those tests - this shows
+     * that the search string is interpreted as relative directory. */
+    success = FtpSetCurrentDirectoryA(hFtp, "pub");
+    ok( success, "Expected FtpSetCurrentDirectory to succeed\n" );
+
+    SetLastError(0xdeadbeef);
+    hSearch = FtpFindFirstFileA(hFtp, "wine", &findData, 0, 0);
+    ok( hSearch != NULL, "Expected FtpFindFirstFileA to pass\n" );
+    InternetCloseHandle(hSearch);
+
+    SetLastError(0xdeadbeef);
+    hSearch = FtpFindFirstFileA(hFtp, "w*", &findData, 0, 0);
+    ok( hSearch != NULL, "Expected FtpFindFirstFileA to pass\n" );
+    InternetCloseHandle(hSearch);
+
+    success = FtpSetCurrentDirectoryA(hFtp, "..");
+    ok( success, "Expected FtpSetCurrentDirectory to succeed\n" );
+
     /* Try FindFirstFile between FtpOpenFile and InternetCloseHandle */
     SetLastError(0xdeadbeef);
     hOpenFile = FtpOpenFileA(hFtp, "welcome.msg", GENERIC_READ, FTP_TRANSFER_TYPE_ASCII, 0);
diff --git a/dlls/winmm/mci.c b/dlls/winmm/mci.c
index 10e2b40..a77514c 100644
--- a/dlls/winmm/mci.c
+++ b/dlls/winmm/mci.c
@@ -2054,14 +2054,13 @@ static	DWORD MCI_SysInfo(UINT uDevID, DWORD dwFlags, LPMCI_SYSINFO_PARMSW lpParm
  */
 static	DWORD MCI_Break(UINT wDevID, DWORD dwFlags, LPMCI_BREAK_PARMS lpParms)
 {
-    DWORD	dwRet = 0;
-
-    if (lpParms == NULL)	return MCIERR_NULL_PARAMETER_BLOCK;
+    if (lpParms == NULL)
+        return MCIERR_NULL_PARAMETER_BLOCK;
     FIXME("(%04x) vkey %04X stub\n", dwFlags, lpParms->nVirtKey);
 
-    if (MMSYSERR_NOERROR==dwRet && (dwFlags & MCI_NOTIFY))
+    if (dwFlags & MCI_NOTIFY)
         mciDriverNotify((HWND)lpParms->dwCallback, wDevID, MCI_NOTIFY_SUCCESSFUL);
-    return dwRet;
+    return MMSYSERR_NOERROR;
 }
 
 /**************************************************************************
diff --git a/dlls/wintab32/context.c b/dlls/wintab32/context.c
index 9bc29a4..8db6217 100644
--- a/dlls/wintab32/context.c
+++ b/dlls/wintab32/context.c
@@ -410,7 +410,7 @@ static UINT WTInfoT(UINT wCategory, UINT nIndex, LPVOID lpOutput, BOOL bUnicode)
             pWTInfoW(wCategory, nIndex, &buf);
 
             /*  Handle system extents here, as we can use user32.dll code to set them */
-            if(wCategory == WTI_DEFSYSCTX && nIndex == 0)
+            if(wCategory == WTI_DEFSYSCTX)
             {
                 buf.lcSysExtX = GetSystemMetrics(SM_CXSCREEN);
                 buf.lcSysExtY = GetSystemMetrics(SM_CYSCREEN);
diff --git a/dlls/ws2_32/socket.c b/dlls/ws2_32/socket.c
index e1b2a05..0bc9d16 100644
--- a/dlls/ws2_32/socket.c
+++ b/dlls/ws2_32/socket.c
@@ -1822,7 +1822,7 @@ static INT WS_EnumProtocols( BOOL unicode, const INT *protocols, LPWSAPROTOCOL_I
     if (*len < size || !buffer)
     {
         *len = size;
-        WSASetLastError(WSAENOBUFS);
+        SetLastError(WSAENOBUFS);
         return SOCKET_ERROR;
     }
 
@@ -2985,7 +2985,10 @@ int WINAPI WS_getpeername(SOCKET s, struct WS_sockaddr *name, int *namelen)
                 /* The buffer was too small */
                 SetLastError(WSAEFAULT);
             else
+            {
                 res = 0;
+                TRACE("=> %s\n", debugstr_sockaddr(name));
+            }
         }
         else
             SetLastError(wsaErrno());
@@ -3635,7 +3638,7 @@ int WINAPI WSAHtonl(SOCKET s, WS_u_long hostlong, WS_u_long *lpnetlong)
         *lpnetlong = htonl(hostlong);
         return 0;
     }
-    WSASetLastError(WSAEFAULT);
+    SetLastError(WSAEFAULT);
     return SOCKET_ERROR;
 }
 
@@ -3654,7 +3657,7 @@ int WINAPI WSAHtons(SOCKET s, WS_u_short hostshort, WS_u_short *lpnetshort)
         *lpnetshort = htons(hostshort);
         return 0;
     }
-    WSASetLastError(WSAEFAULT);
+    SetLastError(WSAEFAULT);
     return SOCKET_ERROR;
 }
 
@@ -3825,7 +3828,7 @@ INT WINAPI WSAIoctl(SOCKET s, DWORD code, LPVOID in_buff, DWORD in_size, LPVOID
     case WS_FIONBIO:
         if (in_size != sizeof(WS_u_long) || IS_INTRESOURCE(in_buff))
         {
-            WSASetLastError(WSAEFAULT);
+            SetLastError(WSAEFAULT);
             return SOCKET_ERROR;
         }
         TRACE("-> FIONBIO (%x)\n", *(WS_u_long*)in_buff);
@@ -3845,7 +3848,7 @@ INT WINAPI WSAIoctl(SOCKET s, DWORD code, LPVOID in_buff, DWORD in_size, LPVOID
     {
         if (out_size != sizeof(WS_u_long) || IS_INTRESOURCE(out_buff))
         {
-            WSASetLastError(WSAEFAULT);
+            SetLastError(WSAEFAULT);
             return SOCKET_ERROR;
         }
         if ((fd = get_sock_fd( s, 0, NULL )) == -1) return SOCKET_ERROR;
@@ -3861,7 +3864,7 @@ INT WINAPI WSAIoctl(SOCKET s, DWORD code, LPVOID in_buff, DWORD in_size, LPVOID
         socklen_t oobsize = sizeof(int);
         if (out_size != sizeof(WS_u_long) || IS_INTRESOURCE(out_buff))
         {
-            WSASetLastError(WSAEFAULT);
+            SetLastError(WSAEFAULT);
             return SOCKET_ERROR;
         }
         if ((fd = get_sock_fd( s, 0, NULL )) == -1) return SOCKET_ERROR;
@@ -3896,7 +3899,7 @@ INT WINAPI WSAIoctl(SOCKET s, DWORD code, LPVOID in_buff, DWORD in_size, LPVOID
 
            if (!out_buff || !ret_size)
            {
-               WSASetLastError(WSAEFAULT);
+               SetLastError(WSAEFAULT);
                return SOCKET_ERROR;
            }
 
@@ -4006,14 +4009,14 @@ INT WINAPI WSAIoctl(SOCKET s, DWORD code, LPVOID in_buff, DWORD in_size, LPVOID
 
         if (!ret_size)
         {
-            WSASetLastError(WSAEFAULT);
+            SetLastError(WSAEFAULT);
             return SOCKET_ERROR;
         }
 
         if (out_size && out_size < FIELD_OFFSET(SOCKET_ADDRESS_LIST, Address[0]))
         {
             *ret_size = 0;
-            WSASetLastError(WSAEINVAL);
+            SetLastError(WSAEINVAL);
             return SOCKET_ERROR;
         }
 
@@ -4138,7 +4141,7 @@ INT WINAPI WSAIoctl(SOCKET s, DWORD code, LPVOID in_buff, DWORD in_size, LPVOID
 
         if (!in_buff || in_size < sizeof(struct tcp_keepalive))
         {
-            WSASetLastError(WSAEFAULT);
+            SetLastError(WSAEFAULT);
             return SOCKET_ERROR;
         }
 
@@ -4182,7 +4185,7 @@ INT WINAPI WSAIoctl(SOCKET s, DWORD code, LPVOID in_buff, DWORD in_size, LPVOID
        if (!in_buff || in_size < sizeof(struct WS_sockaddr) ||
            !out_buff || out_size < sizeof(struct WS_sockaddr_in) || !ret_size)
        {
-           WSASetLastError(WSAEFAULT);
+           SetLastError(WSAEFAULT);
            return SOCKET_ERROR;
        }
        if (daddr->sa_family != AF_INET)
@@ -4233,7 +4236,7 @@ INT WINAPI WSAIoctl(SOCKET s, DWORD code, LPVOID in_buff, DWORD in_size, LPVOID
        FIXME("WS_SIO_UDP_CONNRESET stub\n");
        break;
     case 0x667e: /* Netscape tries hard to use bogus ioctl 0x667e */
-        WSASetLastError(WSAEOPNOTSUPP);
+        SetLastError(WSAEOPNOTSUPP);
         return SOCKET_ERROR;
     default:
         status = WSAEOPNOTSUPP;
@@ -4698,7 +4701,7 @@ static int WS2_sendto( SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount,
             _enable_event(SOCKET2HANDLE(s), FD_WRITE, 0, 0);
 
             if (err != STATUS_PENDING) HeapFree( GetProcessHeap(), 0, wsa );
-            WSASetLastError( NtStatusToWSAError( err ));
+            SetLastError(NtStatusToWSAError( err ));
             return SOCKET_ERROR;
         }
 
@@ -4713,7 +4716,7 @@ static int WS2_sendto( SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount,
         }
         else NtQueueApcThread( GetCurrentThread(), (PNTAPCFUNC)ws2_async_apc,
                                (ULONG_PTR)wsa, (ULONG_PTR)iosb, 0 );
-        WSASetLastError(0);
+        SetLastError(ERROR_SUCCESS);
         return 0;
     }
 
@@ -4779,14 +4782,14 @@ static int WS2_sendto( SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount,
     if (lpNumberOfBytesSent) *lpNumberOfBytesSent = bytes_sent;
     if (wsa != &localwsa) HeapFree( GetProcessHeap(), 0, wsa );
     release_sock_fd( s, fd );
-    WSASetLastError(0);
+    SetLastError(ERROR_SUCCESS);
     return 0;
 
 error:
     if (wsa != &localwsa) HeapFree( GetProcessHeap(), 0, wsa );
     release_sock_fd( s, fd );
     WARN(" -> ERROR %d\n", err);
-    WSASetLastError(err);
+    SetLastError(err);
     return SOCKET_ERROR;
 }
 
@@ -5177,7 +5180,7 @@ int WINAPI WS_shutdown(SOCKET s, int how)
 error:
     release_sock_fd( s, fd );
     _enable_event( SOCKET2HANDLE(s), 0, 0, clear_flags );
-    WSASetLastError( err );
+    SetLastError( err );
     return SOCKET_ERROR;
 }
 
@@ -5385,7 +5388,7 @@ struct WS_hostent* WINAPI WS_gethostbyname(const char* name)
         return NULL;
     }
     if( gethostname( hostname, 100) == -1) {
-        SetLastError( WSAENOBUFS); /* appropriate ? */
+        SetLastError(WSAENOBUFS); /* appropriate ? */
         return retval;
     }
     if( !name || !name[0]) {
@@ -5656,7 +5659,7 @@ int WINAPI WS_getaddrinfo(LPCSTR nodename, LPCSTR servname, const struct WS_addr
 
         if (punixhints->ai_socktype < 0)
         {
-            WSASetLastError(WSAESOCKTNOSUPPORT);
+            SetLastError(WSAESOCKTNOSUPPORT);
             HeapFree(GetProcessHeap(), 0, hostname);
             return SOCKET_ERROR;
         }
@@ -5920,7 +5923,7 @@ int WINAPI WS_getnameinfo(const SOCKADDR *sa, WS_socklen_t salen, PCHAR host,
     size = ws_sockaddr_ws2u(sa, salen, &sa_u);
     if (!size)
     {
-        WSASetLastError(WSAEFAULT);
+        SetLastError(WSAEFAULT);
         return WSA_NOT_ENOUGH_MEMORY;
     }
     ret = getnameinfo(&sa_u.addr, size, host, hostlen, serv, servlen, convert_niflag_w2u(flags));
@@ -6074,7 +6077,7 @@ BOOL WINAPI WSAGetOverlappedResult( SOCKET s, LPWSAOVERLAPPED lpOverlapped,
     if ( lpOverlapped == NULL )
     {
         ERR( "Invalid pointer\n" );
-        WSASetLastError(WSA_INVALID_PARAMETER);
+        SetLastError(WSA_INVALID_PARAMETER);
         return FALSE;
     }
 
@@ -6173,7 +6176,7 @@ SOCKET WINAPI WSASocketA(int af, int type, int protocol,
 
     if (!len)
     {
-        WSASetLastError( WSAEINVAL);
+        SetLastError(WSAEINVAL);
         return SOCKET_ERROR;
     }
 
@@ -6716,7 +6719,7 @@ static int WS2_recv_base( SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount,
                 SERVER_END_REQ;
 
                 if (err != STATUS_PENDING) HeapFree( GetProcessHeap(), 0, wsa );
-                WSASetLastError( NtStatusToWSAError( err ));
+                SetLastError(NtStatusToWSAError( err ));
                 return SOCKET_ERROR;
             }
 
@@ -6776,6 +6779,7 @@ static int WS2_recv_base( SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount,
     if (wsa != &localwsa) HeapFree( GetProcessHeap(), 0, wsa );
     release_sock_fd( s, fd );
     _enable_event(SOCKET2HANDLE(s), FD_READ, 0, 0);
+    SetLastError(ERROR_SUCCESS);
 
     return 0;
 
@@ -6783,7 +6787,7 @@ error:
     if (wsa != &localwsa) HeapFree( GetProcessHeap(), 0, wsa );
     release_sock_fd( s, fd );
     WARN(" -> ERROR %d\n", err);
-    WSASetLastError( err );
+    SetLastError( err );
     return SOCKET_ERROR;
 }
 
@@ -6925,7 +6929,7 @@ int WINAPI WSADuplicateSocketW( SOCKET s, DWORD dwProcessId, LPWSAPROTOCOL_INFOW
 int WINAPI WSAInstallServiceClassA(LPWSASERVICECLASSINFOA info)
 {
     FIXME("Request to install service %s\n",debugstr_a(info->lpszServiceClassName));
-    WSASetLastError(WSAEACCES);
+    SetLastError(WSAEACCES);
     return SOCKET_ERROR;
 }
 
@@ -6935,7 +6939,7 @@ int WINAPI WSAInstallServiceClassA(LPWSASERVICECLASSINFOA info)
 int WINAPI WSAInstallServiceClassW(LPWSASERVICECLASSINFOW info)
 {
     FIXME("Request to install service %s\n",debugstr_w(info->lpszServiceClassName));
-    WSASetLastError(WSAEACCES);
+    SetLastError(WSAEACCES);
     return SOCKET_ERROR;
 }
 
@@ -6945,7 +6949,7 @@ int WINAPI WSAInstallServiceClassW(LPWSASERVICECLASSINFOW info)
 int WINAPI WSARemoveServiceClass(LPGUID info)
 {
     FIXME("Request to remove service %p\n",info);
-    WSASetLastError(WSATYPE_NOT_FOUND);
+    SetLastError(WSATYPE_NOT_FOUND);
     return SOCKET_ERROR;
 }
 
@@ -6962,7 +6966,7 @@ PCSTR WINAPI WS_inet_ntop( INT family, PVOID addr, PSTR buffer, SIZE_T len )
     TRACE("family %d, addr (%p), buffer (%p), len %ld\n", family, addr, buffer, len);
     if (!buffer)
     {
-        WSASetLastError( STATUS_INVALID_PARAMETER );
+        SetLastError( STATUS_INVALID_PARAMETER );
         return NULL;
     }
 
@@ -6981,15 +6985,15 @@ PCSTR WINAPI WS_inet_ntop( INT family, PVOID addr, PSTR buffer, SIZE_T len )
         break;
     }
     default:
-        WSASetLastError( WSAEAFNOSUPPORT );
+        SetLastError( WSAEAFNOSUPPORT );
         return NULL;
     }
 
-    if (!pdst) WSASetLastError( STATUS_INVALID_PARAMETER );
+    if (!pdst) SetLastError( STATUS_INVALID_PARAMETER );
     return pdst;
 #else
     FIXME( "not supported on this platform\n" );
-    WSASetLastError( WSAEAFNOSUPPORT );
+    SetLastError( WSAEAFNOSUPPORT );
     return NULL;
 #endif
 }
@@ -7022,7 +7026,7 @@ INT WINAPI WS_inet_pton( INT family, PCSTR addr, PVOID buffer)
     return ret;
 #else
     FIXME( "not supported on this platform\n" );
-    WSASetLastError( WSAEAFNOSUPPORT );
+    SetLastError( WSAEAFNOSUPPORT );
     return SOCKET_ERROR;
 #endif
 }
@@ -7047,7 +7051,7 @@ INT WINAPI WSAStringToAddressA(LPSTR AddressString,
 
     if (!AddressString)
     {
-        WSASetLastError(WSAEINVAL);
+        SetLastError(WSAEINVAL);
         return SOCKET_ERROR;
     }
 
@@ -7058,7 +7062,7 @@ INT WINAPI WSAStringToAddressA(LPSTR AddressString,
                             strlen(AddressString) + 1);
     if (!workBuffer)
     {
-        WSASetLastError(WSA_NOT_ENOUGH_MEMORY);
+        SetLastError(WSA_NOT_ENOUGH_MEMORY);
         return SOCKET_ERROR;
     }
 
@@ -7164,7 +7168,7 @@ INT WINAPI WSAStringToAddressA(LPSTR AddressString,
     HeapFree(GetProcessHeap(), 0, workBuffer);
 
     if (!res) return 0;
-    WSASetLastError(res);
+    SetLastError(res);
     return SOCKET_ERROR;
 }
 
@@ -7200,7 +7204,7 @@ INT WINAPI WSAStringToAddressW(LPWSTR AddressString,
         if (!WideCharToMultiByte( CP_ACP, 0, lpProtocolInfo->szProtocol, -1,
                                   lpProtoInfoA->szProtocol, WSAPROTOCOL_LEN+1, NULL, NULL ))
         {
-            WSASetLastError( WSAEINVAL);
+            SetLastError(WSAEINVAL);
             return SOCKET_ERROR;
         }
     }
@@ -7226,7 +7230,7 @@ INT WINAPI WSAStringToAddressW(LPWSTR AddressString,
     else
         res = WSAEINVAL;
 
-    WSASetLastError(res);
+    SetLastError(res);
     return SOCKET_ERROR;
 }
 
@@ -7273,7 +7277,7 @@ INT WINAPI WSAAddressToStringA( LPSOCKADDR sockaddr, DWORD len,
             strcpy(buffer, "[");
         if (!WS_inet_ntop(WS_AF_INET6, &sockaddr6->sin6_addr, buffer+strlen(buffer), sizeof(buffer)))
         {
-            WSASetLastError(WSAEINVAL);
+            SetLastError(WSAEINVAL);
             return SOCKET_ERROR;
         }
         if ((sockaddr6->sin6_scope_id))
@@ -7284,7 +7288,7 @@ INT WINAPI WSAAddressToStringA( LPSOCKADDR sockaddr, DWORD len,
     }
 
     default:
-        WSASetLastError(WSAEINVAL);
+        SetLastError(WSAEINVAL);
         return SOCKET_ERROR;
     }
 
@@ -7293,7 +7297,7 @@ INT WINAPI WSAAddressToStringA( LPSOCKADDR sockaddr, DWORD len,
     if (*lenstr <  size)
     {
         *lenstr = size;
-        WSASetLastError(WSAEFAULT);
+        SetLastError(WSAEFAULT);
         return SOCKET_ERROR;
     }
 
@@ -7343,7 +7347,7 @@ INT WINAPI WSAAddressToStringW( LPSOCKADDR sockaddr, DWORD len,
     if (*lenstr <  size)
     {
         *lenstr = size;
-        WSASetLastError(WSAEFAULT);
+        SetLastError(WSAEFAULT);
         return SOCKET_ERROR;
     }
 
@@ -7388,7 +7392,7 @@ INT WINAPI WSAGetServiceClassInfoA( LPGUID provider, LPGUID service, LPDWORD len
 {
     FIXME( "(%s %s %p %p) Stub!\n", debugstr_guid(provider), debugstr_guid(service),
            len, info );
-    WSASetLastError(WSA_NOT_ENOUGH_MEMORY);
+    SetLastError(WSA_NOT_ENOUGH_MEMORY);
     return SOCKET_ERROR; 
 }
 
@@ -7400,7 +7404,7 @@ INT WINAPI WSAGetServiceClassInfoW( LPGUID provider, LPGUID service, LPDWORD len
 {
     FIXME( "(%s %s %p %p) Stub!\n", debugstr_guid(provider), debugstr_guid(service),
            len, info );
-    WSASetLastError(WSA_NOT_ENOUGH_MEMORY);
+    SetLastError(WSA_NOT_ENOUGH_MEMORY);
     return SOCKET_ERROR;
 }
 
@@ -7410,7 +7414,7 @@ INT WINAPI WSAGetServiceClassInfoW( LPGUID provider, LPGUID service, LPDWORD len
 INT WINAPI WSAGetServiceClassNameByClassIdA( LPGUID class, LPSTR service, LPDWORD len )
 {
     FIXME( "(%s %p %p) Stub!\n", debugstr_guid(class), service, len );
-    WSASetLastError(WSA_NOT_ENOUGH_MEMORY);
+    SetLastError(WSA_NOT_ENOUGH_MEMORY);
     return SOCKET_ERROR;
 }
 
@@ -7420,7 +7424,7 @@ INT WINAPI WSAGetServiceClassNameByClassIdA( LPGUID class, LPSTR service, LPDWOR
 INT WINAPI WSAGetServiceClassNameByClassIdW( LPGUID class, LPWSTR service, LPDWORD len )
 {
     FIXME( "(%s %p %p) Stub!\n", debugstr_guid(class), service, len );
-    WSASetLastError(WSA_NOT_ENOUGH_MEMORY);
+    SetLastError(WSA_NOT_ENOUGH_MEMORY);
     return SOCKET_ERROR;
 }
 
@@ -7433,7 +7437,7 @@ INT WINAPI WSALookupServiceBeginA( LPWSAQUERYSETA lpqsRestrictions,
 {
     FIXME("(%p 0x%08x %p) Stub!\n", lpqsRestrictions, dwControlFlags,
             lphLookup);
-    WSASetLastError(WSA_NOT_ENOUGH_MEMORY);
+    SetLastError(WSA_NOT_ENOUGH_MEMORY);
     return SOCKET_ERROR;
 }
 
@@ -7446,7 +7450,7 @@ INT WINAPI WSALookupServiceBeginW( LPWSAQUERYSETW lpqsRestrictions,
 {
     FIXME("(%p 0x%08x %p) Stub!\n", lpqsRestrictions, dwControlFlags,
             lphLookup);
-    WSASetLastError(WSA_NOT_ENOUGH_MEMORY);
+    SetLastError(WSA_NOT_ENOUGH_MEMORY);
     return SOCKET_ERROR;
 }
 
@@ -7465,7 +7469,7 @@ INT WINAPI WSALookupServiceEnd( HANDLE lookup )
 INT WINAPI WSALookupServiceNextA( HANDLE lookup, DWORD flags, LPDWORD len, LPWSAQUERYSETA results )
 {
     FIXME( "(%p 0x%08x %p %p) Stub!\n", lookup, flags, len, results );
-    WSASetLastError(WSA_E_NO_MORE);
+    SetLastError(WSA_E_NO_MORE);
     return SOCKET_ERROR;
 }
 
@@ -7475,7 +7479,7 @@ INT WINAPI WSALookupServiceNextA( HANDLE lookup, DWORD flags, LPDWORD len, LPWSA
 INT WINAPI WSALookupServiceNextW( HANDLE lookup, DWORD flags, LPDWORD len, LPWSAQUERYSETW results )
 {
     FIXME( "(%p 0x%08x %p %p) Stub!\n", lookup, flags, len, results );
-    WSASetLastError(WSA_E_NO_MORE);
+    SetLastError(WSA_E_NO_MORE);
     return SOCKET_ERROR;
 }
 
@@ -7603,7 +7607,7 @@ INT WINAPI WSANSPIoctl( HANDLE hLookup, DWORD dwControlCode, LPVOID lpvInBuffer,
 {
     FIXME("(%p, 0x%08x, %p, 0x%08x, %p, 0x%08x, %p, %p) Stub!\n", hLookup, dwControlCode,
     lpvInBuffer, cbInBuffer, lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpCompletion);
-    WSASetLastError(WSA_NOT_ENOUGH_MEMORY);
+    SetLastError(WSA_NOT_ENOUGH_MEMORY);
     return SOCKET_ERROR;
 }
 
diff --git a/dlls/ws2_32/tests/sock.c b/dlls/ws2_32/tests/sock.c
index ce47712..78ae609 100644
--- a/dlls/ws2_32/tests/sock.c
+++ b/dlls/ws2_32/tests/sock.c
@@ -5136,14 +5136,12 @@ static void test_events(int useMessages)
     SetLastError(0xdeadbeef);
     ret = recv(src, buffer, 1, MSG_PEEK);
     ok(ret == 1, "Failed to peek at recv buffer %d err %d\n", ret, GetLastError());
-todo_wine
     ok(GetLastError() == ERROR_SUCCESS, "Expected 0, got %d\n", GetLastError());
     ok_event_seq(src, hEvent, read_seq, NULL, 0);
 
     SetLastError(0xdeadbeef);
     ret = recv(src, buffer, 50, 0);
     ok(ret == 50, "Failed to recv buffer %d err %d\n", ret, GetLastError());
-todo_wine
     ok(GetLastError() == ERROR_SUCCESS, "Expected 0, got %d\n", GetLastError());
     ok_event_seq(src, hEvent, read_seq, NULL, 0);
 
@@ -5171,7 +5169,6 @@ todo_wine
     SetLastError(0xdeadbeef);
     ret = recv(src, buffer, 1, 0);
     ok(ret == 1, "Failed to recv buffer %d err %d\n", ret, GetLastError());
-todo_wine
     ok(GetLastError() == ERROR_SUCCESS, "Expected 0, got %d\n", GetLastError());
     ok_event_seq(src, hEvent, empty_seq, NULL, 0);
 
@@ -5603,7 +5600,6 @@ static void test_WSASendMsg(void)
     ret = recvfrom(dst, buffer, sizeof(buffer), 0, (struct sockaddr *) &sockaddr, &addrlen);
     ok(ret == bytesSent, "got %d, expected %d\n",
        ret, bytesSent);
-todo_wine
     ok(GetLastError() == ERROR_SUCCESS, "Expected 0, got %d\n", GetLastError());
 
     /* A successful call to WSASendMsg must have bound the socket */
@@ -5634,7 +5630,6 @@ todo_wine
     ret = recvfrom(dst, buffer, sizeof(buffer), 0, (struct sockaddr *) &sockaddr, &addrlen);
     ok(ret == bytesSent, "got %d, expected %d\n",
        ret, bytesSent);
-todo_wine
     ok(GetLastError() == ERROR_SUCCESS, "Expected 0, got %d\n", GetLastError());
 
     closesocket(sock);
@@ -5770,14 +5765,12 @@ static void test_WSARecv(void)
     iret = WSARecv(dest, &bufs, 1, &bytesReturned, &flags, NULL, NULL);
     ok(!iret, "Expected 0, got %d\n", iret);
     ok(bytesReturned, "Expected 2, got %d\n", bytesReturned);
-todo_wine
     ok(GetLastError() == ERROR_SUCCESS, "Expected 0, got %d\n", GetLastError());
     SetLastError(0xdeadbeef);
     bytesReturned = 0xdeadbeef;
     iret = WSARecv(dest, &bufs, 1, &bytesReturned, &flags, NULL, NULL);
     ok(!iret, "Expected 0, got %d\n", iret);
     ok(bytesReturned, "Expected 2, got %d\n", bytesReturned);
-todo_wine
     ok(GetLastError() == ERROR_SUCCESS, "Expected 0, got %d\n", GetLastError());
 
     bufs.len = 4;
@@ -5790,7 +5783,6 @@ todo_wine
     iret = WSARecv(dest, &bufs, 1, &bytesReturned, &flags, NULL, NULL);
     ok(!iret, "Expected 0, got %d\n", iret);
     ok(bytesReturned, "Expected 4, got %d\n", bytesReturned);
-todo_wine
     ok(GetLastError() == ERROR_SUCCESS, "Expected 0, got %d\n", GetLastError());
 
     bufs.len = sizeof(buf);
diff --git a/dlls/xaudio2_7/Makefile.in b/dlls/xaudio2_7/Makefile.in
new file mode 100644
index 0000000..853d1d6
--- /dev/null
+++ b/dlls/xaudio2_7/Makefile.in
@@ -0,0 +1,5 @@
+MODULE    = xaudio2_7.dll
+IMPORTS   = advapi32 kernel32 ole32 user32 uuid
+
+C_SRCS = \
+	xaudio_dll.c
diff --git a/dlls/xaudio2_7/xaudio2_7.spec b/dlls/xaudio2_7/xaudio2_7.spec
new file mode 100644
index 0000000..b16365d
--- /dev/null
+++ b/dlls/xaudio2_7/xaudio2_7.spec
@@ -0,0 +1,4 @@
+@ stdcall -private DllCanUnloadNow()
+@ stdcall -private DllGetClassObject(ptr ptr ptr)
+@ stdcall -private DllRegisterServer()
+@ stdcall -private DllUnregisterServer()
diff --git a/dlls/xaudio2_7/xaudio_dll.c b/dlls/xaudio2_7/xaudio_dll.c
new file mode 100644
index 0000000..c8b7904
--- /dev/null
+++ b/dlls/xaudio2_7/xaudio_dll.c
@@ -0,0 +1,86 @@
+/*
+ * Copyright (c) 2015 Mark Harmstone
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include <stdarg.h>
+
+#define COBJMACROS
+
+#include "windef.h"
+#include "winbase.h"
+#include "winuser.h"
+
+#include "ole2.h"
+#include "rpcproxy.h"
+
+#include "wine/debug.h"
+#include <propsys.h>
+#include "initguid.h"
+#include "xaudio2.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(xaudio2);
+
+static HINSTANCE instance;
+
+BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
+{
+    TRACE("(%p, %d, %p)\n", hinstDLL, fdwReason, lpvReserved);
+
+    switch (fdwReason)
+    {
+    case DLL_WINE_PREATTACH:
+        return FALSE;  /* prefer native version */
+    case DLL_PROCESS_ATTACH:
+        instance = hinstDLL;
+        DisableThreadLibraryCalls( hinstDLL );
+        break;
+    }
+    return TRUE;
+}
+
+HRESULT WINAPI DllCanUnloadNow(void)
+{
+    return S_FALSE;
+}
+
+HRESULT WINAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID *ppv)
+{
+    TRACE("(%s, %s, %p)\n", debugstr_guid(rclsid), debugstr_guid(riid), ppv);
+
+    if (ppv == NULL) {
+        WARN("invalid parameter\n");
+        return E_INVALIDARG;
+    }
+
+    *ppv = NULL;
+
+    WARN("(%s, %s, %p): no class found.\n", debugstr_guid(rclsid),
+         debugstr_guid(riid), ppv);
+    return CLASS_E_CLASSNOTAVAILABLE;
+}
+
+HRESULT WINAPI DllRegisterServer(void)
+{
+    TRACE("\n");
+    return __wine_register_resources( instance );
+}
+
+HRESULT WINAPI DllUnregisterServer(void)
+{
+    TRACE("\n");
+    return __wine_unregister_resources( instance );
+}
diff --git a/include/activscp.idl b/include/activscp.idl
index c7fc2d2..8a3d75d 100644
--- a/include/activscp.idl
+++ b/include/activscp.idl
@@ -118,6 +118,10 @@ cpp_quote("#define SCRIPTSTAT_INSTRUCTION_COUNT    2")
 cpp_quote("#define SCRIPTSTAT_INTSTRUCTION_TIME    3")
 cpp_quote("#define SCRIPTSTAT_TOTAL_TIME           4")
 
+cpp_quote("#define SCRIPT_E_RECORDED  0x86664004")
+cpp_quote("#define SCRIPT_E_REPORTED  0x80020101")
+cpp_quote("#define SCRIPT_E_PROPAGATE 0x80020102")
+
 [
 object,
 uuid(EAE1BA61-A4ED-11cf-8F20-00805F2CD064),
diff --git a/include/wine/wgl.h b/include/wine/wgl.h
index f11f19c..2fbc717 100644
--- a/include/wine/wgl.h
+++ b/include/wine/wgl.h
@@ -49,12 +49,14 @@ typedef void                   GLvoid;
 #define GL_2PASS_1_SGIS                                               0x80A3
 #define GL_2X_BIT_ATI                                                 0x00000001
 #define GL_2_BYTES                                                    0x1407
+#define GL_2_BYTES_NV                                                 0x1407
 #define GL_3D                                                         0x0601
 #define GL_3DC_XY_AMD                                                 0x87FA
 #define GL_3DC_X_AMD                                                  0x87F9
 #define GL_3D_COLOR                                                   0x0602
 #define GL_3D_COLOR_TEXTURE                                           0x0603
 #define GL_3_BYTES                                                    0x1408
+#define GL_3_BYTES_NV                                                 0x1408
 #define GL_422_AVERAGE_EXT                                            0x80CE
 #define GL_422_EXT                                                    0x80CC
 #define GL_422_REV_AVERAGE_EXT                                        0x80CF
@@ -70,6 +72,7 @@ typedef void                   GLvoid;
 #define GL_4PASS_3_SGIS                                               0x80A7
 #define GL_4X_BIT_ATI                                                 0x00000002
 #define GL_4_BYTES                                                    0x1409
+#define GL_4_BYTES_NV                                                 0x1409
 #define GL_8X_BIT_ATI                                                 0x00000004
 #define GL_ABGR_EXT                                                   0x8000
 #define GL_ACCUM                                                      0x0100
@@ -259,6 +262,7 @@ typedef void                   GLvoid;
 #define GL_BITMAP                                                     0x1A00
 #define GL_BITMAP_TOKEN                                               0x0704
 #define GL_BLEND                                                      0x0BE2
+#define GL_BLEND_ADVANCED_COHERENT_KHR                                0x9285
 #define GL_BLEND_ADVANCED_COHERENT_NV                                 0x9285
 #define GL_BLEND_COLOR                                                0x8005
 #define GL_BLEND_COLOR_EXT                                            0x8005
@@ -364,7 +368,9 @@ typedef void                   GLvoid;
 #define GL_CLAMP_READ_COLOR_ARB                                       0x891C
 #define GL_CLAMP_TO_BORDER                                            0x812D
 #define GL_CLAMP_TO_BORDER_ARB                                        0x812D
+#define GL_CLAMP_TO_BORDER_EXT                                        0x812D
 #define GL_CLAMP_TO_BORDER_NV                                         0x812D
+#define GL_CLAMP_TO_BORDER_OES                                        0x812D
 #define GL_CLAMP_TO_BORDER_SGIS                                       0x812D
 #define GL_CLAMP_TO_EDGE                                              0x812F
 #define GL_CLAMP_TO_EDGE_SGIS                                         0x812F
@@ -381,17 +387,29 @@ typedef void                   GLvoid;
 #define GL_CLIENT_PIXEL_STORE_BIT                                     0x00000001
 #define GL_CLIENT_STORAGE_BIT                                         0x0200
 #define GL_CLIENT_VERTEX_ARRAY_BIT                                    0x00000002
+#define GL_CLIPPING_INPUT_PRIMITIVES_ARB                              0x82F6
+#define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB                             0x82F7
+#define GL_CLIP_DEPTH_MODE                                            0x935D
 #define GL_CLIP_DISTANCE0                                             0x3000
+#define GL_CLIP_DISTANCE0_APPLE                                       0x3000
 #define GL_CLIP_DISTANCE1                                             0x3001
+#define GL_CLIP_DISTANCE1_APPLE                                       0x3001
 #define GL_CLIP_DISTANCE2                                             0x3002
+#define GL_CLIP_DISTANCE2_APPLE                                       0x3002
 #define GL_CLIP_DISTANCE3                                             0x3003
+#define GL_CLIP_DISTANCE3_APPLE                                       0x3003
 #define GL_CLIP_DISTANCE4                                             0x3004
+#define GL_CLIP_DISTANCE4_APPLE                                       0x3004
 #define GL_CLIP_DISTANCE5                                             0x3005
+#define GL_CLIP_DISTANCE5_APPLE                                       0x3005
 #define GL_CLIP_DISTANCE6                                             0x3006
+#define GL_CLIP_DISTANCE6_APPLE                                       0x3006
 #define GL_CLIP_DISTANCE7                                             0x3007
+#define GL_CLIP_DISTANCE7_APPLE                                       0x3007
 #define GL_CLIP_DISTANCE_NV                                           0x8C7A
 #define GL_CLIP_FAR_HINT_PGI                                          0x1A221
 #define GL_CLIP_NEAR_HINT_PGI                                         0x1A220
+#define GL_CLIP_ORIGIN                                                0x935C
 #define GL_CLIP_PLANE0                                                0x3000
 #define GL_CLIP_PLANE0_IMG                                            0x3000
 #define GL_CLIP_PLANE1                                                0x3001
@@ -414,7 +432,9 @@ typedef void                   GLvoid;
 #define GL_COLOR                                                      0x1800
 #define GL_COLOR3_BIT_PGI                                             0x00010000
 #define GL_COLOR4_BIT_PGI                                             0x00020000
+#define GL_COLORBURN_KHR                                              0x929A
 #define GL_COLORBURN_NV                                               0x929A
+#define GL_COLORDODGE_KHR                                             0x9299
 #define GL_COLORDODGE_NV                                              0x9299
 #define GL_COLOR_ALPHA_PAIRING_ATI                                    0x8975
 #define GL_COLOR_ARRAY                                                0x8076
@@ -591,6 +611,7 @@ typedef void                   GLvoid;
 #define GL_COMPRESSED_INTENSITY_ARB                                   0x84EC
 #define GL_COMPRESSED_LUMINANCE                                       0x84EA
 #define GL_COMPRESSED_LUMINANCE_ALPHA                                 0x84EB
+#define GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI                         0x8837
 #define GL_COMPRESSED_LUMINANCE_ALPHA_ARB                             0x84EB
 #define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT                       0x8C72
 #define GL_COMPRESSED_LUMINANCE_ARB                                   0x84EA
@@ -619,14 +640,25 @@ typedef void                   GLvoid;
 #define GL_COMPRESSED_RGBA_ASTC_10x8_KHR                              0x93BA
 #define GL_COMPRESSED_RGBA_ASTC_12x10_KHR                             0x93BC
 #define GL_COMPRESSED_RGBA_ASTC_12x12_KHR                             0x93BD
+#define GL_COMPRESSED_RGBA_ASTC_3x3x3_OES                             0x93C0
+#define GL_COMPRESSED_RGBA_ASTC_4x3x3_OES                             0x93C1
 #define GL_COMPRESSED_RGBA_ASTC_4x4_KHR                               0x93B0
+#define GL_COMPRESSED_RGBA_ASTC_4x4x3_OES                             0x93C2
+#define GL_COMPRESSED_RGBA_ASTC_4x4x4_OES                             0x93C3
 #define GL_COMPRESSED_RGBA_ASTC_5x4_KHR                               0x93B1
+#define GL_COMPRESSED_RGBA_ASTC_5x4x4_OES                             0x93C4
 #define GL_COMPRESSED_RGBA_ASTC_5x5_KHR                               0x93B2
+#define GL_COMPRESSED_RGBA_ASTC_5x5x4_OES                             0x93C5
+#define GL_COMPRESSED_RGBA_ASTC_5x5x5_OES                             0x93C6
 #define GL_COMPRESSED_RGBA_ASTC_6x5_KHR                               0x93B3
+#define GL_COMPRESSED_RGBA_ASTC_6x5x5_OES                             0x93C7
 #define GL_COMPRESSED_RGBA_ASTC_6x6_KHR                               0x93B4
+#define GL_COMPRESSED_RGBA_ASTC_6x6x5_OES                             0x93C8
+#define GL_COMPRESSED_RGBA_ASTC_6x6x6_OES                             0x93C9
 #define GL_COMPRESSED_RGBA_ASTC_8x5_KHR                               0x93B5
 #define GL_COMPRESSED_RGBA_ASTC_8x6_KHR                               0x93B6
 #define GL_COMPRESSED_RGBA_ASTC_8x8_KHR                               0x93B7
+#define GL_COMPRESSED_RGBA_BPTC_UNORM                                 0x8E8C
 #define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB                             0x8E8C
 #define GL_COMPRESSED_RGBA_FXT1_3DFX                                  0x86B1
 #define GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG                           0x8C03
@@ -639,7 +671,9 @@ typedef void                   GLvoid;
 #define GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE                            0x83F3
 #define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT                              0x83F3
 #define GL_COMPRESSED_RGB_ARB                                         0x84ED
+#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT                           0x8E8E
 #define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB                       0x8E8E
+#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT                         0x8E8F
 #define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB                     0x8E8F
 #define GL_COMPRESSED_RGB_FXT1_3DFX                                   0x86B0
 #define GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG                            0x8C01
@@ -667,11 +701,21 @@ typedef void                   GLvoid;
 #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR                      0x93DA
 #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR                     0x93DC
 #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR                     0x93DD
+#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES                     0x93E0
+#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES                     0x93E1
 #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR                       0x93D0
+#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES                     0x93E2
+#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES                     0x93E3
 #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR                       0x93D1
+#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES                     0x93E4
 #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR                       0x93D2
+#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES                     0x93E5
+#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES                     0x93E6
 #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR                       0x93D3
+#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES                     0x93E7
 #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR                       0x93D4
+#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES                     0x93E8
+#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES                     0x93E9
 #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR                       0x93D5
 #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR                       0x93D6
 #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR                       0x93D7
@@ -682,10 +726,13 @@ typedef void                   GLvoid;
 #define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2                  0x9277
 #define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES              0x9277
 #define GL_COMPRESSED_SRGB_ALPHA                                      0x8C49
+#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM                           0x8E8D
 #define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB                       0x8E8D
 #define GL_COMPRESSED_SRGB_ALPHA_EXT                                  0x8C49
 #define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT                     0x8A56
+#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG                     0x93F0
 #define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT                     0x8A57
+#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG                     0x93F1
 #define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT                        0x8C4D
 #define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV                         0x8C4D
 #define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT                        0x8C4E
@@ -703,6 +750,7 @@ typedef void                   GLvoid;
 #define GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV                        0x90FC
 #define GL_COMPUTE_SHADER                                             0x91B9
 #define GL_COMPUTE_SHADER_BIT                                         0x00000020
+#define GL_COMPUTE_SHADER_INVOCATIONS_ARB                             0x82F5
 #define GL_COMPUTE_SUBROUTINE                                         0x92ED
 #define GL_COMPUTE_SUBROUTINE_UNIFORM                                 0x92F3
 #define GL_COMPUTE_TEXTURE                                            0x82A0
@@ -710,7 +758,10 @@ typedef void                   GLvoid;
 #define GL_COMP_BIT_ATI                                               0x00000002
 #define GL_CONDITION_SATISFIED                                        0x911C
 #define GL_CONDITION_SATISFIED_APPLE                                  0x911C
+#define GL_CONFORMANT_NV                                              0x9374
+#define GL_CONIC_CURVE_TO_NV                                          0x1A
 #define GL_CONJOINT_NV                                                0x9284
+#define GL_CONSERVATIVE_RASTERIZATION_NV                              0x9346
 #define GL_CONSERVE_MEMORY_HINT_PGI                                   0x1A1FD
 #define GL_CONSTANT                                                   0x8576
 #define GL_CONSTANT_ALPHA                                             0x8003
@@ -724,6 +775,7 @@ typedef void                   GLvoid;
 #define GL_CONSTANT_COLOR1_NV                                         0x852B
 #define GL_CONSTANT_COLOR_EXT                                         0x8001
 #define GL_CONSTANT_EXT                                               0x8576
+#define GL_CONSTANT_NV                                                0x8576
 #define GL_CONST_EYE_NV                                               0x86E5
 #define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT                          0x00000002
 #define GL_CONTEXT_CORE_PROFILE_BIT                                   0x00000001
@@ -731,10 +783,19 @@ typedef void                   GLvoid;
 #define GL_CONTEXT_FLAG_DEBUG_BIT                                     0x00000002
 #define GL_CONTEXT_FLAG_DEBUG_BIT_KHR                                 0x00000002
 #define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT                        0x00000001
+#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT                             0x00000004
 #define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB                         0x00000004
+#define GL_CONTEXT_LOST                                               0x0507
+#define GL_CONTEXT_LOST_KHR                                           0x0507
 #define GL_CONTEXT_LOST_WEBGL                                         0x9242
 #define GL_CONTEXT_PROFILE_MASK                                       0x9126
+#define GL_CONTEXT_RELEASE_BEHAVIOR                                   0x82FB
+#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH                             0x82FC
+#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR                         0x82FC
+#define GL_CONTEXT_RELEASE_BEHAVIOR_KHR                               0x82FB
+#define GL_CONTEXT_ROBUST_ACCESS                                      0x90F3
 #define GL_CONTEXT_ROBUST_ACCESS_EXT                                  0x90F3
+#define GL_CONTEXT_ROBUST_ACCESS_KHR                                  0x90F3
 #define GL_CONTINUOUS_AMD                                             0x9007
 #define GL_CONTRAST_NV                                                0x92A1
 #define GL_CONVEX_HULL_NV                                             0x908B
@@ -814,6 +875,9 @@ typedef void                   GLvoid;
 #define GL_COVERAGE_COMPONENT4_NV                                     0x8ED1
 #define GL_COVERAGE_COMPONENT_NV                                      0x8ED0
 #define GL_COVERAGE_EDGE_FRAGMENTS_NV                                 0x8ED6
+#define GL_COVERAGE_MODULATION_NV                                     0x9332
+#define GL_COVERAGE_MODULATION_TABLE_NV                               0x9331
+#define GL_COVERAGE_MODULATION_TABLE_SIZE_NV                          0x9333
 #define GL_COVERAGE_SAMPLES_NV                                        0x8ED4
 #define GL_CPU_OPTIMIZED_QCOM                                         0x8FB1
 #define GL_CUBIC_CURVE_TO_NV                                          0x0C
@@ -867,6 +931,7 @@ typedef void                   GLvoid;
 #define GL_CURRENT_VERTEX_WEIGHT_EXT                                  0x850B
 #define GL_CURRENT_WEIGHT_ARB                                         0x86A8
 #define GL_CW                                                         0x0900
+#define GL_DARKEN_KHR                                                 0x9297
 #define GL_DARKEN_NV                                                  0x9297
 #define GL_DATA_BUFFER_AMD                                            0x9151
 #define GL_DEBUG_ASSERT_MESA                                          0x875B
@@ -1021,6 +1086,7 @@ typedef void                   GLvoid;
 #define GL_DEPTH_PASS_INSTRUMENT_SGIX                                 0x8310
 #define GL_DEPTH_RANGE                                                0x0B70
 #define GL_DEPTH_RENDERABLE                                           0x8287
+#define GL_DEPTH_SAMPLES_NV                                           0x932D
 #define GL_DEPTH_SCALE                                                0x0D1E
 #define GL_DEPTH_STENCIL                                              0x84F9
 #define GL_DEPTH_STENCIL_ATTACHMENT                                   0x821A
@@ -1040,6 +1106,7 @@ typedef void                   GLvoid;
 #define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS                            0x809C
 #define GL_DETAIL_TEXTURE_LEVEL_SGIS                                  0x809A
 #define GL_DETAIL_TEXTURE_MODE_SGIS                                   0x809B
+#define GL_DIFFERENCE_KHR                                             0x929E
 #define GL_DIFFERENCE_NV                                              0x929E
 #define GL_DIFFUSE                                                    0x1201
 #define GL_DISCARD_ATI                                                0x8763
@@ -1052,6 +1119,7 @@ typedef void                   GLvoid;
 #define GL_DISTANCE_ATTENUATION_EXT                                   0x8129
 #define GL_DISTANCE_ATTENUATION_SGIS                                  0x8129
 #define GL_DITHER                                                     0x0BD0
+#define GL_DMP_PROGRAM_BINARY_DMP                                     0x9253
 #define GL_DOMAIN                                                     0x0A02
 #define GL_DONT_CARE                                                  0x1100
 #define GL_DOT2_ADD_ATI                                               0x896C
@@ -1262,6 +1330,7 @@ typedef void                   GLvoid;
 #define GL_EDGE_FLAG_ARRAY_POINTER_EXT                                0x8093
 #define GL_EDGE_FLAG_ARRAY_STRIDE                                     0x808C
 #define GL_EDGE_FLAG_ARRAY_STRIDE_EXT                                 0x808C
+#define GL_EFFECTIVE_RASTER_SAMPLES_EXT                               0x932C
 #define GL_EIGHTH_BIT_ATI                                             0x00000020
 #define GL_ELEMENT_ARRAY_ADDRESS_NV                                   0x8F29
 #define GL_ELEMENT_ARRAY_APPLE                                        0x8A0C
@@ -1307,6 +1376,7 @@ typedef void                   GLvoid;
 #define GL_EVAL_VERTEX_ATTRIB7_NV                                     0x86CD
 #define GL_EVAL_VERTEX_ATTRIB8_NV                                     0x86CE
 #define GL_EVAL_VERTEX_ATTRIB9_NV                                     0x86CF
+#define GL_EXCLUSION_KHR                                              0x92A0
 #define GL_EXCLUSION_NV                                               0x92A0
 #define GL_EXP                                                        0x0800
 #define GL_EXP2                                                       0x0801
@@ -1317,6 +1387,7 @@ typedef void                   GLvoid;
 #define GL_EYE_DISTANCE_TO_LINE_SGIS                                  0x81F2
 #define GL_EYE_DISTANCE_TO_POINT_SGIS                                 0x81F0
 #define GL_EYE_LINEAR                                                 0x2400
+#define GL_EYE_LINEAR_NV                                              0x2400
 #define GL_EYE_LINE_SGIS                                              0x81F6
 #define GL_EYE_PLANE                                                  0x2502
 #define GL_EYE_PLANE_ABSOLUTE_NV                                      0x855C
@@ -1336,16 +1407,19 @@ typedef void                   GLvoid;
 #define GL_FENCE_APPLE                                                0x8A0B
 #define GL_FENCE_CONDITION_NV                                         0x84F4
 #define GL_FENCE_STATUS_NV                                            0x84F3
+#define GL_FETCH_PER_SAMPLE_ARM                                       0x8F65
 #define GL_FIELDS_NV                                                  0x8E27
 #define GL_FIELD_LOWER_NV                                             0x9023
 #define GL_FIELD_UPPER_NV                                             0x9022
 #define GL_FILE_NAME_NV                                               0x9074
 #define GL_FILL                                                       0x1B02
+#define GL_FILL_RECTANGLE_NV                                          0x933C
 #define GL_FILTER                                                     0x829A
 #define GL_FILTER4_SGIS                                               0x8146
 #define GL_FIRST_TO_REST_NV                                           0x90AF
 #define GL_FIRST_VERTEX_CONVENTION                                    0x8E4D
 #define GL_FIRST_VERTEX_CONVENTION_EXT                                0x8E4D
+#define GL_FIRST_VERTEX_CONVENTION_OES                                0x8E4D
 #define GL_FIXED                                                      0x140C
 #define GL_FIXED_OES                                                  0x140C
 #define GL_FIXED_ONLY                                                 0x891D
@@ -1438,12 +1512,17 @@ typedef void                   GLvoid;
 #define GL_FOG_START                                                  0x0B63
 #define GL_FONT_ASCENDER_BIT_NV                                       0x00200000
 #define GL_FONT_DESCENDER_BIT_NV                                      0x00400000
+#define GL_FONT_GLYPHS_AVAILABLE_NV                                   0x9368
 #define GL_FONT_HAS_KERNING_BIT_NV                                    0x10000000
 #define GL_FONT_HEIGHT_BIT_NV                                         0x00800000
 #define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV                             0x02000000
 #define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV                              0x01000000
+#define GL_FONT_NUM_GLYPH_INDICES_BIT_NV                              0x20000000
+#define GL_FONT_TARGET_UNAVAILABLE_NV                                 0x9369
+#define GL_FONT_UNAVAILABLE_NV                                        0x936A
 #define GL_FONT_UNDERLINE_POSITION_BIT_NV                             0x04000000
 #define GL_FONT_UNDERLINE_THICKNESS_BIT_NV                            0x08000000
+#define GL_FONT_UNINTELLIGIBLE_NV                                     0x936B
 #define GL_FONT_UNITS_PER_EM_BIT_NV                                   0x00100000
 #define GL_FONT_X_MAX_BOUNDS_BIT_NV                                   0x00040000
 #define GL_FONT_X_MIN_BOUNDS_BIT_NV                                   0x00010000
@@ -1453,7 +1532,11 @@ typedef void                   GLvoid;
 #define GL_FORMAT_SUBSAMPLE_244_244_OML                               0x8983
 #define GL_FORMAT_SUBSAMPLE_24_24_OML                                 0x8982
 #define GL_FRACTIONAL_EVEN                                            0x8E7C
+#define GL_FRACTIONAL_EVEN_EXT                                        0x8E7C
+#define GL_FRACTIONAL_EVEN_OES                                        0x8E7C
 #define GL_FRACTIONAL_ODD                                             0x8E7B
+#define GL_FRACTIONAL_ODD_EXT                                         0x8E7B
+#define GL_FRACTIONAL_ODD_OES                                         0x8E7B
 #define GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX                         0x8314
 #define GL_FRAGMENTS_INSTRUMENT_MAX_SGIX                              0x8315
 #define GL_FRAGMENTS_INSTRUMENT_SGIX                                  0x8313
@@ -1462,9 +1545,13 @@ typedef void                   GLvoid;
 #define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX                          0x8402
 #define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX                     0x8403
 #define GL_FRAGMENT_COLOR_MATERIAL_SGIX                               0x8401
+#define GL_FRAGMENT_COVERAGE_COLOR_NV                                 0x92DE
+#define GL_FRAGMENT_COVERAGE_TO_COLOR_NV                              0x92DD
 #define GL_FRAGMENT_DEPTH                                             0x8452
 #define GL_FRAGMENT_DEPTH_EXT                                         0x8452
+#define GL_FRAGMENT_INPUT_NV                                          0x936D
 #define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS                         0x8E5D
+#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES                     0x8E5D
 #define GL_FRAGMENT_LIGHT0_SGIX                                       0x840C
 #define GL_FRAGMENT_LIGHT1_SGIX                                       0x840D
 #define GL_FRAGMENT_LIGHT2_SGIX                                       0x840E
@@ -1498,6 +1585,8 @@ typedef void                   GLvoid;
 #define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB                        0x8B8B
 #define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES                        0x8B8B
 #define GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT                       0x8A52
+#define GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM                  0x8F66
+#define GL_FRAGMENT_SHADER_INVOCATIONS_ARB                            0x82F4
 #define GL_FRAGMENT_SUBROUTINE                                        0x92EC
 #define GL_FRAGMENT_SUBROUTINE_UNIFORM                                0x92F2
 #define GL_FRAGMENT_TEXTURE                                           0x829F
@@ -1514,6 +1603,7 @@ typedef void                   GLvoid;
 #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED                             0x8DA7
 #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB                         0x8DA7
 #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT                         0x8DA7
+#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES                         0x8DA7
 #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME                         0x8CD1
 #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT                     0x8CD1
 #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES                     0x8CD1
@@ -1547,6 +1637,8 @@ typedef void                   GLvoid;
 #define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS                 0x9314
 #define GL_FRAMEBUFFER_DEFAULT_HEIGHT                                 0x9311
 #define GL_FRAMEBUFFER_DEFAULT_LAYERS                                 0x9312
+#define GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT                             0x9312
+#define GL_FRAMEBUFFER_DEFAULT_LAYERS_OES                             0x9312
 #define GL_FRAMEBUFFER_DEFAULT_SAMPLES                                0x9313
 #define GL_FRAMEBUFFER_DEFAULT_WIDTH                                  0x9310
 #define GL_FRAMEBUFFER_EXT                                            0x8D40
@@ -1566,6 +1658,7 @@ typedef void                   GLvoid;
 #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS                       0x8DA8
 #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB                   0x8DA8
 #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT                   0x8DA8
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES                   0x8DA8
 #define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT                  0x8CD7
 #define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT              0x8CD7
 #define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES              0x8CD7
@@ -1579,8 +1672,10 @@ typedef void                   GLvoid;
 #define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT                     0x8CDC
 #define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES                     0x8CDC
 #define GL_FRAMEBUFFER_OES                                            0x8D40
+#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV               0x9342
 #define GL_FRAMEBUFFER_RENDERABLE                                     0x8289
 #define GL_FRAMEBUFFER_RENDERABLE_LAYERED                             0x828A
+#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV                  0x9343
 #define GL_FRAMEBUFFER_SRGB                                           0x8DB9
 #define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT                               0x8DBA
 #define GL_FRAMEBUFFER_SRGB_EXT                                       0x8DB9
@@ -1620,6 +1715,12 @@ typedef void                   GLvoid;
 #define GL_GEOMETRY_INPUT_TYPE                                        0x8917
 #define GL_GEOMETRY_INPUT_TYPE_ARB                                    0x8DDB
 #define GL_GEOMETRY_INPUT_TYPE_EXT                                    0x8DDB
+#define GL_GEOMETRY_LINKED_INPUT_TYPE_EXT                             0x8917
+#define GL_GEOMETRY_LINKED_INPUT_TYPE_OES                             0x8917
+#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT                            0x8918
+#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES                            0x8918
+#define GL_GEOMETRY_LINKED_VERTICES_OUT_EXT                           0x8916
+#define GL_GEOMETRY_LINKED_VERTICES_OUT_OES                           0x8916
 #define GL_GEOMETRY_OUTPUT_TYPE                                       0x8918
 #define GL_GEOMETRY_OUTPUT_TYPE_ARB                                   0x8DDC
 #define GL_GEOMETRY_OUTPUT_TYPE_EXT                                   0x8DDC
@@ -1628,8 +1729,14 @@ typedef void                   GLvoid;
 #define GL_GEOMETRY_SHADER                                            0x8DD9
 #define GL_GEOMETRY_SHADER_ARB                                        0x8DD9
 #define GL_GEOMETRY_SHADER_BIT                                        0x00000004
+#define GL_GEOMETRY_SHADER_BIT_EXT                                    0x00000004
+#define GL_GEOMETRY_SHADER_BIT_OES                                    0x00000004
 #define GL_GEOMETRY_SHADER_EXT                                        0x8DD9
 #define GL_GEOMETRY_SHADER_INVOCATIONS                                0x887F
+#define GL_GEOMETRY_SHADER_INVOCATIONS_EXT                            0x887F
+#define GL_GEOMETRY_SHADER_INVOCATIONS_OES                            0x887F
+#define GL_GEOMETRY_SHADER_OES                                        0x8DD9
+#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB                     0x82F3
 #define GL_GEOMETRY_SUBROUTINE                                        0x92EB
 #define GL_GEOMETRY_SUBROUTINE_UNIFORM                                0x92F1
 #define GL_GEOMETRY_TEXTURE                                           0x829E
@@ -1652,6 +1759,11 @@ typedef void                   GLvoid;
 #define GL_GLYPH_WIDTH_BIT_NV                                         0x01
 #define GL_GPU_ADDRESS_NV                                             0x8F34
 #define GL_GPU_DISJOINT_EXT                                           0x8FBB
+#define GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX               0x9049
+#define GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX                       0x9047
+#define GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX                         0x904B
+#define GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX                         0x904A
+#define GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX                 0x9048
 #define GL_GPU_OPTIMIZED_QCOM                                         0x8FB2
 #define GL_GREATER                                                    0x0204
 #define GL_GREEN                                                      0x1904
@@ -1664,8 +1776,10 @@ typedef void                   GLvoid;
 #define GL_GREEN_MIN_CLAMP_INGR                                       0x8561
 #define GL_GREEN_NV                                                   0x1904
 #define GL_GREEN_SCALE                                                0x0D18
+#define GL_GUILTY_CONTEXT_RESET                                       0x8253
 #define GL_GUILTY_CONTEXT_RESET_ARB                                   0x8253
 #define GL_GUILTY_CONTEXT_RESET_EXT                                   0x8253
+#define GL_GUILTY_CONTEXT_RESET_KHR                                   0x8253
 #define GL_HALF_APPLE                                                 0x140B
 #define GL_HALF_BIAS_NEGATE_NV                                        0x853B
 #define GL_HALF_BIAS_NORMAL_NV                                        0x853A
@@ -1674,6 +1788,7 @@ typedef void                   GLvoid;
 #define GL_HALF_FLOAT_ARB                                             0x140B
 #define GL_HALF_FLOAT_NV                                              0x140B
 #define GL_HALF_FLOAT_OES                                             0x8D61
+#define GL_HARDLIGHT_KHR                                              0x929B
 #define GL_HARDLIGHT_NV                                               0x929B
 #define GL_HARDMIX_NV                                                 0x92A9
 #define GL_HIGH_FLOAT                                                 0x8DF2
@@ -1703,9 +1818,13 @@ typedef void                   GLvoid;
 #define GL_HI_BIAS_NV                                                 0x8714
 #define GL_HI_SCALE_NV                                                0x870E
 #define GL_HORIZONTAL_LINE_TO_NV                                      0x06
+#define GL_HSL_COLOR_KHR                                              0x92AF
 #define GL_HSL_COLOR_NV                                               0x92AF
+#define GL_HSL_HUE_KHR                                                0x92AD
 #define GL_HSL_HUE_NV                                                 0x92AD
+#define GL_HSL_LUMINOSITY_KHR                                         0x92B0
 #define GL_HSL_LUMINOSITY_NV                                          0x92B0
+#define GL_HSL_SATURATION_KHR                                         0x92AE
 #define GL_HSL_SATURATION_NV                                          0x92AE
 #define GL_IDENTITY_NV                                                0x862A
 #define GL_IGNORE_BORDER_HP                                           0x8150
@@ -1739,6 +1858,7 @@ typedef void                   GLvoid;
 #define GL_IMAGE_BINDING_NAME_EXT                                     0x8F3A
 #define GL_IMAGE_BUFFER                                               0x9051
 #define GL_IMAGE_BUFFER_EXT                                           0x9051
+#define GL_IMAGE_BUFFER_OES                                           0x9051
 #define GL_IMAGE_CLASS_10_10_10_2                                     0x82C3
 #define GL_IMAGE_CLASS_11_11_10                                       0x82C2
 #define GL_IMAGE_CLASS_1_X_16                                         0x82BE
@@ -1755,6 +1875,7 @@ typedef void                   GLvoid;
 #define GL_IMAGE_CUBE_EXT                                             0x9050
 #define GL_IMAGE_CUBE_MAP_ARRAY                                       0x9054
 #define GL_IMAGE_CUBE_MAP_ARRAY_EXT                                   0x9054
+#define GL_IMAGE_CUBE_MAP_ARRAY_OES                                   0x9054
 #define GL_IMAGE_CUBIC_WEIGHT_HP                                      0x815E
 #define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS                        0x90C9
 #define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE                         0x90C8
@@ -1811,8 +1932,10 @@ typedef void                   GLvoid;
 #define GL_INDEX_TEST_REF_EXT                                         0x81B7
 #define GL_INDEX_WRITEMASK                                            0x0C21
 #define GL_INFO_LOG_LENGTH                                            0x8B84
+#define GL_INNOCENT_CONTEXT_RESET                                     0x8254
 #define GL_INNOCENT_CONTEXT_RESET_ARB                                 0x8254
 #define GL_INNOCENT_CONTEXT_RESET_EXT                                 0x8254
+#define GL_INNOCENT_CONTEXT_RESET_KHR                                 0x8254
 #define GL_INSTRUMENT_BUFFER_POINTER_SGIX                             0x8180
 #define GL_INSTRUMENT_MEASUREMENTS_SGIX                               0x8181
 #define GL_INT                                                        0x1404
@@ -1898,10 +2021,12 @@ typedef void                   GLvoid;
 #define GL_INT_IMAGE_3D_EXT                                           0x9059
 #define GL_INT_IMAGE_BUFFER                                           0x905C
 #define GL_INT_IMAGE_BUFFER_EXT                                       0x905C
+#define GL_INT_IMAGE_BUFFER_OES                                       0x905C
 #define GL_INT_IMAGE_CUBE                                             0x905B
 #define GL_INT_IMAGE_CUBE_EXT                                         0x905B
 #define GL_INT_IMAGE_CUBE_MAP_ARRAY                                   0x905F
 #define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT                               0x905F
+#define GL_INT_IMAGE_CUBE_MAP_ARRAY_OES                               0x905F
 #define GL_INT_SAMPLER_1D                                             0x8DC9
 #define GL_INT_SAMPLER_1D_ARRAY                                       0x8DCE
 #define GL_INT_SAMPLER_1D_ARRAY_EXT                                   0x8DCE
@@ -1912,6 +2037,7 @@ typedef void                   GLvoid;
 #define GL_INT_SAMPLER_2D_EXT                                         0x8DCA
 #define GL_INT_SAMPLER_2D_MULTISAMPLE                                 0x9109
 #define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY                           0x910C
+#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES                       0x910C
 #define GL_INT_SAMPLER_2D_RECT                                        0x8DCD
 #define GL_INT_SAMPLER_2D_RECT_EXT                                    0x8DCD
 #define GL_INT_SAMPLER_3D                                             0x8DCB
@@ -1919,10 +2045,13 @@ typedef void                   GLvoid;
 #define GL_INT_SAMPLER_BUFFER                                         0x8DD0
 #define GL_INT_SAMPLER_BUFFER_AMD                                     0x9002
 #define GL_INT_SAMPLER_BUFFER_EXT                                     0x8DD0
+#define GL_INT_SAMPLER_BUFFER_OES                                     0x8DD0
 #define GL_INT_SAMPLER_CUBE                                           0x8DCC
 #define GL_INT_SAMPLER_CUBE_EXT                                       0x8DCC
 #define GL_INT_SAMPLER_CUBE_MAP_ARRAY                                 0x900E
 #define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB                             0x900E
+#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT                             0x900E
+#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES                             0x900E
 #define GL_INT_SAMPLER_RENDERBUFFER_NV                                0x8E57
 #define GL_INT_VEC2                                                   0x8B53
 #define GL_INT_VEC2_ARB                                               0x8B53
@@ -1948,7 +2077,11 @@ typedef void                   GLvoid;
 #define GL_INVERT_RGB_NV                                              0x92A3
 #define GL_IR_INSTRUMENT1_SGIX                                        0x817F
 #define GL_ISOLINES                                                   0x8E7A
+#define GL_ISOLINES_EXT                                               0x8E7A
+#define GL_ISOLINES_OES                                               0x8E7A
 #define GL_IS_PER_PATCH                                               0x92E7
+#define GL_IS_PER_PATCH_EXT                                           0x92E7
+#define GL_IS_PER_PATCH_OES                                           0x92E7
 #define GL_IS_ROW_MAJOR                                               0x9300
 #define GL_ITALIC_BIT_NV                                              0x02
 #define GL_IUI_N3F_V2F_EXT                                            0x81AF
@@ -1960,9 +2093,12 @@ typedef void                   GLvoid;
 #define GL_LARGE_CW_ARC_TO_NV                                         0x18
 #define GL_LAST_VERTEX_CONVENTION                                     0x8E4E
 #define GL_LAST_VERTEX_CONVENTION_EXT                                 0x8E4E
+#define GL_LAST_VERTEX_CONVENTION_OES                                 0x8E4E
 #define GL_LAST_VIDEO_CAPTURE_STATUS_NV                               0x9027
 #define GL_LAYER_NV                                                   0x8DAA
 #define GL_LAYER_PROVOKING_VERTEX                                     0x825E
+#define GL_LAYER_PROVOKING_VERTEX_EXT                                 0x825E
+#define GL_LAYER_PROVOKING_VERTEX_OES                                 0x825E
 #define GL_LAYOUT_DEFAULT_INTEL                                       0
 #define GL_LAYOUT_LINEAR_CPU_CACHED_INTEL                             2
 #define GL_LAYOUT_LINEAR_INTEL                                        1
@@ -1978,6 +2114,7 @@ typedef void                   GLvoid;
 #define GL_LIGHT5                                                     0x4005
 #define GL_LIGHT6                                                     0x4006
 #define GL_LIGHT7                                                     0x4007
+#define GL_LIGHTEN_KHR                                                0x9298
 #define GL_LIGHTEN_NV                                                 0x9298
 #define GL_LIGHTING                                                   0x0B50
 #define GL_LIGHTING_BIT                                               0x00000040
@@ -2008,6 +2145,7 @@ typedef void                   GLvoid;
 #define GL_LINES_ADJACENCY                                            0x000A
 #define GL_LINES_ADJACENCY_ARB                                        0x000A
 #define GL_LINES_ADJACENCY_EXT                                        0x000A
+#define GL_LINES_ADJACENCY_OES                                        0x000A
 #define GL_LINE_BIT                                                   0x00000004
 #define GL_LINE_LOOP                                                  0x0002
 #define GL_LINE_QUALITY_HINT_SGIX                                     0x835B
@@ -2021,6 +2159,7 @@ typedef void                   GLvoid;
 #define GL_LINE_STRIP_ADJACENCY                                       0x000B
 #define GL_LINE_STRIP_ADJACENCY_ARB                                   0x000B
 #define GL_LINE_STRIP_ADJACENCY_EXT                                   0x000B
+#define GL_LINE_STRIP_ADJACENCY_OES                                   0x000B
 #define GL_LINE_TOKEN                                                 0x0702
 #define GL_LINE_TO_NV                                                 0x04
 #define GL_LINE_WIDTH                                                 0x0B21
@@ -2042,8 +2181,10 @@ typedef void                   GLvoid;
 #define GL_LOCATION_INDEX                                             0x930F
 #define GL_LOGIC_OP                                                   0x0BF1
 #define GL_LOGIC_OP_MODE                                              0x0BF0
+#define GL_LOSE_CONTEXT_ON_RESET                                      0x8252
 #define GL_LOSE_CONTEXT_ON_RESET_ARB                                  0x8252
 #define GL_LOSE_CONTEXT_ON_RESET_EXT                                  0x8252
+#define GL_LOSE_CONTEXT_ON_RESET_KHR                                  0x8252
 #define GL_LOWER_LEFT                                                 0x8CA1
 #define GL_LOW_FLOAT                                                  0x8DF0
 #define GL_LOW_INT                                                    0x8DF3
@@ -2278,6 +2419,7 @@ typedef void                   GLvoid;
 #define GL_MAX_CLIPMAP_DEPTH_SGIX                                     0x8177
 #define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX                             0x8178
 #define GL_MAX_CLIP_DISTANCES                                         0x0D32
+#define GL_MAX_CLIP_DISTANCES_APPLE                                   0x0D32
 #define GL_MAX_CLIP_PLANES                                            0x0D32
 #define GL_MAX_CLIP_PLANES_IMG                                        0x0D32
 #define GL_MAX_COLOR_ATTACHMENTS                                      0x8CDF
@@ -2288,17 +2430,24 @@ typedef void                   GLvoid;
 #define GL_MAX_COLOR_TEXTURE_SAMPLES                                  0x910E
 #define GL_MAX_COMBINED_ATOMIC_COUNTERS                               0x92D7
 #define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS                        0x92D1
+#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES                       0x82FA
 #define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS                    0x8266
 #define GL_MAX_COMBINED_DIMENSIONS                                    0x8282
 #define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS                   0x8A33
 #define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS                   0x8A32
+#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT               0x8A32
+#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES               0x8A32
 #define GL_MAX_COMBINED_IMAGE_UNIFORMS                                0x90CF
 #define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS              0x8F39
 #define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT          0x8F39
 #define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES                       0x8F39
 #define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS                         0x90DC
 #define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS               0x8E1E
+#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT           0x8E1E
+#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES           0x8E1E
 #define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS            0x8E1F
+#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT        0x8E1F
+#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES        0x8E1F
 #define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS                           0x8B4D
 #define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB                       0x8B4D
 #define GL_MAX_COMBINED_UNIFORM_BLOCKS                                0x8A2E
@@ -2326,6 +2475,7 @@ typedef void                   GLvoid;
 #define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB                              0x851C
 #define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT                              0x851C
 #define GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES                              0x851C
+#define GL_MAX_CULL_DISTANCES                                         0x82F9
 #define GL_MAX_DEBUG_GROUP_STACK_DEPTH                                0x826C
 #define GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR                            0x826C
 #define GL_MAX_DEBUG_LOGGED_MESSAGES                                  0x9144
@@ -2362,6 +2512,7 @@ typedef void                   GLvoid;
 #define GL_MAX_FRAGMENT_INPUT_COMPONENTS                              0x9125
 #define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET                          0x8E5C
 #define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV                       0x8E5C
+#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES                      0x8E5C
 #define GL_MAX_FRAGMENT_LIGHTS_SGIX                                   0x8404
 #define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV                   0x8868
 #define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS                         0x90DA
@@ -2371,32 +2522,54 @@ typedef void                   GLvoid;
 #define GL_MAX_FRAGMENT_UNIFORM_VECTORS                               0x8DFD
 #define GL_MAX_FRAMEBUFFER_HEIGHT                                     0x9316
 #define GL_MAX_FRAMEBUFFER_LAYERS                                     0x9317
+#define GL_MAX_FRAMEBUFFER_LAYERS_EXT                                 0x9317
+#define GL_MAX_FRAMEBUFFER_LAYERS_OES                                 0x9317
 #define GL_MAX_FRAMEBUFFER_SAMPLES                                    0x9318
 #define GL_MAX_FRAMEBUFFER_WIDTH                                      0x9315
 #define GL_MAX_FRAMEZOOM_FACTOR_SGIX                                  0x818D
 #define GL_MAX_GENERAL_COMBINERS_NV                                   0x854D
 #define GL_MAX_GEOMETRY_ATOMIC_COUNTERS                               0x92D5
+#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT                           0x92D5
+#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES                           0x92D5
 #define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS                        0x92CF
+#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT                    0x92CF
+#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES                    0x92CF
 #define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT                         0x8DE4
 #define GL_MAX_GEOMETRY_IMAGE_UNIFORMS                                0x90CD
+#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT                            0x90CD
+#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES                            0x90CD
 #define GL_MAX_GEOMETRY_INPUT_COMPONENTS                              0x9123
+#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT                          0x9123
+#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES                          0x9123
 #define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS                             0x9124
+#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT                         0x9124
+#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES                         0x9124
 #define GL_MAX_GEOMETRY_OUTPUT_VERTICES                               0x8DE0
 #define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB                           0x8DE0
 #define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT                           0x8DE0
+#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES                           0x8DE0
 #define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV                        0x8E5A
 #define GL_MAX_GEOMETRY_SHADER_INVOCATIONS                            0x8E5A
+#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT                        0x8E5A
+#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES                        0x8E5A
 #define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS                         0x90D7
+#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT                     0x90D7
+#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES                     0x90D7
 #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS                           0x8C29
 #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB                       0x8C29
 #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT                       0x8C29
+#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES                       0x8C29
 #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS                       0x8DE1
 #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB                   0x8DE1
 #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT                   0x8DE1
+#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES                   0x8DE1
 #define GL_MAX_GEOMETRY_UNIFORM_BLOCKS                                0x8A2C
+#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT                            0x8A2C
+#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES                            0x8A2C
 #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS                            0x8DDF
 #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB                        0x8DDF
 #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT                        0x8DDF
+#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES                        0x8DDF
 #define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB                        0x8DDD
 #define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT                        0x8DDD
 #define GL_MAX_HEIGHT                                                 0x827F
@@ -2427,6 +2600,8 @@ typedef void                   GLvoid;
 #define GL_MAX_PALETTE_MATRICES_ARB                                   0x8842
 #define GL_MAX_PALETTE_MATRICES_OES                                   0x8842
 #define GL_MAX_PATCH_VERTICES                                         0x8E7D
+#define GL_MAX_PATCH_VERTICES_EXT                                     0x8E7D
+#define GL_MAX_PATCH_VERTICES_OES                                     0x8E7D
 #define GL_MAX_PIXEL_MAP_TABLE                                        0x0D34
 #define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT                     0x8337
 #define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI                     0x87F1
@@ -2474,6 +2649,7 @@ typedef void                   GLvoid;
 #define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB                           0x880C
 #define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV                     0x8C28
 #define GL_MAX_PROJECTION_STACK_DEPTH                                 0x0D38
+#define GL_MAX_RASTER_SAMPLES_EXT                                     0x9329
 #define GL_MAX_RATIONAL_EVAL_ORDER_NV                                 0x86D7
 #define GL_MAX_RECTANGLE_TEXTURE_SIZE                                 0x84F8
 #define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB                             0x84F8
@@ -2492,6 +2668,8 @@ typedef void                   GLvoid;
 #define GL_MAX_SERVER_WAIT_TIMEOUT                                    0x9111
 #define GL_MAX_SERVER_WAIT_TIMEOUT_APPLE                              0x9111
 #define GL_MAX_SHADER_BUFFER_ADDRESS_NV                               0x8F35
+#define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT               0x8F63
+#define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT                    0x8F67
 #define GL_MAX_SHADER_STORAGE_BLOCK_SIZE                              0x90DE
 #define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS                         0x90DD
 #define GL_MAX_SHININESS_NV                                           0x8504
@@ -2502,32 +2680,76 @@ typedef void                   GLvoid;
 #define GL_MAX_SPARSE_TEXTURE_SIZE_AMD                                0x9198
 #define GL_MAX_SPARSE_TEXTURE_SIZE_ARB                                0x9198
 #define GL_MAX_SPOT_EXPONENT_NV                                       0x8505
+#define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV                        0x9349
 #define GL_MAX_SUBROUTINES                                            0x8DE7
 #define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS                           0x8DE8
 #define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS                           0x92D3
+#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT                       0x92D3
+#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES                       0x92D3
 #define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS                    0x92CD
+#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT                0x92CD
+#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES                0x92CD
 #define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS                            0x90CB
+#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT                        0x90CB
+#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES                        0x90CB
 #define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS                          0x886C
+#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT                      0x886C
+#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES                      0x886C
 #define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS                         0x8E83
+#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT                     0x8E83
+#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES                     0x8E83
 #define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS                     0x90D8
+#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT                 0x90D8
+#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES                 0x90D8
 #define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS                       0x8E81
+#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT                   0x8E81
+#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES                   0x8E81
 #define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS                   0x8E85
+#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT               0x8E85
+#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES               0x8E85
 #define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS                            0x8E89
+#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT                        0x8E89
+#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES                        0x8E89
 #define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS                        0x8E7F
+#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT                    0x8E7F
+#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES                    0x8E7F
 #define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS                        0x92D4
+#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT                    0x92D4
+#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES                    0x92D4
 #define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS                 0x92CE
+#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT             0x92CE
+#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES             0x92CE
 #define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS                         0x90CC
+#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT                     0x90CC
+#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES                     0x90CC
 #define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS                       0x886D
+#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT                   0x886D
+#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES                   0x886D
 #define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS                      0x8E86
+#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT                  0x8E86
+#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES                  0x8E86
 #define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS                  0x90D9
+#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT              0x90D9
+#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES              0x90D9
 #define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS                    0x8E82
+#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT                0x8E82
+#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES                0x8E82
 #define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS                         0x8E8A
+#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT                     0x8E8A
+#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES                     0x8E8A
 #define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS                     0x8E80
+#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT                 0x8E80
+#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES                 0x8E80
 #define GL_MAX_TESS_GEN_LEVEL                                         0x8E7E
+#define GL_MAX_TESS_GEN_LEVEL_EXT                                     0x8E7E
+#define GL_MAX_TESS_GEN_LEVEL_OES                                     0x8E7E
 #define GL_MAX_TESS_PATCH_COMPONENTS                                  0x8E84
+#define GL_MAX_TESS_PATCH_COMPONENTS_EXT                              0x8E84
+#define GL_MAX_TESS_PATCH_COMPONENTS_OES                              0x8E84
 #define GL_MAX_TEXTURE_BUFFER_SIZE                                    0x8C2B
 #define GL_MAX_TEXTURE_BUFFER_SIZE_ARB                                0x8C2B
 #define GL_MAX_TEXTURE_BUFFER_SIZE_EXT                                0x8C2B
+#define GL_MAX_TEXTURE_BUFFER_SIZE_OES                                0x8C2B
 #define GL_MAX_TEXTURE_COORDS                                         0x8871
 #define GL_MAX_TEXTURE_COORDS_ARB                                     0x8871
 #define GL_MAX_TEXTURE_COORDS_NV                                      0x8871
@@ -2592,6 +2814,7 @@ typedef void                   GLvoid;
 #define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB                          0x8DDE
 #define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT                          0x8DDE
 #define GL_MAX_VIEWPORTS                                              0x825B
+#define GL_MAX_VIEWPORTS_NV                                           0x825B
 #define GL_MAX_VIEWPORT_DIMS                                          0x0D3A
 #define GL_MAX_WIDTH                                                  0x827E
 #define GL_MEDIUM_FLOAT                                               0x8DF1
@@ -2609,6 +2832,7 @@ typedef void                   GLvoid;
 #define GL_MIN_EXT                                                    0x8007
 #define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET                          0x8E5B
 #define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV                       0x8E5B
+#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES                      0x8E5B
 #define GL_MIN_LOD_WARNING_AMD                                        0x919C
 #define GL_MIN_MAP_BUFFER_ALIGNMENT                                   0x90BC
 #define GL_MIN_PROGRAM_TEXEL_OFFSET                                   0x8904
@@ -2619,8 +2843,8 @@ typedef void                   GLvoid;
 #define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV                       0x8E5E
 #define GL_MIN_SAMPLE_SHADING_VALUE                                   0x8C37
 #define GL_MIN_SAMPLE_SHADING_VALUE_ARB                               0x8C37
+#define GL_MIN_SAMPLE_SHADING_VALUE_OES                               0x8C37
 #define GL_MIN_SPARSE_LEVEL_AMD                                       0x919B
-#define GL_MIN_SPARSE_LEVEL_ARB                                       0x919B
 #define GL_MIPMAP                                                     0x8293
 #define GL_MIRRORED_REPEAT                                            0x8370
 #define GL_MIRRORED_REPEAT_ARB                                        0x8370
@@ -2634,6 +2858,8 @@ typedef void                   GLvoid;
 #define GL_MIRROR_CLAMP_TO_EDGE_EXT                                   0x8743
 #define GL_MITER_REVERT_NV                                            0x90A7
 #define GL_MITER_TRUNCATE_NV                                          0x90A8
+#define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV                           0x932F
+#define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV                         0x9330
 #define GL_MODELVIEW                                                  0x1700
 #define GL_MODELVIEW0_ARB                                             0x1700
 #define GL_MODELVIEW0_EXT                                             0x1700
@@ -2687,8 +2913,10 @@ typedef void                   GLvoid;
 #define GL_MOVE_TO_RESETS_NV                                          0x90B5
 #define GL_MOV_ATI                                                    0x8961
 #define GL_MULT                                                       0x0103
+#define GL_MULTIPLY_KHR                                               0x9294
 #define GL_MULTIPLY_NV                                                0x9294
 #define GL_MULTISAMPLE                                                0x809D
+#define GL_MULTISAMPLES_NV                                            0x9371
 #define GL_MULTISAMPLE_3DFX                                           0x86B2
 #define GL_MULTISAMPLE_ARB                                            0x809D
 #define GL_MULTISAMPLE_BIT                                            0x20000000
@@ -2706,6 +2934,7 @@ typedef void                   GLvoid;
 #define GL_MULTISAMPLE_COVERAGE_MODES_NV                              0x8E12
 #define GL_MULTISAMPLE_EXT                                            0x809D
 #define GL_MULTISAMPLE_FILTER_HINT_NV                                 0x8534
+#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT                      0x932B
 #define GL_MULTISAMPLE_SGIS                                           0x809D
 #define GL_MULTIVIEW_EXT                                              0x90F1
 #define GL_MUL_ATI                                                    0x8964
@@ -2726,6 +2955,7 @@ typedef void                   GLvoid;
 #define GL_NEAREST_MIPMAP_NEAREST                                     0x2700
 #define GL_NEGATE_BIT_ATI                                             0x00000004
 #define GL_NEGATIVE_ONE_EXT                                           0x87DF
+#define GL_NEGATIVE_ONE_TO_ONE                                        0x935E
 #define GL_NEGATIVE_W_EXT                                             0x87DC
 #define GL_NEGATIVE_X_EXT                                             0x87D9
 #define GL_NEGATIVE_Y_EXT                                             0x87DA
@@ -2764,8 +2994,10 @@ typedef void                   GLvoid;
 #define GL_NORMAL_MAP_OES                                             0x8511
 #define GL_NOTEQUAL                                                   0x0205
 #define GL_NO_ERROR                                                   0
+#define GL_NO_RESET_NOTIFICATION                                      0x8261
 #define GL_NO_RESET_NOTIFICATION_ARB                                  0x8261
 #define GL_NO_RESET_NOTIFICATION_EXT                                  0x8261
+#define GL_NO_RESET_NOTIFICATION_KHR                                  0x8261
 #define GL_NUM_ACTIVE_VARIABLES                                       0x9304
 #define GL_NUM_COMPATIBLE_SUBROUTINES                                 0x8E4A
 #define GL_NUM_COMPRESSED_TEXTURE_FORMATS                             0x86A2
@@ -2785,6 +3017,7 @@ typedef void                   GLvoid;
 #define GL_NUM_SAMPLE_COUNTS                                          0x9380
 #define GL_NUM_SHADER_BINARY_FORMATS                                  0x8DF9
 #define GL_NUM_SHADING_LANGUAGE_VERSIONS                              0x82E9
+#define GL_NUM_SPARSE_LEVELS_ARB                                      0x91AA
 #define GL_NUM_VIDEO_CAPTURE_STREAMS_NV                               0x9024
 #define GL_NUM_VIRTUAL_PAGE_SIZES_ARB                                 0x91A8
 #define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB                               0x8B89
@@ -2800,6 +3033,7 @@ typedef void                   GLvoid;
 #define GL_OBJECT_DISTANCE_TO_POINT_SGIS                              0x81F1
 #define GL_OBJECT_INFO_LOG_LENGTH_ARB                                 0x8B84
 #define GL_OBJECT_LINEAR                                              0x2401
+#define GL_OBJECT_LINEAR_NV                                           0x2401
 #define GL_OBJECT_LINE_SGIS                                           0x81F7
 #define GL_OBJECT_LINK_STATUS_ARB                                     0x8B82
 #define GL_OBJECT_PLANE                                               0x2501
@@ -2810,6 +3044,7 @@ typedef void                   GLvoid;
 #define GL_OBJECT_TYPE_APPLE                                          0x9112
 #define GL_OBJECT_TYPE_ARB                                            0x8B4E
 #define GL_OBJECT_VALIDATE_STATUS_ARB                                 0x8B83
+#define GL_OCCLUSION_QUERY_EVENT_MASK_AMD                             0x874F
 #define GL_OCCLUSION_TEST_HP                                          0x8165
 #define GL_OCCLUSION_TEST_RESULT_HP                                   0x8166
 #define GL_OFFSET                                                     0x92FC
@@ -2927,6 +3162,7 @@ typedef void                   GLvoid;
 #define GL_OUTPUT_TEXTURE_COORD9_EXT                                  0x87A6
 #define GL_OUTPUT_VERTEX_EXT                                          0x879A
 #define GL_OUT_OF_MEMORY                                              0x0505
+#define GL_OVERLAY_KHR                                                0x9296
 #define GL_OVERLAY_NV                                                 0x9296
 #define GL_PACK_ALIGNMENT                                             0x0D05
 #define GL_PACK_CMYK_HINT_EXT                                         0x800E
@@ -2970,9 +3206,15 @@ typedef void                   GLvoid;
 #define GL_PASS_THROUGH_NV                                            0x86E6
 #define GL_PASS_THROUGH_TOKEN                                         0x0700
 #define GL_PATCHES                                                    0x000E
+#define GL_PATCHES_EXT                                                0x000E
+#define GL_PATCHES_OES                                                0x000E
 #define GL_PATCH_DEFAULT_INNER_LEVEL                                  0x8E73
+#define GL_PATCH_DEFAULT_INNER_LEVEL_EXT                              0x8E73
 #define GL_PATCH_DEFAULT_OUTER_LEVEL                                  0x8E74
+#define GL_PATCH_DEFAULT_OUTER_LEVEL_EXT                              0x8E74
 #define GL_PATCH_VERTICES                                             0x8E72
+#define GL_PATCH_VERTICES_EXT                                         0x8E72
+#define GL_PATCH_VERTICES_OES                                         0x8E72
 #define GL_PATH_CLIENT_LENGTH_NV                                      0x907F
 #define GL_PATH_COMMAND_COUNT_NV                                      0x909D
 #define GL_PATH_COMPUTED_LENGTH_NV                                    0x90A0
@@ -2998,8 +3240,16 @@ typedef void                   GLvoid;
 #define GL_PATH_INITIAL_DASH_CAP_NV                                   0x907C
 #define GL_PATH_INITIAL_END_CAP_NV                                    0x9077
 #define GL_PATH_JOIN_STYLE_NV                                         0x9079
+#define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV                          0x0D36
+#define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV                         0x0D38
 #define GL_PATH_MITER_LIMIT_NV                                        0x907A
+#define GL_PATH_MODELVIEW_MATRIX_NV                                   0x0BA6
+#define GL_PATH_MODELVIEW_NV                                          0x1700
+#define GL_PATH_MODELVIEW_STACK_DEPTH_NV                              0x0BA3
 #define GL_PATH_OBJECT_BOUNDING_BOX_NV                                0x908A
+#define GL_PATH_PROJECTION_MATRIX_NV                                  0x0BA7
+#define GL_PATH_PROJECTION_NV                                         0x1701
+#define GL_PATH_PROJECTION_STACK_DEPTH_NV                             0x0BA4
 #define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV                        0x90BD
 #define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV                         0x90BE
 #define GL_PATH_STENCIL_FUNC_NV                                       0x90B7
@@ -3011,12 +3261,34 @@ typedef void                   GLvoid;
 #define GL_PATH_STROKE_WIDTH_NV                                       0x9075
 #define GL_PATH_TERMINAL_DASH_CAP_NV                                  0x907D
 #define GL_PATH_TERMINAL_END_CAP_NV                                   0x9078
+#define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV                         0x84E3
+#define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV                        0x84E4
 #define GL_PERCENTAGE_AMD                                             0x8BC3
 #define GL_PERFMON_GLOBAL_MODE_QCOM                                   0x8FA0
 #define GL_PERFMON_RESULT_AMD                                         0x8BC6
 #define GL_PERFMON_RESULT_AVAILABLE_AMD                               0x8BC4
 #define GL_PERFMON_RESULT_SIZE_AMD                                    0x8BC5
 #define GL_PERFORMANCE_MONITOR_AMD                                    0x9152
+#define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL                        0x94FC
+#define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL                        0x94FB
+#define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL                         0x94FA
+#define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL                        0x94F8
+#define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL                        0x94F9
+#define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL                    0x94FF
+#define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL                      0x94F1
+#define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL                       0x94F2
+#define GL_PERFQUERY_COUNTER_EVENT_INTEL                              0x94F0
+#define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL                    0x94FE
+#define GL_PERFQUERY_COUNTER_RAW_INTEL                                0x94F4
+#define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL                         0x94F3
+#define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL                          0x94F5
+#define GL_PERFQUERY_DONOT_FLUSH_INTEL                                0x83F9
+#define GL_PERFQUERY_FLUSH_INTEL                                      0x83FA
+#define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL                             0x00000001
+#define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL                      0x9500
+#define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL                      0x94FD
+#define GL_PERFQUERY_SINGLE_CONTEXT_INTEL                             0x00000000
+#define GL_PERFQUERY_WAIT_INTEL                                       0x83FB
 #define GL_PERSPECTIVE_CORRECTION_HINT                                0x0C50
 #define GL_PERTURB_EXT                                                0x85AE
 #define GL_PER_STAGE_CONSTANTS_NV                                     0x8535
@@ -3141,6 +3413,7 @@ typedef void                   GLvoid;
 #define GL_POLYGON_BIT                                                0x00000008
 #define GL_POLYGON_MODE                                               0x0B40
 #define GL_POLYGON_OFFSET_BIAS_EXT                                    0x8039
+#define GL_POLYGON_OFFSET_CLAMP_EXT                                   0x8E1B
 #define GL_POLYGON_OFFSET_EXT                                         0x8037
 #define GL_POLYGON_OFFSET_FACTOR                                      0x8038
 #define GL_POLYGON_OFFSET_FACTOR_EXT                                  0x8038
@@ -3210,14 +3483,21 @@ typedef void                   GLvoid;
 #define GL_PRIMITIVES_GENERATED                                       0x8C87
 #define GL_PRIMITIVES_GENERATED_EXT                                   0x8C87
 #define GL_PRIMITIVES_GENERATED_NV                                    0x8C87
+#define GL_PRIMITIVES_GENERATED_OES                                   0x8C87
+#define GL_PRIMITIVES_SUBMITTED_ARB                                   0x82EF
+#define GL_PRIMITIVE_BOUNDING_BOX_EXT                                 0x92BE
+#define GL_PRIMITIVE_BOUNDING_BOX_OES                                 0x92BE
 #define GL_PRIMITIVE_ID_NV                                            0x8C7C
 #define GL_PRIMITIVE_RESTART                                          0x8F9D
 #define GL_PRIMITIVE_RESTART_FIXED_INDEX                              0x8D69
 #define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED                    0x8221
+#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES                0x8221
 #define GL_PRIMITIVE_RESTART_INDEX                                    0x8F9E
 #define GL_PRIMITIVE_RESTART_INDEX_NV                                 0x8559
 #define GL_PRIMITIVE_RESTART_NV                                       0x8558
 #define GL_PROGRAM                                                    0x82E2
+#define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV                            0x9341
+#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV                 0x9340
 #define GL_PROGRAM_ADDRESS_REGISTERS_ARB                              0x88B0
 #define GL_PROGRAM_ALU_INSTRUCTIONS_ARB                               0x8805
 #define GL_PROGRAM_ATTRIBS_ARB                                        0x88AC
@@ -3317,8 +3597,10 @@ typedef void                   GLvoid;
 #define GL_QUADRATIC_ATTENUATION                                      0x1209
 #define GL_QUADRATIC_CURVE_TO_NV                                      0x0A
 #define GL_QUADS                                                      0x0007
+#define GL_QUADS_EXT                                                  0x0007
 #define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION                   0x8E4C
 #define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT               0x8E4C
+#define GL_QUADS_OES                                                  0x0007
 #define GL_QUAD_ALPHA4_SGIS                                           0x811E
 #define GL_QUAD_ALPHA8_SGIS                                           0x811F
 #define GL_QUAD_INTENSITY4_SGIS                                       0x8122
@@ -3330,20 +3612,27 @@ typedef void                   GLvoid;
 #define GL_QUAD_TEXTURE_SELECT_SGIS                                   0x8125
 #define GL_QUARTER_BIT_ATI                                            0x00000010
 #define GL_QUERY                                                      0x82E3
+#define GL_QUERY_ALL_EVENT_BITS_AMD                                   0xFFFFFFFF
 #define GL_QUERY_BUFFER                                               0x9192
 #define GL_QUERY_BUFFER_AMD                                           0x9192
 #define GL_QUERY_BUFFER_BARRIER_BIT                                   0x00008000
 #define GL_QUERY_BUFFER_BINDING                                       0x9193
 #define GL_QUERY_BUFFER_BINDING_AMD                                   0x9193
 #define GL_QUERY_BY_REGION_NO_WAIT                                    0x8E16
+#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED                           0x8E1A
 #define GL_QUERY_BY_REGION_NO_WAIT_NV                                 0x8E16
 #define GL_QUERY_BY_REGION_WAIT                                       0x8E15
+#define GL_QUERY_BY_REGION_WAIT_INVERTED                              0x8E19
 #define GL_QUERY_BY_REGION_WAIT_NV                                    0x8E15
 #define GL_QUERY_COUNTER_BITS                                         0x8864
 #define GL_QUERY_COUNTER_BITS_ARB                                     0x8864
 #define GL_QUERY_COUNTER_BITS_EXT                                     0x8864
+#define GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD                      0x00000008
+#define GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD                             0x00000002
+#define GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD                             0x00000001
 #define GL_QUERY_KHR                                                  0x82E3
 #define GL_QUERY_NO_WAIT                                              0x8E14
+#define GL_QUERY_NO_WAIT_INVERTED                                     0x8E18
 #define GL_QUERY_NO_WAIT_NV                                           0x8E14
 #define GL_QUERY_OBJECT_AMD                                           0x9153
 #define GL_QUERY_OBJECT_EXT                                           0x9153
@@ -3355,17 +3644,23 @@ typedef void                   GLvoid;
 #define GL_QUERY_RESULT_EXT                                           0x8866
 #define GL_QUERY_RESULT_NO_WAIT                                       0x9194
 #define GL_QUERY_RESULT_NO_WAIT_AMD                                   0x9194
+#define GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD                           0x00000004
+#define GL_QUERY_TARGET                                               0x82EA
 #define GL_QUERY_WAIT                                                 0x8E13
+#define GL_QUERY_WAIT_INVERTED                                        0x8E17
 #define GL_QUERY_WAIT_NV                                              0x8E13
 #define GL_R                                                          0x2002
 #define GL_R11F_G11F_B10F                                             0x8C3A
+#define GL_R11F_G11F_B10F_APPLE                                       0x8C3A
 #define GL_R11F_G11F_B10F_EXT                                         0x8C3A
 #define GL_R16                                                        0x822A
 #define GL_R16F                                                       0x822D
 #define GL_R16F_EXT                                                   0x822D
 #define GL_R16I                                                       0x8233
 #define GL_R16UI                                                      0x8234
+#define GL_R16_EXT                                                    0x822A
 #define GL_R16_SNORM                                                  0x8F98
+#define GL_R16_SNORM_EXT                                              0x8F98
 #define GL_R1UI_C3F_V3F_SUN                                           0x85C6
 #define GL_R1UI_C4F_N3F_V3F_SUN                                       0x85C8
 #define GL_R1UI_C4UB_V3F_SUN                                          0x85C5
@@ -3387,7 +3682,10 @@ typedef void                   GLvoid;
 #define GL_RASTERIZER_DISCARD                                         0x8C89
 #define GL_RASTERIZER_DISCARD_EXT                                     0x8C89
 #define GL_RASTERIZER_DISCARD_NV                                      0x8C89
+#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT                          0x932A
+#define GL_RASTER_MULTISAMPLE_EXT                                     0x9327
 #define GL_RASTER_POSITION_UNCLIPPED_IBM                              0x19262
+#define GL_RASTER_SAMPLES_EXT                                         0x9328
 #define GL_READ_BUFFER                                                0x0C02
 #define GL_READ_BUFFER_EXT                                            0x0C02
 #define GL_READ_BUFFER_NV                                             0x0C02
@@ -3431,8 +3729,14 @@ typedef void                   GLvoid;
 #define GL_REFERENCED_BY_COMPUTE_SHADER                               0x930B
 #define GL_REFERENCED_BY_FRAGMENT_SHADER                              0x930A
 #define GL_REFERENCED_BY_GEOMETRY_SHADER                              0x9309
+#define GL_REFERENCED_BY_GEOMETRY_SHADER_EXT                          0x9309
+#define GL_REFERENCED_BY_GEOMETRY_SHADER_OES                          0x9309
 #define GL_REFERENCED_BY_TESS_CONTROL_SHADER                          0x9307
+#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT                      0x9307
+#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES                      0x9307
 #define GL_REFERENCED_BY_TESS_EVALUATION_SHADER                       0x9308
+#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT                   0x9308
+#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES                   0x9308
 #define GL_REFERENCED_BY_VERTEX_SHADER                                0x9306
 #define GL_REFERENCE_PLANE_EQUATION_SGIX                              0x817E
 #define GL_REFERENCE_PLANE_SGIX                                       0x817D
@@ -3475,6 +3779,7 @@ typedef void                   GLvoid;
 #define GL_REG_8_ATI                                                  0x8929
 #define GL_REG_9_ATI                                                  0x892A
 #define GL_RELATIVE_ARC_TO_NV                                         0xFF
+#define GL_RELATIVE_CONIC_CURVE_TO_NV                                 0x1B
 #define GL_RELATIVE_CUBIC_CURVE_TO_NV                                 0x0D
 #define GL_RELATIVE_HORIZONTAL_LINE_TO_NV                             0x07
 #define GL_RELATIVE_LARGE_CCW_ARC_TO_NV                               0x17
@@ -3482,6 +3787,11 @@ typedef void                   GLvoid;
 #define GL_RELATIVE_LINE_TO_NV                                        0x05
 #define GL_RELATIVE_MOVE_TO_NV                                        0x03
 #define GL_RELATIVE_QUADRATIC_CURVE_TO_NV                             0x0B
+#define GL_RELATIVE_RECT_NV                                           0xF7
+#define GL_RELATIVE_ROUNDED_RECT2_NV                                  0xEB
+#define GL_RELATIVE_ROUNDED_RECT4_NV                                  0xED
+#define GL_RELATIVE_ROUNDED_RECT8_NV                                  0xEF
+#define GL_RELATIVE_ROUNDED_RECT_NV                                   0xE9
 #define GL_RELATIVE_SMALL_CCW_ARC_TO_NV                               0x13
 #define GL_RELATIVE_SMALL_CW_ARC_TO_NV                                0x15
 #define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV                          0x11
@@ -3558,8 +3868,10 @@ typedef void                   GLvoid;
 #define GL_RESAMPLE_ZERO_FILL_SGIX                                    0x842F
 #define GL_RESCALE_NORMAL                                             0x803A
 #define GL_RESCALE_NORMAL_EXT                                         0x803A
+#define GL_RESET_NOTIFICATION_STRATEGY                                0x8256
 #define GL_RESET_NOTIFICATION_STRATEGY_ARB                            0x8256
 #define GL_RESET_NOTIFICATION_STRATEGY_EXT                            0x8256
+#define GL_RESET_NOTIFICATION_STRATEGY_KHR                            0x8256
 #define GL_RESTART_PATH_NV                                            0xF0
 #define GL_RESTART_SUN                                                0x0001
 #define GL_RETAINED_APPLE                                             0x8A1B
@@ -3570,7 +3882,9 @@ typedef void                   GLvoid;
 #define GL_RG16F_EXT                                                  0x822F
 #define GL_RG16I                                                      0x8239
 #define GL_RG16UI                                                     0x823A
+#define GL_RG16_EXT                                                   0x822C
 #define GL_RG16_SNORM                                                 0x8F99
+#define GL_RG16_SNORM_EXT                                             0x8F99
 #define GL_RG32F                                                      0x8230
 #define GL_RG32F_EXT                                                  0x8230
 #define GL_RG32I                                                      0x823B
@@ -3598,6 +3912,7 @@ typedef void                   GLvoid;
 #define GL_RGB16UI_EXT                                                0x8D77
 #define GL_RGB16_EXT                                                  0x8054
 #define GL_RGB16_SNORM                                                0x8F9A
+#define GL_RGB16_SNORM_EXT                                            0x8F9A
 #define GL_RGB2_EXT                                                   0x804E
 #define GL_RGB32F                                                     0x8815
 #define GL_RGB32F_ARB                                                 0x8815
@@ -3625,6 +3940,7 @@ typedef void                   GLvoid;
 #define GL_RGB8_OES                                                   0x8051
 #define GL_RGB8_SNORM                                                 0x8F96
 #define GL_RGB9_E5                                                    0x8C3D
+#define GL_RGB9_E5_APPLE                                              0x8C3D
 #define GL_RGB9_E5_EXT                                                0x8C3D
 #define GL_RGBA                                                       0x1908
 #define GL_RGBA12                                                     0x805A
@@ -3639,6 +3955,7 @@ typedef void                   GLvoid;
 #define GL_RGBA16UI_EXT                                               0x8D76
 #define GL_RGBA16_EXT                                                 0x805B
 #define GL_RGBA16_SNORM                                               0x8F9B
+#define GL_RGBA16_SNORM_EXT                                           0x8F9B
 #define GL_RGBA2                                                      0x8055
 #define GL_RGBA2_EXT                                                  0x8055
 #define GL_RGBA32F                                                    0x8814
@@ -3693,6 +4010,10 @@ typedef void                   GLvoid;
 #define GL_RG_INTEGER                                                 0x8228
 #define GL_RG_SNORM                                                   0x8F91
 #define GL_RIGHT                                                      0x0407
+#define GL_ROUNDED_RECT2_NV                                           0xEA
+#define GL_ROUNDED_RECT4_NV                                           0xEC
+#define GL_ROUNDED_RECT8_NV                                           0xEE
+#define GL_ROUNDED_RECT_NV                                            0xE8
 #define GL_ROUND_NV                                                   0x90A4
 #define GL_S                                                          0x2000
 #define GL_SAMPLER                                                    0x82E6
@@ -3713,6 +4034,7 @@ typedef void                   GLvoid;
 #define GL_SAMPLER_2D_ARRAY_SHADOW_NV                                 0x8DC4
 #define GL_SAMPLER_2D_MULTISAMPLE                                     0x9108
 #define GL_SAMPLER_2D_MULTISAMPLE_ARRAY                               0x910B
+#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES                           0x910B
 #define GL_SAMPLER_2D_RECT                                            0x8B63
 #define GL_SAMPLER_2D_RECT_ARB                                        0x8B63
 #define GL_SAMPLER_2D_RECT_SHADOW                                     0x8B64
@@ -3727,12 +4049,17 @@ typedef void                   GLvoid;
 #define GL_SAMPLER_BUFFER                                             0x8DC2
 #define GL_SAMPLER_BUFFER_AMD                                         0x9001
 #define GL_SAMPLER_BUFFER_EXT                                         0x8DC2
+#define GL_SAMPLER_BUFFER_OES                                         0x8DC2
 #define GL_SAMPLER_CUBE                                               0x8B60
 #define GL_SAMPLER_CUBE_ARB                                           0x8B60
 #define GL_SAMPLER_CUBE_MAP_ARRAY                                     0x900C
 #define GL_SAMPLER_CUBE_MAP_ARRAY_ARB                                 0x900C
+#define GL_SAMPLER_CUBE_MAP_ARRAY_EXT                                 0x900C
+#define GL_SAMPLER_CUBE_MAP_ARRAY_OES                                 0x900C
 #define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW                              0x900D
 #define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB                          0x900D
+#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT                          0x900D
+#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES                          0x900D
 #define GL_SAMPLER_CUBE_SHADOW                                        0x8DC5
 #define GL_SAMPLER_CUBE_SHADOW_EXT                                    0x8DC5
 #define GL_SAMPLER_CUBE_SHADOW_NV                                     0x8DC5
@@ -3766,6 +4093,10 @@ typedef void                   GLvoid;
 #define GL_SAMPLE_COVERAGE_INVERT_ARB                                 0x80AB
 #define GL_SAMPLE_COVERAGE_VALUE                                      0x80AA
 #define GL_SAMPLE_COVERAGE_VALUE_ARB                                  0x80AA
+#define GL_SAMPLE_LOCATION_NV                                         0x8E50
+#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV                       0x933F
+#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV                        0x933E
+#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV                           0x933D
 #define GL_SAMPLE_MASK                                                0x8E51
 #define GL_SAMPLE_MASK_EXT                                            0x80A0
 #define GL_SAMPLE_MASK_INVERT_EXT                                     0x80AB
@@ -3782,6 +4113,7 @@ typedef void                   GLvoid;
 #define GL_SAMPLE_POSITION_NV                                         0x8E50
 #define GL_SAMPLE_SHADING                                             0x8C36
 #define GL_SAMPLE_SHADING_ARB                                         0x8C36
+#define GL_SAMPLE_SHADING_OES                                         0x8C36
 #define GL_SATURATE_BIT_ATI                                           0x00000040
 #define GL_SCALAR_EXT                                                 0x87BE
 #define GL_SCALEBIAS_HINT_SGIX                                        0x8322
@@ -3794,6 +4126,7 @@ typedef void                   GLvoid;
 #define GL_SCISSOR_BOX                                                0x0C10
 #define GL_SCISSOR_TEST                                               0x0C11
 #define GL_SCREEN_COORDINATES_REND                                    0x8490
+#define GL_SCREEN_KHR                                                 0x9295
 #define GL_SCREEN_NV                                                  0x9295
 #define GL_SECONDARY_COLOR_ARRAY                                      0x845E
 #define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV                           0x8F27
@@ -3844,6 +4177,7 @@ typedef void                   GLvoid;
 #define GL_SHADER_OBJECT_ARB                                          0x8B48
 #define GL_SHADER_OBJECT_EXT                                          0x8B48
 #define GL_SHADER_OPERATION_NV                                        0x86DF
+#define GL_SHADER_PIXEL_LOCAL_STORAGE_EXT                             0x8F64
 #define GL_SHADER_SOURCE_LENGTH                                       0x8B88
 #define GL_SHADER_STORAGE_BARRIER_BIT                                 0x00002000
 #define GL_SHADER_STORAGE_BLOCK                                       0x92E6
@@ -3858,6 +4192,7 @@ typedef void                   GLvoid;
 #define GL_SHADING_LANGUAGE_VERSION_ARB                               0x8B8C
 #define GL_SHADOW_AMBIENT_SGIX                                        0x80BF
 #define GL_SHADOW_ATTENUATION_EXT                                     0x834E
+#define GL_SHARED_EDGE_NV                                             0xC0
 #define GL_SHARED_TEXTURE_PALETTE_EXT                                 0x81FB
 #define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS                           0x80B0
 #define GL_SHININESS                                                  0x1601
@@ -3914,6 +4249,8 @@ typedef void                   GLvoid;
 #define GL_SLUMINANCE_NV                                              0x8C46
 #define GL_SMALL_CCW_ARC_TO_NV                                        0x12
 #define GL_SMALL_CW_ARC_TO_NV                                         0x14
+#define GL_SMAPHS30_PROGRAM_BINARY_DMP                                0x9251
+#define GL_SMAPHS_PROGRAM_BINARY_DMP                                  0x9252
 #define GL_SMOOTH                                                     0x1D01
 #define GL_SMOOTH_CUBIC_CURVE_TO_NV                                   0x10
 #define GL_SMOOTH_LINE_WIDTH_GRANULARITY                              0x0B23
@@ -3921,6 +4258,8 @@ typedef void                   GLvoid;
 #define GL_SMOOTH_POINT_SIZE_GRANULARITY                              0x0B13
 #define GL_SMOOTH_POINT_SIZE_RANGE                                    0x0B12
 #define GL_SMOOTH_QUADRATIC_CURVE_TO_NV                               0x0E
+#define GL_SM_COUNT_NV                                                0x933B
+#define GL_SOFTLIGHT_KHR                                              0x929C
 #define GL_SOFTLIGHT_NV                                               0x929C
 #define GL_SOURCE0_ALPHA                                              0x8588
 #define GL_SOURCE0_ALPHA_ARB                                          0x8588
@@ -3945,6 +4284,8 @@ typedef void                   GLvoid;
 #define GL_SPARE0_NV                                                  0x852E
 #define GL_SPARE0_PLUS_SECONDARY_COLOR_NV                             0x8532
 #define GL_SPARE1_NV                                                  0x852F
+#define GL_SPARSE_BUFFER_PAGE_SIZE_ARB                                0x82F8
+#define GL_SPARSE_STORAGE_BIT_ARB                                     0x0400
 #define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB                 0x91A9
 #define GL_SPECULAR                                                   0x1202
 #define GL_SPHERE_MAP                                                 0x2402
@@ -3990,6 +4331,7 @@ typedef void                   GLvoid;
 #define GL_STACK_OVERFLOW_KHR                                         0x0503
 #define GL_STACK_UNDERFLOW                                            0x0504
 #define GL_STACK_UNDERFLOW_KHR                                        0x0504
+#define GL_STANDARD_FONT_FORMAT_NV                                    0x936C
 #define GL_STANDARD_FONT_NAME_NV                                      0x9072
 #define GL_STATE_RESTORE                                              0x8BDC
 #define GL_STATIC_ATI                                                 0x8760
@@ -4044,11 +4386,13 @@ typedef void                   GLvoid;
 #define GL_STENCIL_INDEX8                                             0x8D48
 #define GL_STENCIL_INDEX8_EXT                                         0x8D48
 #define GL_STENCIL_INDEX8_OES                                         0x8D48
+#define GL_STENCIL_INDEX_OES                                          0x1901
 #define GL_STENCIL_OP_VALUE_AMD                                       0x874C
 #define GL_STENCIL_PASS_DEPTH_FAIL                                    0x0B95
 #define GL_STENCIL_PASS_DEPTH_PASS                                    0x0B96
 #define GL_STENCIL_REF                                                0x0B97
 #define GL_STENCIL_RENDERABLE                                         0x8288
+#define GL_STENCIL_SAMPLES_NV                                         0x932E
 #define GL_STENCIL_TAG_BITS_EXT                                       0x88F2
 #define GL_STENCIL_TEST                                               0x0B90
 #define GL_STENCIL_TEST_TWO_SIDE_EXT                                  0x8910
@@ -4063,17 +4407,22 @@ typedef void                   GLvoid;
 #define GL_STREAM_COPY_ARB                                            0x88E2
 #define GL_STREAM_DRAW                                                0x88E0
 #define GL_STREAM_DRAW_ARB                                            0x88E0
+#define GL_STREAM_RASTERIZATION_AMD                                   0x91A0
 #define GL_STREAM_READ                                                0x88E1
 #define GL_STREAM_READ_ARB                                            0x88E1
 #define GL_STRICT_DEPTHFUNC_HINT_PGI                                  0x1A216
 #define GL_STRICT_LIGHTING_HINT_PGI                                   0x1A217
 #define GL_STRICT_SCISSOR_HINT_PGI                                    0x1A218
 #define GL_SUBPIXEL_BITS                                              0x0D50
+#define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV                          0x9347
+#define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV                          0x9348
 #define GL_SUBSAMPLE_DISTANCE_AMD                                     0x883F
 #define GL_SUBTRACT                                                   0x84E7
 #define GL_SUBTRACT_ARB                                               0x84E7
 #define GL_SUB_ATI                                                    0x8965
 #define GL_SUCCESS_NV                                                 0x902F
+#define GL_SUPERSAMPLE_SCALE_X_NV                                     0x9372
+#define GL_SUPERSAMPLE_SCALE_Y_NV                                     0x9373
 #define GL_SURFACE_MAPPED_NV                                          0x8700
 #define GL_SURFACE_REGISTERED_NV                                      0x86FD
 #define GL_SURFACE_STATE_NV                                           0x86EB
@@ -4121,10 +4470,17 @@ typedef void                   GLvoid;
 #define GL_TESSELLATION_FACTOR_AMD                                    0x9005
 #define GL_TESSELLATION_MODE_AMD                                      0x9004
 #define GL_TESS_CONTROL_OUTPUT_VERTICES                               0x8E75
+#define GL_TESS_CONTROL_OUTPUT_VERTICES_EXT                           0x8E75
+#define GL_TESS_CONTROL_OUTPUT_VERTICES_OES                           0x8E75
 #define GL_TESS_CONTROL_PROGRAM_NV                                    0x891E
 #define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV                   0x8C74
 #define GL_TESS_CONTROL_SHADER                                        0x8E88
 #define GL_TESS_CONTROL_SHADER_BIT                                    0x00000008
+#define GL_TESS_CONTROL_SHADER_BIT_EXT                                0x00000008
+#define GL_TESS_CONTROL_SHADER_BIT_OES                                0x00000008
+#define GL_TESS_CONTROL_SHADER_EXT                                    0x8E88
+#define GL_TESS_CONTROL_SHADER_OES                                    0x8E88
+#define GL_TESS_CONTROL_SHADER_PATCHES_ARB                            0x82F1
 #define GL_TESS_CONTROL_SUBROUTINE                                    0x92E9
 #define GL_TESS_CONTROL_SUBROUTINE_UNIFORM                            0x92EF
 #define GL_TESS_CONTROL_TEXTURE                                       0x829C
@@ -4132,13 +4488,26 @@ typedef void                   GLvoid;
 #define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV                0x8C75
 #define GL_TESS_EVALUATION_SHADER                                     0x8E87
 #define GL_TESS_EVALUATION_SHADER_BIT                                 0x00000010
+#define GL_TESS_EVALUATION_SHADER_BIT_EXT                             0x00000010
+#define GL_TESS_EVALUATION_SHADER_BIT_OES                             0x00000010
+#define GL_TESS_EVALUATION_SHADER_EXT                                 0x8E87
+#define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB                     0x82F2
+#define GL_TESS_EVALUATION_SHADER_OES                                 0x8E87
 #define GL_TESS_EVALUATION_SUBROUTINE                                 0x92EA
 #define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM                         0x92F0
 #define GL_TESS_EVALUATION_TEXTURE                                    0x829D
 #define GL_TESS_GEN_MODE                                              0x8E76
+#define GL_TESS_GEN_MODE_EXT                                          0x8E76
+#define GL_TESS_GEN_MODE_OES                                          0x8E76
 #define GL_TESS_GEN_POINT_MODE                                        0x8E79
+#define GL_TESS_GEN_POINT_MODE_EXT                                    0x8E79
+#define GL_TESS_GEN_POINT_MODE_OES                                    0x8E79
 #define GL_TESS_GEN_SPACING                                           0x8E77
+#define GL_TESS_GEN_SPACING_EXT                                       0x8E77
+#define GL_TESS_GEN_SPACING_OES                                       0x8E77
 #define GL_TESS_GEN_VERTEX_ORDER                                      0x8E78
+#define GL_TESS_GEN_VERTEX_ORDER_EXT                                  0x8E78
+#define GL_TESS_GEN_VERTEX_ORDER_OES                                  0x8E78
 #define GL_TEXCOORD1_BIT_PGI                                          0x10000000
 #define GL_TEXCOORD2_BIT_PGI                                          0x20000000
 #define GL_TEXCOORD3_BIT_PGI                                          0x40000000
@@ -4220,6 +4589,7 @@ typedef void                   GLvoid;
 #define GL_TEXTURE_2D_BINDING_EXT                                     0x8069
 #define GL_TEXTURE_2D_MULTISAMPLE                                     0x9100
 #define GL_TEXTURE_2D_MULTISAMPLE_ARRAY                               0x9102
+#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES                           0x9102
 #define GL_TEXTURE_2D_STACK_BINDING_MESAX                             0x875E
 #define GL_TEXTURE_2D_STACK_MESAX                                     0x875A
 #define GL_TEXTURE_3D                                                 0x806F
@@ -4238,6 +4608,7 @@ typedef void                   GLvoid;
 #define GL_TEXTURE_APPLICATION_MODE_EXT                               0x834F
 #define GL_TEXTURE_BASE_LEVEL                                         0x813C
 #define GL_TEXTURE_BASE_LEVEL_SGIS                                    0x813C
+#define GL_TEXTURE_BINDING                                            0x82EB
 #define GL_TEXTURE_BINDING_1D                                         0x8068
 #define GL_TEXTURE_BINDING_1D_ARRAY                                   0x8C1C
 #define GL_TEXTURE_BINDING_1D_ARRAY_EXT                               0x8C1C
@@ -4246,15 +4617,19 @@ typedef void                   GLvoid;
 #define GL_TEXTURE_BINDING_2D_ARRAY_EXT                               0x8C1D
 #define GL_TEXTURE_BINDING_2D_MULTISAMPLE                             0x9104
 #define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY                       0x9105
+#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES                   0x9105
 #define GL_TEXTURE_BINDING_3D                                         0x806A
 #define GL_TEXTURE_BINDING_3D_OES                                     0x806A
 #define GL_TEXTURE_BINDING_BUFFER                                     0x8C2C
 #define GL_TEXTURE_BINDING_BUFFER_ARB                                 0x8C2C
 #define GL_TEXTURE_BINDING_BUFFER_EXT                                 0x8C2C
+#define GL_TEXTURE_BINDING_BUFFER_OES                                 0x8C2C
 #define GL_TEXTURE_BINDING_CUBE_MAP                                   0x8514
 #define GL_TEXTURE_BINDING_CUBE_MAP_ARB                               0x8514
 #define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY                             0x900A
 #define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB                         0x900A
+#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT                         0x900A
+#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES                         0x900A
 #define GL_TEXTURE_BINDING_CUBE_MAP_EXT                               0x8514
 #define GL_TEXTURE_BINDING_CUBE_MAP_OES                               0x8514
 #define GL_TEXTURE_BINDING_EXTERNAL_OES                               0x8D67
@@ -4269,20 +4644,32 @@ typedef void                   GLvoid;
 #define GL_TEXTURE_BLUE_TYPE_ARB                                      0x8C12
 #define GL_TEXTURE_BORDER                                             0x1005
 #define GL_TEXTURE_BORDER_COLOR                                       0x1004
+#define GL_TEXTURE_BORDER_COLOR_EXT                                   0x1004
 #define GL_TEXTURE_BORDER_COLOR_NV                                    0x1004
+#define GL_TEXTURE_BORDER_COLOR_OES                                   0x1004
 #define GL_TEXTURE_BORDER_VALUES_NV                                   0x871A
 #define GL_TEXTURE_BUFFER                                             0x8C2A
 #define GL_TEXTURE_BUFFER_ARB                                         0x8C2A
 #define GL_TEXTURE_BUFFER_BINDING                                     0x8C2A
+#define GL_TEXTURE_BUFFER_BINDING_EXT                                 0x8C2A
+#define GL_TEXTURE_BUFFER_BINDING_OES                                 0x8C2A
 #define GL_TEXTURE_BUFFER_DATA_STORE_BINDING                          0x8C2D
 #define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB                      0x8C2D
 #define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT                      0x8C2D
+#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES                      0x8C2D
 #define GL_TEXTURE_BUFFER_EXT                                         0x8C2A
 #define GL_TEXTURE_BUFFER_FORMAT_ARB                                  0x8C2E
 #define GL_TEXTURE_BUFFER_FORMAT_EXT                                  0x8C2E
+#define GL_TEXTURE_BUFFER_OES                                         0x8C2A
 #define GL_TEXTURE_BUFFER_OFFSET                                      0x919D
 #define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT                            0x919F
+#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT                        0x919F
+#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES                        0x919F
+#define GL_TEXTURE_BUFFER_OFFSET_EXT                                  0x919D
+#define GL_TEXTURE_BUFFER_OFFSET_OES                                  0x919D
 #define GL_TEXTURE_BUFFER_SIZE                                        0x919E
+#define GL_TEXTURE_BUFFER_SIZE_EXT                                    0x919E
+#define GL_TEXTURE_BUFFER_SIZE_OES                                    0x919E
 #define GL_TEXTURE_CLIPMAP_CENTER_SGIX                                0x8171
 #define GL_TEXTURE_CLIPMAP_DEPTH_SGIX                                 0x8176
 #define GL_TEXTURE_CLIPMAP_FRAME_SGIX                                 0x8172
@@ -4337,6 +4724,8 @@ typedef void                   GLvoid;
 #define GL_TEXTURE_CUBE_MAP_ARB                                       0x8513
 #define GL_TEXTURE_CUBE_MAP_ARRAY                                     0x9009
 #define GL_TEXTURE_CUBE_MAP_ARRAY_ARB                                 0x9009
+#define GL_TEXTURE_CUBE_MAP_ARRAY_EXT                                 0x9009
+#define GL_TEXTURE_CUBE_MAP_ARRAY_OES                                 0x9009
 #define GL_TEXTURE_CUBE_MAP_EXT                                       0x8513
 #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X                                0x8516
 #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB                            0x8516
@@ -4495,6 +4884,7 @@ typedef void                   GLvoid;
 #define GL_TEXTURE_SWIZZLE_RGBA                                       0x8E46
 #define GL_TEXTURE_SWIZZLE_RGBA_EXT                                   0x8E46
 #define GL_TEXTURE_SWIZZLE_R_EXT                                      0x8E42
+#define GL_TEXTURE_TARGET                                             0x1006
 #define GL_TEXTURE_TARGET_QCOM                                        0x8BDA
 #define GL_TEXTURE_TOO_LARGE_EXT                                      0x8065
 #define GL_TEXTURE_TYPE_QCOM                                          0x8BD7
@@ -4504,9 +4894,17 @@ typedef void                   GLvoid;
 #define GL_TEXTURE_USAGE_ANGLE                                        0x93A2
 #define GL_TEXTURE_VIEW                                               0x82B5
 #define GL_TEXTURE_VIEW_MIN_LAYER                                     0x82DD
+#define GL_TEXTURE_VIEW_MIN_LAYER_EXT                                 0x82DD
+#define GL_TEXTURE_VIEW_MIN_LAYER_OES                                 0x82DD
 #define GL_TEXTURE_VIEW_MIN_LEVEL                                     0x82DB
+#define GL_TEXTURE_VIEW_MIN_LEVEL_EXT                                 0x82DB
+#define GL_TEXTURE_VIEW_MIN_LEVEL_OES                                 0x82DB
 #define GL_TEXTURE_VIEW_NUM_LAYERS                                    0x82DE
+#define GL_TEXTURE_VIEW_NUM_LAYERS_EXT                                0x82DE
+#define GL_TEXTURE_VIEW_NUM_LAYERS_OES                                0x82DE
 #define GL_TEXTURE_VIEW_NUM_LEVELS                                    0x82DC
+#define GL_TEXTURE_VIEW_NUM_LEVELS_EXT                                0x82DC
+#define GL_TEXTURE_VIEW_NUM_LEVELS_OES                                0x82DC
 #define GL_TEXTURE_WIDTH                                              0x1000
 #define GL_TEXTURE_WIDTH_QCOM                                         0x8BD2
 #define GL_TEXTURE_WRAP_Q_SGIS                                        0x8137
@@ -4567,11 +4965,13 @@ typedef void                   GLvoid;
 #define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV                         0x8C84
 #define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE                           0x934C
 #define GL_TRANSFORM_FEEDBACK_NV                                      0x8E22
+#define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB                            0x82EC
 #define GL_TRANSFORM_FEEDBACK_PAUSED                                  0x8E23
 #define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN                      0x8C88
 #define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT                  0x8C88
 #define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV                   0x8C88
 #define GL_TRANSFORM_FEEDBACK_RECORD_NV                               0x8C86
+#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB                     0x82ED
 #define GL_TRANSFORM_FEEDBACK_VARYING                                 0x92F4
 #define GL_TRANSFORM_FEEDBACK_VARYINGS                                0x8C83
 #define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT                            0x8C83
@@ -4601,6 +5001,7 @@ typedef void                   GLvoid;
 #define GL_TRIANGLES_ADJACENCY                                        0x000C
 #define GL_TRIANGLES_ADJACENCY_ARB                                    0x000C
 #define GL_TRIANGLES_ADJACENCY_EXT                                    0x000C
+#define GL_TRIANGLES_ADJACENCY_OES                                    0x000C
 #define GL_TRIANGLE_FAN                                               0x0006
 #define GL_TRIANGLE_LIST_SUN                                          0x81D7
 #define GL_TRIANGLE_MESH_SUN                                          0x8615
@@ -4608,12 +5009,15 @@ typedef void                   GLvoid;
 #define GL_TRIANGLE_STRIP_ADJACENCY                                   0x000D
 #define GL_TRIANGLE_STRIP_ADJACENCY_ARB                               0x000D
 #define GL_TRIANGLE_STRIP_ADJACENCY_EXT                               0x000D
+#define GL_TRIANGLE_STRIP_ADJACENCY_OES                               0x000D
 #define GL_TRIANGULAR_NV                                              0x90A5
 #define GL_TRUE                                                       1
 #define GL_TYPE                                                       0x92FA
 #define GL_UNCORRELATED_NV                                            0x9282
 #define GL_UNDEFINED_APPLE                                            0x8A1C
 #define GL_UNDEFINED_VERTEX                                           0x8260
+#define GL_UNDEFINED_VERTEX_EXT                                       0x8260
+#define GL_UNDEFINED_VERTEX_OES                                       0x8260
 #define GL_UNIFORM                                                    0x92E1
 #define GL_UNIFORM_ARRAY_STRIDE                                       0x8A3C
 #define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX                        0x92DA
@@ -4633,20 +5037,25 @@ typedef void                   GLvoid;
 #define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER         0x84F1
 #define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER                  0x8A44
 #define GL_UNIFORM_BUFFER                                             0x8A11
+#define GL_UNIFORM_BUFFER_ADDRESS_NV                                  0x936F
 #define GL_UNIFORM_BUFFER_BINDING                                     0x8A28
 #define GL_UNIFORM_BUFFER_BINDING_EXT                                 0x8DEF
 #define GL_UNIFORM_BUFFER_EXT                                         0x8DEE
+#define GL_UNIFORM_BUFFER_LENGTH_NV                                   0x9370
 #define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT                            0x8A34
 #define GL_UNIFORM_BUFFER_SIZE                                        0x8A2A
 #define GL_UNIFORM_BUFFER_START                                       0x8A29
+#define GL_UNIFORM_BUFFER_UNIFIED_NV                                  0x936E
 #define GL_UNIFORM_IS_ROW_MAJOR                                       0x8A3E
 #define GL_UNIFORM_MATRIX_STRIDE                                      0x8A3D
 #define GL_UNIFORM_NAME_LENGTH                                        0x8A39
 #define GL_UNIFORM_OFFSET                                             0x8A3B
 #define GL_UNIFORM_SIZE                                               0x8A38
 #define GL_UNIFORM_TYPE                                               0x8A37
+#define GL_UNKNOWN_CONTEXT_RESET                                      0x8255
 #define GL_UNKNOWN_CONTEXT_RESET_ARB                                  0x8255
 #define GL_UNKNOWN_CONTEXT_RESET_EXT                                  0x8255
+#define GL_UNKNOWN_CONTEXT_RESET_KHR                                  0x8255
 #define GL_UNPACK_ALIGNMENT                                           0x0CF5
 #define GL_UNPACK_CLIENT_STORAGE_APPLE                                0x85B2
 #define GL_UNPACK_CMYK_HINT_EXT                                       0x800F
@@ -4701,6 +5110,7 @@ typedef void                   GLvoid;
 #define GL_UNSIGNED_INT8_VEC3_NV                                      0x8FEE
 #define GL_UNSIGNED_INT8_VEC4_NV                                      0x8FEF
 #define GL_UNSIGNED_INT_10F_11F_11F_REV                               0x8C3B
+#define GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE                         0x8C3B
 #define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT                           0x8C3B
 #define GL_UNSIGNED_INT_10_10_10_2                                    0x8036
 #define GL_UNSIGNED_INT_10_10_10_2_EXT                                0x8036
@@ -4713,6 +5123,7 @@ typedef void                   GLvoid;
 #define GL_UNSIGNED_INT_2_10_10_10_REV                                0x8368
 #define GL_UNSIGNED_INT_2_10_10_10_REV_EXT                            0x8368
 #define GL_UNSIGNED_INT_5_9_9_9_REV                                   0x8C3E
+#define GL_UNSIGNED_INT_5_9_9_9_REV_APPLE                             0x8C3E
 #define GL_UNSIGNED_INT_5_9_9_9_REV_EXT                               0x8C3E
 #define GL_UNSIGNED_INT_8_24_REV_MESA                                 0x8752
 #define GL_UNSIGNED_INT_8_8_8_8                                       0x8035
@@ -4739,10 +5150,12 @@ typedef void                   GLvoid;
 #define GL_UNSIGNED_INT_IMAGE_3D_EXT                                  0x9064
 #define GL_UNSIGNED_INT_IMAGE_BUFFER                                  0x9067
 #define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT                              0x9067
+#define GL_UNSIGNED_INT_IMAGE_BUFFER_OES                              0x9067
 #define GL_UNSIGNED_INT_IMAGE_CUBE                                    0x9066
 #define GL_UNSIGNED_INT_IMAGE_CUBE_EXT                                0x9066
 #define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY                          0x906A
 #define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT                      0x906A
+#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES                      0x906A
 #define GL_UNSIGNED_INT_S8_S8_8_8_NV                                  0x86DA
 #define GL_UNSIGNED_INT_SAMPLER_1D                                    0x8DD1
 #define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY                              0x8DD6
@@ -4754,6 +5167,7 @@ typedef void                   GLvoid;
 #define GL_UNSIGNED_INT_SAMPLER_2D_EXT                                0x8DD2
 #define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE                        0x910A
 #define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY                  0x910D
+#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES              0x910D
 #define GL_UNSIGNED_INT_SAMPLER_2D_RECT                               0x8DD5
 #define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT                           0x8DD5
 #define GL_UNSIGNED_INT_SAMPLER_3D                                    0x8DD3
@@ -4761,10 +5175,13 @@ typedef void                   GLvoid;
 #define GL_UNSIGNED_INT_SAMPLER_BUFFER                                0x8DD8
 #define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD                            0x9003
 #define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT                            0x8DD8
+#define GL_UNSIGNED_INT_SAMPLER_BUFFER_OES                            0x8DD8
 #define GL_UNSIGNED_INT_SAMPLER_CUBE                                  0x8DD4
 #define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT                              0x8DD4
 #define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY                        0x900F
 #define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB                    0x900F
+#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT                    0x900F
+#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES                    0x900F
 #define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV                       0x8E58
 #define GL_UNSIGNED_INT_VEC2                                          0x8DC6
 #define GL_UNSIGNED_INT_VEC2_EXT                                      0x8DC6
@@ -4915,6 +5332,7 @@ typedef void                   GLvoid;
 #define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE                             0x8A08
 #define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE                              0x8A06
 #define GL_VERTEX_ATTRIB_RELATIVE_OFFSET                              0x82D5
+#define GL_VERTEX_BINDING_BUFFER                                      0x8F4F
 #define GL_VERTEX_BINDING_DIVISOR                                     0x82D6
 #define GL_VERTEX_BINDING_OFFSET                                      0x82D7
 #define GL_VERTEX_BINDING_STRIDE                                      0x82D8
@@ -4948,6 +5366,7 @@ typedef void                   GLvoid;
 #define GL_VERTEX_SHADER_EXT                                          0x8780
 #define GL_VERTEX_SHADER_INSTRUCTIONS_EXT                             0x87CF
 #define GL_VERTEX_SHADER_INVARIANTS_EXT                               0x87D1
+#define GL_VERTEX_SHADER_INVOCATIONS_ARB                              0x82F0
 #define GL_VERTEX_SHADER_LOCALS_EXT                                   0x87D3
 #define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT                          0x87D2
 #define GL_VERTEX_SHADER_OPTIMIZED_EXT                                0x87D4
@@ -4972,6 +5391,7 @@ typedef void                   GLvoid;
 #define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT                             0x850F
 #define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT                               0x850E
 #define GL_VERTICAL_LINE_TO_NV                                        0x08
+#define GL_VERTICES_SUBMITTED_ARB                                     0x82EE
 #define GL_VIBRANCE_BIAS_NV                                           0x8719
 #define GL_VIBRANCE_SCALE_NV                                          0x8713
 #define GL_VIDEO_BUFFER_BINDING_NV                                    0x9021
@@ -4991,8 +5411,14 @@ typedef void                   GLvoid;
 #define GL_VIEWPORT                                                   0x0BA2
 #define GL_VIEWPORT_BIT                                               0x00000800
 #define GL_VIEWPORT_BOUNDS_RANGE                                      0x825D
+#define GL_VIEWPORT_BOUNDS_RANGE_EXT                                  0x825D
+#define GL_VIEWPORT_BOUNDS_RANGE_NV                                   0x825D
 #define GL_VIEWPORT_INDEX_PROVOKING_VERTEX                            0x825F
+#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_EXT                        0x825F
+#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV                         0x825F
 #define GL_VIEWPORT_SUBPIXEL_BITS                                     0x825C
+#define GL_VIEWPORT_SUBPIXEL_BITS_EXT                                 0x825C
+#define GL_VIEWPORT_SUBPIXEL_BITS_NV                                  0x825C
 #define GL_VIEW_CLASS_128_BITS                                        0x82C4
 #define GL_VIEW_CLASS_16_BITS                                         0x82CA
 #define GL_VIEW_CLASS_24_BITS                                         0x82C9
@@ -5021,6 +5447,8 @@ typedef void                   GLvoid;
 #define GL_VOLATILE_APPLE                                             0x8A1A
 #define GL_WAIT_FAILED                                                0x911D
 #define GL_WAIT_FAILED_APPLE                                          0x911D
+#define GL_WARPS_PER_SM_NV                                            0x933A
+#define GL_WARP_SIZE_NV                                               0x9339
 #define GL_WEIGHT_ARRAY_ARB                                           0x86AD
 #define GL_WEIGHT_ARRAY_BUFFER_BINDING                                0x889E
 #define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB                            0x889E
@@ -5066,6 +5494,7 @@ typedef void                   GLvoid;
 #define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV                              0x9033
 #define GL_ZERO                                                       0
 #define GL_ZERO_EXT                                                   0x87DD
+#define GL_ZERO_TO_ONE                                                0x935F
 #define GL_ZOOM_X                                                     0x0D16
 #define GL_ZOOM_Y                                                     0x0D17
 #define GL_Z_EXT                                                      0x87D7
diff --git a/include/wine/wgl_driver.h b/include/wine/wgl_driver.h
index 7dbf6a1..71a5075 100644
--- a/include/wine/wgl_driver.h
+++ b/include/wine/wgl_driver.h
@@ -7,7 +7,7 @@
 #define WINE_GLAPI
 #endif
 
-#define WINE_WGL_DRIVER_VERSION 11
+#define WINE_WGL_DRIVER_VERSION 12
 
 struct wgl_context;
 struct wgl_pbuffer;
@@ -395,6 +395,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glBeginFragmentShaderATI)(void);
         void       (WINE_GLAPI *p_glBeginOcclusionQueryNV)(GLuint);
         void       (WINE_GLAPI *p_glBeginPerfMonitorAMD)(GLuint);
+        void       (WINE_GLAPI *p_glBeginPerfQueryINTEL)(GLuint);
         void       (WINE_GLAPI *p_glBeginQuery)(GLenum,GLuint);
         void       (WINE_GLAPI *p_glBeginQueryARB)(GLenum,GLuint);
         void       (WINE_GLAPI *p_glBeginQueryIndexed)(GLenum,GLuint,GLuint);
@@ -439,6 +440,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glBindSamplers)(GLuint,GLsizei,const GLuint*);
         GLuint     (WINE_GLAPI *p_glBindTexGenParameterEXT)(GLenum,GLenum,GLenum);
         void       (WINE_GLAPI *p_glBindTextureEXT)(GLenum,GLuint);
+        void       (WINE_GLAPI *p_glBindTextureUnit)(GLuint,GLuint);
         GLuint     (WINE_GLAPI *p_glBindTextureUnitParameterEXT)(GLenum,GLenum);
         void       (WINE_GLAPI *p_glBindTextures)(GLuint,GLsizei,const GLuint*);
         void       (WINE_GLAPI *p_glBindTransformFeedback)(GLenum,GLuint);
@@ -462,6 +464,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glBinormal3svEXT)(const GLshort*);
         void       (WINE_GLAPI *p_glBinormalPointerEXT)(GLenum,GLsizei,const void*);
         void       (WINE_GLAPI *p_glBitmapxOES)(GLsizei,GLsizei,GLfixed,GLfixed,GLfixed,GLfixed,const GLubyte*);
+        void       (WINE_GLAPI *p_glBlendBarrierKHR)(void);
         void       (WINE_GLAPI *p_glBlendBarrierNV)(void);
         void       (WINE_GLAPI *p_glBlendColor)(GLfloat,GLfloat,GLfloat,GLfloat);
         void       (WINE_GLAPI *p_glBlendColorEXT)(GLfloat,GLfloat,GLfloat,GLfloat);
@@ -488,9 +491,11 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glBlendParameteriNV)(GLenum,GLint);
         void       (WINE_GLAPI *p_glBlitFramebuffer)(GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum);
         void       (WINE_GLAPI *p_glBlitFramebufferEXT)(GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum);
+        void       (WINE_GLAPI *p_glBlitNamedFramebuffer)(GLuint,GLuint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum);
         void       (WINE_GLAPI *p_glBufferAddressRangeNV)(GLenum,GLuint,GLuint64EXT,GLsizeiptr);
         void       (WINE_GLAPI *p_glBufferData)(GLenum,GLsizeiptr,const void*,GLenum);
         void       (WINE_GLAPI *p_glBufferDataARB)(GLenum,GLsizeiptrARB,const void*,GLenum);
+        void       (WINE_GLAPI *p_glBufferPageCommitmentARB)(GLenum,GLintptr,GLsizeiptr,GLboolean);
         void       (WINE_GLAPI *p_glBufferParameteriAPPLE)(GLenum,GLenum,GLint);
         GLuint     (WINE_GLAPI *p_glBufferRegionEnabled)(void);
         void       (WINE_GLAPI *p_glBufferStorage)(GLenum,GLsizeiptr,const void*,GLbitfield);
@@ -498,6 +503,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glBufferSubDataARB)(GLenum,GLintptrARB,GLsizeiptrARB,const void*);
         GLenum     (WINE_GLAPI *p_glCheckFramebufferStatus)(GLenum);
         GLenum     (WINE_GLAPI *p_glCheckFramebufferStatusEXT)(GLenum);
+        GLenum     (WINE_GLAPI *p_glCheckNamedFramebufferStatus)(GLuint,GLenum);
         GLenum     (WINE_GLAPI *p_glCheckNamedFramebufferStatusEXT)(GLuint,GLenum);
         void       (WINE_GLAPI *p_glClampColor)(GLenum,GLenum);
         void       (WINE_GLAPI *p_glClampColorARB)(GLenum,GLenum);
@@ -515,8 +521,14 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glClearDepthf)(GLfloat);
         void       (WINE_GLAPI *p_glClearDepthfOES)(GLclampf);
         void       (WINE_GLAPI *p_glClearDepthxOES)(GLfixed);
+        void       (WINE_GLAPI *p_glClearNamedBufferData)(GLuint,GLenum,GLenum,GLenum,const void*);
         void       (WINE_GLAPI *p_glClearNamedBufferDataEXT)(GLuint,GLenum,GLenum,GLenum,const void*);
-        void       (WINE_GLAPI *p_glClearNamedBufferSubDataEXT)(GLuint,GLenum,GLenum,GLenum,GLsizeiptr,GLsizeiptr,const void*);
+        void       (WINE_GLAPI *p_glClearNamedBufferSubData)(GLuint,GLenum,GLintptr,GLsizei,GLenum,GLenum,const void*);
+        void       (WINE_GLAPI *p_glClearNamedBufferSubDataEXT)(GLuint,GLenum,GLsizeiptr,GLsizeiptr,GLenum,GLenum,const void*);
+        void       (WINE_GLAPI *p_glClearNamedFramebufferfi)(GLuint,GLenum,const GLfloat,GLint);
+        void       (WINE_GLAPI *p_glClearNamedFramebufferfv)(GLuint,GLenum,GLint,const GLfloat*);
+        void       (WINE_GLAPI *p_glClearNamedFramebufferiv)(GLuint,GLenum,GLint,const GLint*);
+        void       (WINE_GLAPI *p_glClearNamedFramebufferuiv)(GLuint,GLenum,GLint,const GLuint*);
         void       (WINE_GLAPI *p_glClearTexImage)(GLuint,GLint,GLenum,GLenum,const void*);
         void       (WINE_GLAPI *p_glClearTexSubImage)(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void*);
         void       (WINE_GLAPI *p_glClientActiveTexture)(GLenum);
@@ -524,6 +536,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glClientActiveVertexStreamATI)(GLenum);
         void       (WINE_GLAPI *p_glClientAttribDefaultEXT)(GLbitfield);
         GLenum     (WINE_GLAPI *p_glClientWaitSync)(GLsync,GLbitfield,GLuint64);
+        void       (WINE_GLAPI *p_glClipControl)(GLenum,GLenum);
         void       (WINE_GLAPI *p_glClipPlanefOES)(GLenum,const GLfloat*);
         void       (WINE_GLAPI *p_glClipPlanexOES)(GLenum,const GLfixed*);
         void       (WINE_GLAPI *p_glColor3fVertex3fSUN)(GLfloat,GLfloat,GLfloat,GLfloat,GLfloat,GLfloat);
@@ -595,8 +608,11 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glCompressedTextureImage1DEXT)(GLuint,GLenum,GLint,GLenum,GLsizei,GLint,GLsizei,const void*);
         void       (WINE_GLAPI *p_glCompressedTextureImage2DEXT)(GLuint,GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,const void*);
         void       (WINE_GLAPI *p_glCompressedTextureImage3DEXT)(GLuint,GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,const void*);
+        void       (WINE_GLAPI *p_glCompressedTextureSubImage1D)(GLuint,GLint,GLint,GLsizei,GLenum,GLsizei,const void*);
         void       (WINE_GLAPI *p_glCompressedTextureSubImage1DEXT)(GLuint,GLenum,GLint,GLint,GLsizei,GLenum,GLsizei,const void*);
+        void       (WINE_GLAPI *p_glCompressedTextureSubImage2D)(GLuint,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void*);
         void       (WINE_GLAPI *p_glCompressedTextureSubImage2DEXT)(GLuint,GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void*);
+        void       (WINE_GLAPI *p_glCompressedTextureSubImage3D)(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,const void*);
         void       (WINE_GLAPI *p_glCompressedTextureSubImage3DEXT)(GLuint,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,const void*);
         void       (WINE_GLAPI *p_glConvolutionFilter1D)(GLenum,GLenum,GLsizei,GLenum,GLenum,const void*);
         void       (WINE_GLAPI *p_glConvolutionFilter1DEXT)(GLenum,GLenum,GLsizei,GLenum,GLenum,const void*);
@@ -628,6 +644,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glCopyMultiTexSubImage1DEXT)(GLenum,GLenum,GLint,GLint,GLint,GLint,GLsizei);
         void       (WINE_GLAPI *p_glCopyMultiTexSubImage2DEXT)(GLenum,GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glCopyMultiTexSubImage3DEXT)(GLenum,GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
+        void       (WINE_GLAPI *p_glCopyNamedBufferSubData)(GLuint,GLuint,GLintptr,GLintptr,GLsizei);
         void       (WINE_GLAPI *p_glCopyPathNV)(GLuint,GLuint);
         void       (WINE_GLAPI *p_glCopyTexImage1DEXT)(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint);
         void       (WINE_GLAPI *p_glCopyTexImage2DEXT)(GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
@@ -637,20 +654,35 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glCopyTexSubImage3DEXT)(GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glCopyTextureImage1DEXT)(GLuint,GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint);
         void       (WINE_GLAPI *p_glCopyTextureImage2DEXT)(GLuint,GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint);
+        void       (WINE_GLAPI *p_glCopyTextureSubImage1D)(GLuint,GLint,GLint,GLint,GLint,GLsizei);
         void       (WINE_GLAPI *p_glCopyTextureSubImage1DEXT)(GLuint,GLenum,GLint,GLint,GLint,GLint,GLsizei);
+        void       (WINE_GLAPI *p_glCopyTextureSubImage2D)(GLuint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glCopyTextureSubImage2DEXT)(GLuint,GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
+        void       (WINE_GLAPI *p_glCopyTextureSubImage3D)(GLuint,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glCopyTextureSubImage3DEXT)(GLuint,GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glCoverFillPathInstancedNV)(GLsizei,GLenum,const void*,GLuint,GLenum,GLenum,const GLfloat*);
         void       (WINE_GLAPI *p_glCoverFillPathNV)(GLuint,GLenum);
         void       (WINE_GLAPI *p_glCoverStrokePathInstancedNV)(GLsizei,GLenum,const void*,GLuint,GLenum,GLenum,const GLfloat*);
         void       (WINE_GLAPI *p_glCoverStrokePathNV)(GLuint,GLenum);
+        void       (WINE_GLAPI *p_glCoverageModulationNV)(GLenum);
+        void       (WINE_GLAPI *p_glCoverageModulationTableNV)(GLsizei,const GLfloat*);
+        void       (WINE_GLAPI *p_glCreateBuffers)(GLsizei,GLuint*);
+        void       (WINE_GLAPI *p_glCreateFramebuffers)(GLsizei,GLuint*);
+        void       (WINE_GLAPI *p_glCreatePerfQueryINTEL)(GLuint,GLuint*);
         GLuint     (WINE_GLAPI *p_glCreateProgram)(void);
         GLhandleARB (WINE_GLAPI *p_glCreateProgramObjectARB)(void);
+        void       (WINE_GLAPI *p_glCreateProgramPipelines)(GLsizei,GLuint*);
+        void       (WINE_GLAPI *p_glCreateQueries)(GLenum,GLsizei,GLuint*);
+        void       (WINE_GLAPI *p_glCreateRenderbuffers)(GLsizei,GLuint*);
+        void       (WINE_GLAPI *p_glCreateSamplers)(GLsizei,GLuint*);
         GLuint     (WINE_GLAPI *p_glCreateShader)(GLenum);
         GLhandleARB (WINE_GLAPI *p_glCreateShaderObjectARB)(GLenum);
         GLuint     (WINE_GLAPI *p_glCreateShaderProgramEXT)(GLenum,const GLchar*);
         GLuint     (WINE_GLAPI *p_glCreateShaderProgramv)(GLenum,GLsizei,const GLchar*const*);
         GLsync     (WINE_GLAPI *p_glCreateSyncFromCLeventARB)(void*,void*,GLbitfield);
+        void       (WINE_GLAPI *p_glCreateTextures)(GLenum,GLsizei,GLuint*);
+        void       (WINE_GLAPI *p_glCreateTransformFeedbacks)(GLsizei,GLuint*);
+        void       (WINE_GLAPI *p_glCreateVertexArrays)(GLsizei,GLuint*);
         void       (WINE_GLAPI *p_glCullParameterdvEXT)(GLenum,GLdouble*);
         void       (WINE_GLAPI *p_glCullParameterfvEXT)(GLenum,GLfloat*);
         void       (WINE_GLAPI *p_glCurrentPaletteMatrixARB)(GLint);
@@ -682,6 +714,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glDeleteOcclusionQueriesNV)(GLsizei,const GLuint*);
         void       (WINE_GLAPI *p_glDeletePathsNV)(GLuint,GLsizei);
         void       (WINE_GLAPI *p_glDeletePerfMonitorsAMD)(GLsizei,GLuint*);
+        void       (WINE_GLAPI *p_glDeletePerfQueryINTEL)(GLuint);
         void       (WINE_GLAPI *p_glDeleteProgram)(GLuint);
         void       (WINE_GLAPI *p_glDeleteProgramPipelines)(GLsizei,const GLuint*);
         void       (WINE_GLAPI *p_glDeleteProgramsARB)(GLsizei,const GLuint*);
@@ -714,6 +747,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glDisableClientStateiEXT)(GLenum,GLuint);
         void       (WINE_GLAPI *p_glDisableIndexedEXT)(GLenum,GLuint);
         void       (WINE_GLAPI *p_glDisableVariantClientStateEXT)(GLuint);
+        void       (WINE_GLAPI *p_glDisableVertexArrayAttrib)(GLuint,GLuint);
         void       (WINE_GLAPI *p_glDisableVertexArrayAttribEXT)(GLuint,GLuint);
         void       (WINE_GLAPI *p_glDisableVertexArrayEXT)(GLuint,GLenum);
         void       (WINE_GLAPI *p_glDisableVertexAttribAPPLE)(GLuint,GLenum);
@@ -764,6 +798,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glEnableClientStateiEXT)(GLenum,GLuint);
         void       (WINE_GLAPI *p_glEnableIndexedEXT)(GLenum,GLuint);
         void       (WINE_GLAPI *p_glEnableVariantClientStateEXT)(GLuint);
+        void       (WINE_GLAPI *p_glEnableVertexArrayAttrib)(GLuint,GLuint);
         void       (WINE_GLAPI *p_glEnableVertexArrayAttribEXT)(GLuint,GLuint);
         void       (WINE_GLAPI *p_glEnableVertexArrayEXT)(GLuint,GLenum);
         void       (WINE_GLAPI *p_glEnableVertexAttribAPPLE)(GLuint,GLenum);
@@ -776,6 +811,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glEndFragmentShaderATI)(void);
         void       (WINE_GLAPI *p_glEndOcclusionQueryNV)(void);
         void       (WINE_GLAPI *p_glEndPerfMonitorAMD)(GLuint);
+        void       (WINE_GLAPI *p_glEndPerfQueryINTEL)(GLuint);
         void       (WINE_GLAPI *p_glEndQuery)(GLenum);
         void       (WINE_GLAPI *p_glEndQueryARB)(GLenum);
         void       (WINE_GLAPI *p_glEndQueryIndexed)(GLenum,GLuint);
@@ -801,6 +837,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glFinishTextureSUNX)(void);
         void       (WINE_GLAPI *p_glFlushMappedBufferRange)(GLenum,GLintptr,GLsizeiptr);
         void       (WINE_GLAPI *p_glFlushMappedBufferRangeAPPLE)(GLenum,GLintptr,GLsizeiptr);
+        void       (WINE_GLAPI *p_glFlushMappedNamedBufferRange)(GLuint,GLintptr,GLsizei);
         void       (WINE_GLAPI *p_glFlushMappedNamedBufferRangeEXT)(GLuint,GLintptr,GLsizeiptr);
         void       (WINE_GLAPI *p_glFlushPixelDataRangeNV)(GLenum);
         void       (WINE_GLAPI *p_glFlushRasterSGIX)(void);
@@ -825,6 +862,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glFogxOES)(GLenum,GLfixed);
         void       (WINE_GLAPI *p_glFogxvOES)(GLenum,const GLfixed*);
         void       (WINE_GLAPI *p_glFragmentColorMaterialSGIX)(GLenum,GLenum);
+        void       (WINE_GLAPI *p_glFragmentCoverageColorNV)(GLuint);
         void       (WINE_GLAPI *p_glFragmentLightModelfSGIX)(GLenum,GLfloat);
         void       (WINE_GLAPI *p_glFragmentLightModelfvSGIX)(GLenum,const GLfloat*);
         void       (WINE_GLAPI *p_glFragmentLightModeliSGIX)(GLenum,GLint);
@@ -845,6 +883,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glFramebufferReadBufferEXT)(GLuint,GLenum);
         void       (WINE_GLAPI *p_glFramebufferRenderbuffer)(GLenum,GLenum,GLenum,GLuint);
         void       (WINE_GLAPI *p_glFramebufferRenderbufferEXT)(GLenum,GLenum,GLenum,GLuint);
+        void       (WINE_GLAPI *p_glFramebufferSampleLocationsfvNV)(GLenum,GLuint,GLsizei,const GLfloat*);
         void       (WINE_GLAPI *p_glFramebufferTexture)(GLenum,GLenum,GLuint,GLint);
         void       (WINE_GLAPI *p_glFramebufferTexture1D)(GLenum,GLenum,GLenum,GLuint,GLint);
         void       (WINE_GLAPI *p_glFramebufferTexture1DEXT)(GLenum,GLenum,GLenum,GLuint,GLint);
@@ -892,6 +931,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glGenerateMipmap)(GLenum);
         void       (WINE_GLAPI *p_glGenerateMipmapEXT)(GLenum);
         void       (WINE_GLAPI *p_glGenerateMultiTexMipmapEXT)(GLenum,GLenum);
+        void       (WINE_GLAPI *p_glGenerateTextureMipmap)(GLuint);
         void       (WINE_GLAPI *p_glGenerateTextureMipmapEXT)(GLuint,GLenum);
         void       (WINE_GLAPI *p_glGetActiveAtomicCounterBufferiv)(GLuint,GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetActiveAttrib)(GLuint,GLuint,GLsizei,GLsizei*,GLint*,GLenum*,GLchar*);
@@ -941,7 +981,9 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glGetCompressedMultiTexImageEXT)(GLenum,GLenum,GLint,void*);
         void       (WINE_GLAPI *p_glGetCompressedTexImage)(GLenum,GLint,void*);
         void       (WINE_GLAPI *p_glGetCompressedTexImageARB)(GLenum,GLint,void*);
+        void       (WINE_GLAPI *p_glGetCompressedTextureImage)(GLuint,GLint,GLsizei,void*);
         void       (WINE_GLAPI *p_glGetCompressedTextureImageEXT)(GLuint,GLenum,GLint,void*);
+        void       (WINE_GLAPI *p_glGetCompressedTextureSubImage)(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLsizei,void*);
         void       (WINE_GLAPI *p_glGetConvolutionFilter)(GLenum,GLenum,GLenum,void*);
         void       (WINE_GLAPI *p_glGetConvolutionFilterEXT)(GLenum,GLenum,GLenum,void*);
         void       (WINE_GLAPI *p_glGetConvolutionParameterfv)(GLenum,GLenum,GLfloat*);
@@ -949,6 +991,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glGetConvolutionParameteriv)(GLenum,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetConvolutionParameterivEXT)(GLenum,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetConvolutionParameterxvOES)(GLenum,GLenum,GLfixed*);
+        void       (WINE_GLAPI *p_glGetCoverageModulationTableNV)(GLsizei,GLfloat*);
         GLuint     (WINE_GLAPI *p_glGetDebugMessageLog)(GLuint,GLsizei,GLenum*,GLenum*,GLuint*,GLenum*,GLsizei*,GLchar*);
         GLuint     (WINE_GLAPI *p_glGetDebugMessageLogAMD)(GLuint,GLsizei,GLenum*,GLuint*,GLuint*,GLsizei*,GLchar*);
         GLuint     (WINE_GLAPI *p_glGetDebugMessageLogARB)(GLuint,GLsizei,GLenum*,GLenum*,GLuint*,GLenum*,GLsizei*,GLchar*);
@@ -959,6 +1002,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glGetFenceivNV)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetFinalCombinerInputParameterfvNV)(GLenum,GLenum,GLfloat*);
         void       (WINE_GLAPI *p_glGetFinalCombinerInputParameterivNV)(GLenum,GLenum,GLint*);
+        void       (WINE_GLAPI *p_glGetFirstPerfQueryIdINTEL)(GLuint*);
         void       (WINE_GLAPI *p_glGetFixedvOES)(GLenum,GLfixed*);
         void       (WINE_GLAPI *p_glGetFloatIndexedvEXT)(GLenum,GLuint,GLfloat*);
         void       (WINE_GLAPI *p_glGetFloati_v)(GLenum,GLuint,GLfloat*);
@@ -975,6 +1019,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glGetFramebufferAttachmentParameterivEXT)(GLenum,GLenum,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetFramebufferParameteriv)(GLenum,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetFramebufferParameterivEXT)(GLuint,GLenum,GLint*);
+        GLenum     (WINE_GLAPI *p_glGetGraphicsResetStatus)(void);
         GLenum     (WINE_GLAPI *p_glGetGraphicsResetStatusARB)(void);
         GLhandleARB (WINE_GLAPI *p_glGetHandleARB)(GLenum);
         void       (WINE_GLAPI *p_glGetHistogram)(GLenum,GLboolean,GLenum,GLenum,void*);
@@ -996,6 +1041,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glGetIntegeri_v)(GLenum,GLuint,GLint*);
         void       (WINE_GLAPI *p_glGetIntegerui64i_vNV)(GLenum,GLuint,GLuint64EXT*);
         void       (WINE_GLAPI *p_glGetIntegerui64vNV)(GLenum,GLuint64EXT*);
+        void       (WINE_GLAPI *p_glGetInternalformatSampleivNV)(GLenum,GLenum,GLsizei,GLenum,GLsizei,GLint*);
         void       (WINE_GLAPI *p_glGetInternalformati64v)(GLenum,GLenum,GLenum,GLsizei,GLint64*);
         void       (WINE_GLAPI *p_glGetInternalformativ)(GLenum,GLenum,GLenum,GLsizei,GLint*);
         void       (WINE_GLAPI *p_glGetInvariantBooleanvEXT)(GLuint,GLenum,GLboolean*);
@@ -1034,11 +1080,17 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glGetMultiTexParameterivEXT)(GLenum,GLenum,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetMultisamplefv)(GLenum,GLuint,GLfloat*);
         void       (WINE_GLAPI *p_glGetMultisamplefvNV)(GLenum,GLuint,GLfloat*);
+        void       (WINE_GLAPI *p_glGetNamedBufferParameteri64v)(GLuint,GLenum,GLint64*);
+        void       (WINE_GLAPI *p_glGetNamedBufferParameteriv)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetNamedBufferParameterivEXT)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetNamedBufferParameterui64vNV)(GLuint,GLenum,GLuint64EXT*);
+        void       (WINE_GLAPI *p_glGetNamedBufferPointerv)(GLuint,GLenum,void**);
         void       (WINE_GLAPI *p_glGetNamedBufferPointervEXT)(GLuint,GLenum,void**);
+        void       (WINE_GLAPI *p_glGetNamedBufferSubData)(GLuint,GLintptr,GLsizei,void*);
         void       (WINE_GLAPI *p_glGetNamedBufferSubDataEXT)(GLuint,GLintptr,GLsizeiptr,void*);
+        void       (WINE_GLAPI *p_glGetNamedFramebufferAttachmentParameteriv)(GLuint,GLenum,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetNamedFramebufferAttachmentParameterivEXT)(GLuint,GLenum,GLenum,GLint*);
+        void       (WINE_GLAPI *p_glGetNamedFramebufferParameteriv)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetNamedFramebufferParameterivEXT)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetNamedProgramLocalParameterIivEXT)(GLuint,GLenum,GLuint,GLint*);
         void       (WINE_GLAPI *p_glGetNamedProgramLocalParameterIuivEXT)(GLuint,GLenum,GLuint,GLuint*);
@@ -1046,9 +1098,11 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glGetNamedProgramLocalParameterfvEXT)(GLuint,GLenum,GLuint,GLfloat*);
         void       (WINE_GLAPI *p_glGetNamedProgramStringEXT)(GLuint,GLenum,GLenum,void*);
         void       (WINE_GLAPI *p_glGetNamedProgramivEXT)(GLuint,GLenum,GLenum,GLint*);
+        void       (WINE_GLAPI *p_glGetNamedRenderbufferParameteriv)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetNamedRenderbufferParameterivEXT)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetNamedStringARB)(GLint,const GLchar*,GLsizei,GLint*,GLchar*);
         void       (WINE_GLAPI *p_glGetNamedStringivARB)(GLint,const GLchar*,GLenum,GLint*);
+        void       (WINE_GLAPI *p_glGetNextPerfQueryIdINTEL)(GLuint,GLuint*);
         void       (WINE_GLAPI *p_glGetObjectBufferfvATI)(GLuint,GLenum,GLfloat*);
         void       (WINE_GLAPI *p_glGetObjectBufferivATI)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetObjectLabel)(GLenum,GLuint,GLsizei,GLsizei*,GLchar*);
@@ -1072,12 +1126,16 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glGetPathSpacingNV)(GLenum,GLsizei,GLenum,const void*,GLuint,GLfloat,GLfloat,GLenum,GLfloat*);
         void       (WINE_GLAPI *p_glGetPathTexGenfvNV)(GLenum,GLenum,GLfloat*);
         void       (WINE_GLAPI *p_glGetPathTexGenivNV)(GLenum,GLenum,GLint*);
+        void       (WINE_GLAPI *p_glGetPerfCounterInfoINTEL)(GLuint,GLuint,GLuint,GLchar*,GLuint,GLchar*,GLuint*,GLuint*,GLuint*,GLuint*,GLuint64*);
         void       (WINE_GLAPI *p_glGetPerfMonitorCounterDataAMD)(GLuint,GLenum,GLsizei,GLuint*,GLint*);
         void       (WINE_GLAPI *p_glGetPerfMonitorCounterInfoAMD)(GLuint,GLuint,GLenum,void*);
         void       (WINE_GLAPI *p_glGetPerfMonitorCounterStringAMD)(GLuint,GLuint,GLsizei,GLsizei*,GLchar*);
         void       (WINE_GLAPI *p_glGetPerfMonitorCountersAMD)(GLuint,GLint*,GLint*,GLsizei,GLuint*);
         void       (WINE_GLAPI *p_glGetPerfMonitorGroupStringAMD)(GLuint,GLsizei,GLsizei*,GLchar*);
         void       (WINE_GLAPI *p_glGetPerfMonitorGroupsAMD)(GLint*,GLsizei,GLuint*);
+        void       (WINE_GLAPI *p_glGetPerfQueryDataINTEL)(GLuint,GLuint,GLsizei,GLvoid*,GLuint*);
+        void       (WINE_GLAPI *p_glGetPerfQueryIdByNameINTEL)(GLchar*,GLuint*);
+        void       (WINE_GLAPI *p_glGetPerfQueryInfoINTEL)(GLuint,GLuint,GLchar*,GLuint*,GLuint*,GLuint*,GLuint*);
         void       (WINE_GLAPI *p_glGetPixelMapxv)(GLenum,GLint,GLfixed*);
         void       (WINE_GLAPI *p_glGetPixelTexGenParameterfvSGIS)(GLenum,GLfloat*);
         void       (WINE_GLAPI *p_glGetPixelTexGenParameterivSGIS)(GLenum,GLint*);
@@ -1107,6 +1165,7 @@ struct opengl_funcs
         GLint      (WINE_GLAPI *p_glGetProgramResourceLocation)(GLuint,GLenum,const GLchar*);
         GLint      (WINE_GLAPI *p_glGetProgramResourceLocationIndex)(GLuint,GLenum,const GLchar*);
         void       (WINE_GLAPI *p_glGetProgramResourceName)(GLuint,GLenum,GLuint,GLsizei,GLsizei*,GLchar*);
+        void       (WINE_GLAPI *p_glGetProgramResourcefvNV)(GLuint,GLenum,GLuint,GLsizei,const GLenum*,GLsizei,GLsizei*,GLfloat*);
         void       (WINE_GLAPI *p_glGetProgramResourceiv)(GLuint,GLenum,GLuint,GLsizei,const GLenum*,GLsizei,GLsizei*,GLint*);
         void       (WINE_GLAPI *p_glGetProgramStageiv)(GLuint,GLenum,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetProgramStringARB)(GLenum,GLenum,void*);
@@ -1115,6 +1174,10 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glGetProgramiv)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetProgramivARB)(GLenum,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetProgramivNV)(GLuint,GLenum,GLint*);
+        void       (WINE_GLAPI *p_glGetQueryBufferObjecti64v)(GLuint,GLuint,GLenum,GLintptr);
+        void       (WINE_GLAPI *p_glGetQueryBufferObjectiv)(GLuint,GLuint,GLenum,GLintptr);
+        void       (WINE_GLAPI *p_glGetQueryBufferObjectui64v)(GLuint,GLuint,GLenum,GLintptr);
+        void       (WINE_GLAPI *p_glGetQueryBufferObjectuiv)(GLuint,GLuint,GLenum,GLintptr);
         void       (WINE_GLAPI *p_glGetQueryIndexediv)(GLenum,GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetQueryObjecti64v)(GLuint,GLenum,GLint64*);
         void       (WINE_GLAPI *p_glGetQueryObjecti64vEXT)(GLuint,GLenum,GLint64*);
@@ -1158,19 +1221,30 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glGetTexParameterxvOES)(GLenum,GLenum,GLfixed*);
         GLuint64   (WINE_GLAPI *p_glGetTextureHandleARB)(GLuint);
         GLuint64   (WINE_GLAPI *p_glGetTextureHandleNV)(GLuint);
+        void       (WINE_GLAPI *p_glGetTextureImage)(GLuint,GLint,GLenum,GLenum,GLsizei,void*);
         void       (WINE_GLAPI *p_glGetTextureImageEXT)(GLuint,GLenum,GLint,GLenum,GLenum,void*);
+        void       (WINE_GLAPI *p_glGetTextureLevelParameterfv)(GLuint,GLint,GLenum,GLfloat*);
         void       (WINE_GLAPI *p_glGetTextureLevelParameterfvEXT)(GLuint,GLenum,GLint,GLenum,GLfloat*);
+        void       (WINE_GLAPI *p_glGetTextureLevelParameteriv)(GLuint,GLint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetTextureLevelParameterivEXT)(GLuint,GLenum,GLint,GLenum,GLint*);
+        void       (WINE_GLAPI *p_glGetTextureParameterIiv)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetTextureParameterIivEXT)(GLuint,GLenum,GLenum,GLint*);
+        void       (WINE_GLAPI *p_glGetTextureParameterIuiv)(GLuint,GLenum,GLuint*);
         void       (WINE_GLAPI *p_glGetTextureParameterIuivEXT)(GLuint,GLenum,GLenum,GLuint*);
+        void       (WINE_GLAPI *p_glGetTextureParameterfv)(GLuint,GLenum,GLfloat*);
         void       (WINE_GLAPI *p_glGetTextureParameterfvEXT)(GLuint,GLenum,GLenum,GLfloat*);
+        void       (WINE_GLAPI *p_glGetTextureParameteriv)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetTextureParameterivEXT)(GLuint,GLenum,GLenum,GLint*);
         GLuint64   (WINE_GLAPI *p_glGetTextureSamplerHandleARB)(GLuint,GLuint);
         GLuint64   (WINE_GLAPI *p_glGetTextureSamplerHandleNV)(GLuint,GLuint);
+        void       (WINE_GLAPI *p_glGetTextureSubImage)(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,GLsizei,void*);
         void       (WINE_GLAPI *p_glGetTrackMatrixivNV)(GLenum,GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetTransformFeedbackVarying)(GLuint,GLuint,GLsizei,GLsizei*,GLsizei*,GLenum*,GLchar*);
         void       (WINE_GLAPI *p_glGetTransformFeedbackVaryingEXT)(GLuint,GLuint,GLsizei,GLsizei*,GLsizei*,GLenum*,GLchar*);
         void       (WINE_GLAPI *p_glGetTransformFeedbackVaryingNV)(GLuint,GLuint,GLint*);
+        void       (WINE_GLAPI *p_glGetTransformFeedbacki64_v)(GLuint,GLenum,GLuint,GLint64*);
+        void       (WINE_GLAPI *p_glGetTransformFeedbacki_v)(GLuint,GLenum,GLuint,GLint*);
+        void       (WINE_GLAPI *p_glGetTransformFeedbackiv)(GLuint,GLenum,GLint*);
         GLuint     (WINE_GLAPI *p_glGetUniformBlockIndex)(GLuint,const GLchar*);
         GLint      (WINE_GLAPI *p_glGetUniformBufferSizeEXT)(GLuint,GLint);
         void       (WINE_GLAPI *p_glGetUniformIndices)(GLuint,GLsizei,const GLchar*const*,GLuint*);
@@ -1194,10 +1268,13 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glGetVariantIntegervEXT)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetVariantPointervEXT)(GLuint,GLenum,void**);
         GLint      (WINE_GLAPI *p_glGetVaryingLocationNV)(GLuint,const GLchar*);
+        void       (WINE_GLAPI *p_glGetVertexArrayIndexed64iv)(GLuint,GLuint,GLenum,GLint64*);
+        void       (WINE_GLAPI *p_glGetVertexArrayIndexediv)(GLuint,GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetVertexArrayIntegeri_vEXT)(GLuint,GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetVertexArrayIntegervEXT)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetVertexArrayPointeri_vEXT)(GLuint,GLuint,GLenum,void**);
         void       (WINE_GLAPI *p_glGetVertexArrayPointervEXT)(GLuint,GLenum,void**);
+        void       (WINE_GLAPI *p_glGetVertexArrayiv)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetVertexAttribArrayObjectfvATI)(GLuint,GLenum,GLfloat*);
         void       (WINE_GLAPI *p_glGetVertexAttribArrayObjectivATI)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetVertexAttribIiv)(GLuint,GLenum,GLint*);
@@ -1229,23 +1306,41 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glGetVideoivNV)(GLuint,GLenum,GLint*);
         void       (WINE_GLAPI *p_glGetVideoui64vNV)(GLuint,GLenum,GLuint64EXT*);
         void       (WINE_GLAPI *p_glGetVideouivNV)(GLuint,GLenum,GLuint*);
+        void       (WINE_GLAPI *p_glGetnColorTable)(GLenum,GLenum,GLenum,GLsizei,void*);
         void       (WINE_GLAPI *p_glGetnColorTableARB)(GLenum,GLenum,GLenum,GLsizei,void*);
+        void       (WINE_GLAPI *p_glGetnCompressedTexImage)(GLenum,GLint,GLsizei,void*);
         void       (WINE_GLAPI *p_glGetnCompressedTexImageARB)(GLenum,GLint,GLsizei,void*);
+        void       (WINE_GLAPI *p_glGetnConvolutionFilter)(GLenum,GLenum,GLenum,GLsizei,void*);
         void       (WINE_GLAPI *p_glGetnConvolutionFilterARB)(GLenum,GLenum,GLenum,GLsizei,void*);
+        void       (WINE_GLAPI *p_glGetnHistogram)(GLenum,GLboolean,GLenum,GLenum,GLsizei,void*);
         void       (WINE_GLAPI *p_glGetnHistogramARB)(GLenum,GLboolean,GLenum,GLenum,GLsizei,void*);
+        void       (WINE_GLAPI *p_glGetnMapdv)(GLenum,GLenum,GLsizei,GLdouble*);
         void       (WINE_GLAPI *p_glGetnMapdvARB)(GLenum,GLenum,GLsizei,GLdouble*);
+        void       (WINE_GLAPI *p_glGetnMapfv)(GLenum,GLenum,GLsizei,GLfloat*);
         void       (WINE_GLAPI *p_glGetnMapfvARB)(GLenum,GLenum,GLsizei,GLfloat*);
+        void       (WINE_GLAPI *p_glGetnMapiv)(GLenum,GLenum,GLsizei,GLint*);
         void       (WINE_GLAPI *p_glGetnMapivARB)(GLenum,GLenum,GLsizei,GLint*);
+        void       (WINE_GLAPI *p_glGetnMinmax)(GLenum,GLboolean,GLenum,GLenum,GLsizei,void*);
         void       (WINE_GLAPI *p_glGetnMinmaxARB)(GLenum,GLboolean,GLenum,GLenum,GLsizei,void*);
+        void       (WINE_GLAPI *p_glGetnPixelMapfv)(GLenum,GLsizei,GLfloat*);
         void       (WINE_GLAPI *p_glGetnPixelMapfvARB)(GLenum,GLsizei,GLfloat*);
+        void       (WINE_GLAPI *p_glGetnPixelMapuiv)(GLenum,GLsizei,GLuint*);
         void       (WINE_GLAPI *p_glGetnPixelMapuivARB)(GLenum,GLsizei,GLuint*);
+        void       (WINE_GLAPI *p_glGetnPixelMapusv)(GLenum,GLsizei,GLushort*);
         void       (WINE_GLAPI *p_glGetnPixelMapusvARB)(GLenum,GLsizei,GLushort*);
+        void       (WINE_GLAPI *p_glGetnPolygonStipple)(GLsizei,GLubyte*);
         void       (WINE_GLAPI *p_glGetnPolygonStippleARB)(GLsizei,GLubyte*);
+        void       (WINE_GLAPI *p_glGetnSeparableFilter)(GLenum,GLenum,GLenum,GLsizei,void*,GLsizei,void*,void*);
         void       (WINE_GLAPI *p_glGetnSeparableFilterARB)(GLenum,GLenum,GLenum,GLsizei,void*,GLsizei,void*,void*);
+        void       (WINE_GLAPI *p_glGetnTexImage)(GLenum,GLint,GLenum,GLenum,GLsizei,void*);
         void       (WINE_GLAPI *p_glGetnTexImageARB)(GLenum,GLint,GLenum,GLenum,GLsizei,void*);
+        void       (WINE_GLAPI *p_glGetnUniformdv)(GLuint,GLint,GLsizei,GLdouble*);
         void       (WINE_GLAPI *p_glGetnUniformdvARB)(GLuint,GLint,GLsizei,GLdouble*);
+        void       (WINE_GLAPI *p_glGetnUniformfv)(GLuint,GLint,GLsizei,GLfloat*);
         void       (WINE_GLAPI *p_glGetnUniformfvARB)(GLuint,GLint,GLsizei,GLfloat*);
+        void       (WINE_GLAPI *p_glGetnUniformiv)(GLuint,GLint,GLsizei,GLint*);
         void       (WINE_GLAPI *p_glGetnUniformivARB)(GLuint,GLint,GLsizei,GLint*);
+        void       (WINE_GLAPI *p_glGetnUniformuiv)(GLuint,GLint,GLsizei,GLuint*);
         void       (WINE_GLAPI *p_glGetnUniformuivARB)(GLuint,GLint,GLsizei,GLuint*);
         void       (WINE_GLAPI *p_glGlobalAlphaFactorbSUN)(GLbyte);
         void       (WINE_GLAPI *p_glGlobalAlphaFactordSUN)(GLdouble);
@@ -1278,6 +1373,8 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glInvalidateBufferData)(GLuint);
         void       (WINE_GLAPI *p_glInvalidateBufferSubData)(GLuint,GLintptr,GLsizeiptr);
         void       (WINE_GLAPI *p_glInvalidateFramebuffer)(GLenum,GLsizei,const GLenum*);
+        void       (WINE_GLAPI *p_glInvalidateNamedFramebufferData)(GLuint,GLsizei,const GLenum*);
+        void       (WINE_GLAPI *p_glInvalidateNamedFramebufferSubData)(GLuint,GLsizei,const GLenum*,GLint,GLint,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glInvalidateSubFramebuffer)(GLenum,GLsizei,const GLenum*,GLint,GLint,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glInvalidateTexImage)(GLuint,GLint);
         void       (WINE_GLAPI *p_glInvalidateTexSubImage)(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei);
@@ -1365,7 +1462,9 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glMapControlPointsNV)(GLenum,GLuint,GLenum,GLsizei,GLsizei,GLint,GLint,GLboolean,const void*);
         void       (WINE_GLAPI *p_glMapGrid1xOES)(GLint,GLfixed,GLfixed);
         void       (WINE_GLAPI *p_glMapGrid2xOES)(GLint,GLfixed,GLfixed,GLfixed,GLfixed);
+        void*      (WINE_GLAPI *p_glMapNamedBuffer)(GLuint,GLenum);
         void*      (WINE_GLAPI *p_glMapNamedBufferEXT)(GLuint,GLenum);
+        void*      (WINE_GLAPI *p_glMapNamedBufferRange)(GLuint,GLintptr,GLsizei,GLbitfield);
         void*      (WINE_GLAPI *p_glMapNamedBufferRangeEXT)(GLuint,GLintptr,GLsizeiptr,GLbitfield);
         void*      (WINE_GLAPI *p_glMapObjectBufferATI)(GLuint);
         void       (WINE_GLAPI *p_glMapParameterfvNV)(GLenum,GLenum,const GLfloat*);
@@ -1382,11 +1481,17 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glMatrixIndexubvARB)(GLint,const GLubyte*);
         void       (WINE_GLAPI *p_glMatrixIndexuivARB)(GLint,const GLuint*);
         void       (WINE_GLAPI *p_glMatrixIndexusvARB)(GLint,const GLushort*);
+        void       (WINE_GLAPI *p_glMatrixLoad3x2fNV)(GLenum,const GLfloat*);
+        void       (WINE_GLAPI *p_glMatrixLoad3x3fNV)(GLenum,const GLfloat*);
         void       (WINE_GLAPI *p_glMatrixLoadIdentityEXT)(GLenum);
+        void       (WINE_GLAPI *p_glMatrixLoadTranspose3x3fNV)(GLenum,const GLfloat*);
         void       (WINE_GLAPI *p_glMatrixLoadTransposedEXT)(GLenum,const GLdouble*);
         void       (WINE_GLAPI *p_glMatrixLoadTransposefEXT)(GLenum,const GLfloat*);
         void       (WINE_GLAPI *p_glMatrixLoaddEXT)(GLenum,const GLdouble*);
         void       (WINE_GLAPI *p_glMatrixLoadfEXT)(GLenum,const GLfloat*);
+        void       (WINE_GLAPI *p_glMatrixMult3x2fNV)(GLenum,const GLfloat*);
+        void       (WINE_GLAPI *p_glMatrixMult3x3fNV)(GLenum,const GLfloat*);
+        void       (WINE_GLAPI *p_glMatrixMultTranspose3x3fNV)(GLenum,const GLfloat*);
         void       (WINE_GLAPI *p_glMatrixMultTransposedEXT)(GLenum,const GLdouble*);
         void       (WINE_GLAPI *p_glMatrixMultTransposefEXT)(GLenum,const GLfloat*);
         void       (WINE_GLAPI *p_glMatrixMultdEXT)(GLenum,const GLdouble*);
@@ -1401,6 +1506,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glMatrixTranslatedEXT)(GLenum,GLdouble,GLdouble,GLdouble);
         void       (WINE_GLAPI *p_glMatrixTranslatefEXT)(GLenum,GLfloat,GLfloat,GLfloat);
         void       (WINE_GLAPI *p_glMemoryBarrier)(GLbitfield);
+        void       (WINE_GLAPI *p_glMemoryBarrierByRegion)(GLbitfield);
         void       (WINE_GLAPI *p_glMemoryBarrierEXT)(GLbitfield);
         void       (WINE_GLAPI *p_glMinSampleShading)(GLfloat);
         void       (WINE_GLAPI *p_glMinSampleShadingARB)(GLfloat);
@@ -1416,6 +1522,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glMultiDrawArraysEXT)(GLenum,const GLint*,const GLsizei*,GLsizei);
         void       (WINE_GLAPI *p_glMultiDrawArraysIndirect)(GLenum,const void*,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glMultiDrawArraysIndirectAMD)(GLenum,const void*,GLsizei,GLsizei);
+        void       (WINE_GLAPI *p_glMultiDrawArraysIndirectBindlessCountNV)(GLenum,const void*,GLsizei,GLsizei,GLsizei,GLint);
         void       (WINE_GLAPI *p_glMultiDrawArraysIndirectBindlessNV)(GLenum,const void*,GLsizei,GLsizei,GLint);
         void       (WINE_GLAPI *p_glMultiDrawArraysIndirectCountARB)(GLenum,GLintptr,GLintptr,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glMultiDrawElementArrayAPPLE)(GLenum,const GLint*,const GLsizei*,GLsizei);
@@ -1424,6 +1531,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glMultiDrawElementsEXT)(GLenum,const GLsizei*,GLenum,const void*const*,GLsizei);
         void       (WINE_GLAPI *p_glMultiDrawElementsIndirect)(GLenum,GLenum,const void*,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glMultiDrawElementsIndirectAMD)(GLenum,GLenum,const void*,GLsizei,GLsizei);
+        void       (WINE_GLAPI *p_glMultiDrawElementsIndirectBindlessCountNV)(GLenum,GLenum,const void*,GLsizei,GLsizei,GLsizei,GLint);
         void       (WINE_GLAPI *p_glMultiDrawElementsIndirectBindlessNV)(GLenum,GLenum,const void*,GLsizei,GLsizei,GLint);
         void       (WINE_GLAPI *p_glMultiDrawElementsIndirectCountARB)(GLenum,GLenum,GLintptr,GLintptr,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glMultiDrawRangeElementArrayAPPLE)(GLenum,GLuint,GLuint,const GLint*,const GLsizei*,GLsizei);
@@ -1583,17 +1691,30 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glMultiTexSubImage1DEXT)(GLenum,GLenum,GLint,GLint,GLsizei,GLenum,GLenum,const void*);
         void       (WINE_GLAPI *p_glMultiTexSubImage2DEXT)(GLenum,GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void*);
         void       (WINE_GLAPI *p_glMultiTexSubImage3DEXT)(GLenum,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void*);
+        void       (WINE_GLAPI *p_glNamedBufferData)(GLuint,GLsizei,const void*,GLenum);
         void       (WINE_GLAPI *p_glNamedBufferDataEXT)(GLuint,GLsizeiptr,const void*,GLenum);
+        void       (WINE_GLAPI *p_glNamedBufferPageCommitmentARB)(GLuint,GLintptr,GLsizeiptr,GLboolean);
+        void       (WINE_GLAPI *p_glNamedBufferPageCommitmentEXT)(GLuint,GLintptr,GLsizeiptr,GLboolean);
+        void       (WINE_GLAPI *p_glNamedBufferStorage)(GLuint,GLsizei,const void*,GLbitfield);
         void       (WINE_GLAPI *p_glNamedBufferStorageEXT)(GLuint,GLsizeiptr,const void*,GLbitfield);
+        void       (WINE_GLAPI *p_glNamedBufferSubData)(GLuint,GLintptr,GLsizei,const void*);
         void       (WINE_GLAPI *p_glNamedBufferSubDataEXT)(GLuint,GLintptr,GLsizeiptr,const void*);
         void       (WINE_GLAPI *p_glNamedCopyBufferSubDataEXT)(GLuint,GLuint,GLintptr,GLintptr,GLsizeiptr);
+        void       (WINE_GLAPI *p_glNamedFramebufferDrawBuffer)(GLuint,GLenum);
+        void       (WINE_GLAPI *p_glNamedFramebufferDrawBuffers)(GLuint,GLsizei,const GLenum*);
+        void       (WINE_GLAPI *p_glNamedFramebufferParameteri)(GLuint,GLenum,GLint);
         void       (WINE_GLAPI *p_glNamedFramebufferParameteriEXT)(GLuint,GLenum,GLint);
+        void       (WINE_GLAPI *p_glNamedFramebufferReadBuffer)(GLuint,GLenum);
+        void       (WINE_GLAPI *p_glNamedFramebufferRenderbuffer)(GLuint,GLenum,GLenum,GLuint);
         void       (WINE_GLAPI *p_glNamedFramebufferRenderbufferEXT)(GLuint,GLenum,GLenum,GLuint);
+        void       (WINE_GLAPI *p_glNamedFramebufferSampleLocationsfvNV)(GLuint,GLuint,GLsizei,const GLfloat*);
+        void       (WINE_GLAPI *p_glNamedFramebufferTexture)(GLuint,GLenum,GLuint,GLint);
         void       (WINE_GLAPI *p_glNamedFramebufferTexture1DEXT)(GLuint,GLenum,GLenum,GLuint,GLint);
         void       (WINE_GLAPI *p_glNamedFramebufferTexture2DEXT)(GLuint,GLenum,GLenum,GLuint,GLint);
         void       (WINE_GLAPI *p_glNamedFramebufferTexture3DEXT)(GLuint,GLenum,GLenum,GLuint,GLint,GLint);
         void       (WINE_GLAPI *p_glNamedFramebufferTextureEXT)(GLuint,GLenum,GLuint,GLint);
         void       (WINE_GLAPI *p_glNamedFramebufferTextureFaceEXT)(GLuint,GLenum,GLuint,GLint,GLenum);
+        void       (WINE_GLAPI *p_glNamedFramebufferTextureLayer)(GLuint,GLenum,GLuint,GLint,GLint);
         void       (WINE_GLAPI *p_glNamedFramebufferTextureLayerEXT)(GLuint,GLenum,GLuint,GLint,GLint);
         void       (WINE_GLAPI *p_glNamedProgramLocalParameter4dEXT)(GLuint,GLenum,GLuint,GLdouble,GLdouble,GLdouble,GLdouble);
         void       (WINE_GLAPI *p_glNamedProgramLocalParameter4dvEXT)(GLuint,GLenum,GLuint,const GLdouble*);
@@ -1607,7 +1728,9 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glNamedProgramLocalParametersI4ivEXT)(GLuint,GLenum,GLuint,GLsizei,const GLint*);
         void       (WINE_GLAPI *p_glNamedProgramLocalParametersI4uivEXT)(GLuint,GLenum,GLuint,GLsizei,const GLuint*);
         void       (WINE_GLAPI *p_glNamedProgramStringEXT)(GLuint,GLenum,GLenum,GLsizei,const void*);
+        void       (WINE_GLAPI *p_glNamedRenderbufferStorage)(GLuint,GLenum,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glNamedRenderbufferStorageEXT)(GLuint,GLenum,GLsizei,GLsizei);
+        void       (WINE_GLAPI *p_glNamedRenderbufferStorageMultisample)(GLuint,GLsizei,GLenum,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glNamedRenderbufferStorageMultisampleCoverageEXT)(GLuint,GLsizei,GLsizei,GLenum,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glNamedRenderbufferStorageMultisampleEXT)(GLuint,GLsizei,GLenum,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glNamedStringARB)(GLenum,GLint,const GLchar*,GLint,const GLchar*);
@@ -1653,8 +1776,11 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glPathCoverDepthFuncNV)(GLenum);
         void       (WINE_GLAPI *p_glPathDashArrayNV)(GLuint,GLsizei,const GLfloat*);
         void       (WINE_GLAPI *p_glPathFogGenNV)(GLenum);
+        GLenum     (WINE_GLAPI *p_glPathGlyphIndexArrayNV)(GLuint,GLenum,const void*,GLbitfield,GLuint,GLsizei,GLuint,GLfloat);
+        GLenum     (WINE_GLAPI *p_glPathGlyphIndexRangeNV)(GLenum,const void*,GLbitfield,GLuint,GLfloat,GLuint[2]);
         void       (WINE_GLAPI *p_glPathGlyphRangeNV)(GLuint,GLenum,const void*,GLbitfield,GLuint,GLsizei,GLenum,GLuint,GLfloat);
         void       (WINE_GLAPI *p_glPathGlyphsNV)(GLuint,GLenum,const void*,GLbitfield,GLsizei,GLenum,const void*,GLenum,GLuint,GLfloat);
+        GLenum     (WINE_GLAPI *p_glPathMemoryGlyphIndexArrayNV)(GLuint,GLenum,GLsizeiptr,const void*,GLsizei,GLuint,GLsizei,GLuint,GLfloat);
         void       (WINE_GLAPI *p_glPathParameterfNV)(GLuint,GLenum,GLfloat);
         void       (WINE_GLAPI *p_glPathParameterfvNV)(GLuint,GLenum,const GLfloat*);
         void       (WINE_GLAPI *p_glPathParameteriNV)(GLuint,GLenum,GLint);
@@ -1698,6 +1824,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glPointSizexOES)(GLfixed);
         GLint      (WINE_GLAPI *p_glPollAsyncSGIX)(GLuint*);
         GLint      (WINE_GLAPI *p_glPollInstrumentsSGIX)(GLint*);
+        void       (WINE_GLAPI *p_glPolygonOffsetClampEXT)(GLfloat,GLfloat,GLfloat);
         void       (WINE_GLAPI *p_glPolygonOffsetEXT)(GLfloat,GLfloat);
         void       (WINE_GLAPI *p_glPolygonOffsetxOES)(GLfixed,GLfixed);
         void       (WINE_GLAPI *p_glPopDebugGroup)(void);
@@ -1748,6 +1875,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glProgramParameteriEXT)(GLuint,GLenum,GLint);
         void       (WINE_GLAPI *p_glProgramParameters4dvNV)(GLenum,GLuint,GLsizei,const GLdouble*);
         void       (WINE_GLAPI *p_glProgramParameters4fvNV)(GLenum,GLuint,GLsizei,const GLfloat*);
+        void       (WINE_GLAPI *p_glProgramPathFragmentInputGenNV)(GLuint,GLint,GLenum,GLint,const GLfloat*);
         void       (WINE_GLAPI *p_glProgramStringARB)(GLenum,GLenum,GLsizei,const void*);
         void       (WINE_GLAPI *p_glProgramSubroutineParametersuivNV)(GLenum,GLsizei,const GLuint*);
         void       (WINE_GLAPI *p_glProgramUniform1d)(GLuint,GLint,GLdouble);
@@ -1880,14 +2008,17 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glPushGroupMarkerEXT)(GLsizei,const GLchar*);
         void       (WINE_GLAPI *p_glQueryCounter)(GLuint,GLenum);
         GLbitfield (WINE_GLAPI *p_glQueryMatrixxOES)(GLfixed*,GLint*);
+        void       (WINE_GLAPI *p_glQueryObjectParameteruiAMD)(GLenum,GLuint,GLenum,GLuint);
         void       (WINE_GLAPI *p_glRasterPos2xOES)(GLfixed,GLfixed);
         void       (WINE_GLAPI *p_glRasterPos2xvOES)(const GLfixed*);
         void       (WINE_GLAPI *p_glRasterPos3xOES)(GLfixed,GLfixed,GLfixed);
         void       (WINE_GLAPI *p_glRasterPos3xvOES)(const GLfixed*);
         void       (WINE_GLAPI *p_glRasterPos4xOES)(GLfixed,GLfixed,GLfixed,GLfixed);
         void       (WINE_GLAPI *p_glRasterPos4xvOES)(const GLfixed*);
+        void       (WINE_GLAPI *p_glRasterSamplesEXT)(GLuint,GLboolean);
         void       (WINE_GLAPI *p_glReadBufferRegion)(GLenum,GLint,GLint,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glReadInstrumentsSGIX)(GLint);
+        void       (WINE_GLAPI *p_glReadnPixels)(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,GLsizei,void*);
         void       (WINE_GLAPI *p_glReadnPixelsARB)(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,GLsizei,void*);
         void       (WINE_GLAPI *p_glRectxOES)(GLfixed,GLfixed,GLfixed,GLfixed);
         void       (WINE_GLAPI *p_glRectxvOES)(const GLfixed*,const GLfixed*);
@@ -1927,6 +2058,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glResetMinmax)(GLenum);
         void       (WINE_GLAPI *p_glResetMinmaxEXT)(GLenum);
         void       (WINE_GLAPI *p_glResizeBuffersMESA)(void);
+        void       (WINE_GLAPI *p_glResolveDepthValuesNV)(void);
         void       (WINE_GLAPI *p_glResumeTransformFeedback)(void);
         void       (WINE_GLAPI *p_glResumeTransformFeedbackNV)(void);
         void       (WINE_GLAPI *p_glRotatexOES)(GLfixed,GLfixed,GLfixed,GLfixed);
@@ -2025,8 +2157,13 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glStencilOpValueAMD)(GLenum,GLuint);
         void       (WINE_GLAPI *p_glStencilStrokePathInstancedNV)(GLsizei,GLenum,const void*,GLuint,GLint,GLuint,GLenum,const GLfloat*);
         void       (WINE_GLAPI *p_glStencilStrokePathNV)(GLuint,GLint,GLuint);
+        void       (WINE_GLAPI *p_glStencilThenCoverFillPathInstancedNV)(GLsizei,GLenum,const void*,GLuint,GLenum,GLuint,GLenum,GLenum,const GLfloat*);
+        void       (WINE_GLAPI *p_glStencilThenCoverFillPathNV)(GLuint,GLenum,GLuint,GLenum);
+        void       (WINE_GLAPI *p_glStencilThenCoverStrokePathInstancedNV)(GLsizei,GLenum,const void*,GLuint,GLint,GLuint,GLenum,GLenum,const GLfloat*);
+        void       (WINE_GLAPI *p_glStencilThenCoverStrokePathNV)(GLuint,GLint,GLuint,GLenum);
         void       (WINE_GLAPI *p_glStopInstrumentsSGIX)(GLint);
         void       (WINE_GLAPI *p_glStringMarkerGREMEDY)(GLsizei,const void*);
+        void       (WINE_GLAPI *p_glSubpixelPrecisionBiasNV)(GLuint,GLuint);
         void       (WINE_GLAPI *p_glSwizzleEXT)(GLuint,GLuint,GLenum,GLenum,GLenum,GLenum);
         void       (WINE_GLAPI *p_glSyncTextureINTEL)(GLuint);
         void       (WINE_GLAPI *p_glTagSampleBufferSGIX)(void);
@@ -2134,8 +2271,11 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glTexSubImage3D)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void*);
         void       (WINE_GLAPI *p_glTexSubImage3DEXT)(GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void*);
         void       (WINE_GLAPI *p_glTexSubImage4DSGIS)(GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void*);
+        void       (WINE_GLAPI *p_glTextureBarrier)(void);
         void       (WINE_GLAPI *p_glTextureBarrierNV)(void);
+        void       (WINE_GLAPI *p_glTextureBuffer)(GLuint,GLenum,GLuint);
         void       (WINE_GLAPI *p_glTextureBufferEXT)(GLuint,GLenum,GLenum,GLuint);
+        void       (WINE_GLAPI *p_glTextureBufferRange)(GLuint,GLenum,GLuint,GLintptr,GLsizei);
         void       (WINE_GLAPI *p_glTextureBufferRangeEXT)(GLuint,GLenum,GLenum,GLuint,GLintptr,GLsizeiptr);
         void       (WINE_GLAPI *p_glTextureColorMaskSGIS)(GLboolean,GLboolean,GLboolean,GLboolean);
         void       (WINE_GLAPI *p_glTextureImage1DEXT)(GLuint,GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,const void*);
@@ -2149,26 +2289,42 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glTextureMaterialEXT)(GLenum,GLenum);
         void       (WINE_GLAPI *p_glTextureNormalEXT)(GLenum);
         void       (WINE_GLAPI *p_glTexturePageCommitmentEXT)(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLboolean);
+        void       (WINE_GLAPI *p_glTextureParameterIiv)(GLuint,GLenum,const GLint*);
         void       (WINE_GLAPI *p_glTextureParameterIivEXT)(GLuint,GLenum,GLenum,const GLint*);
+        void       (WINE_GLAPI *p_glTextureParameterIuiv)(GLuint,GLenum,const GLuint*);
         void       (WINE_GLAPI *p_glTextureParameterIuivEXT)(GLuint,GLenum,GLenum,const GLuint*);
+        void       (WINE_GLAPI *p_glTextureParameterf)(GLuint,GLenum,GLfloat);
         void       (WINE_GLAPI *p_glTextureParameterfEXT)(GLuint,GLenum,GLenum,GLfloat);
+        void       (WINE_GLAPI *p_glTextureParameterfv)(GLuint,GLenum,const GLfloat*);
         void       (WINE_GLAPI *p_glTextureParameterfvEXT)(GLuint,GLenum,GLenum,const GLfloat*);
+        void       (WINE_GLAPI *p_glTextureParameteri)(GLuint,GLenum,GLint);
         void       (WINE_GLAPI *p_glTextureParameteriEXT)(GLuint,GLenum,GLenum,GLint);
+        void       (WINE_GLAPI *p_glTextureParameteriv)(GLuint,GLenum,const GLint*);
         void       (WINE_GLAPI *p_glTextureParameterivEXT)(GLuint,GLenum,GLenum,const GLint*);
         void       (WINE_GLAPI *p_glTextureRangeAPPLE)(GLenum,GLsizei,const void*);
         void       (WINE_GLAPI *p_glTextureRenderbufferEXT)(GLuint,GLenum,GLuint);
+        void       (WINE_GLAPI *p_glTextureStorage1D)(GLuint,GLsizei,GLenum,GLsizei);
         void       (WINE_GLAPI *p_glTextureStorage1DEXT)(GLuint,GLenum,GLsizei,GLenum,GLsizei);
+        void       (WINE_GLAPI *p_glTextureStorage2D)(GLuint,GLsizei,GLenum,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glTextureStorage2DEXT)(GLuint,GLenum,GLsizei,GLenum,GLsizei,GLsizei);
+        void       (WINE_GLAPI *p_glTextureStorage2DMultisample)(GLuint,GLsizei,GLenum,GLsizei,GLsizei,GLboolean);
         void       (WINE_GLAPI *p_glTextureStorage2DMultisampleEXT)(GLuint,GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLboolean);
+        void       (WINE_GLAPI *p_glTextureStorage3D)(GLuint,GLsizei,GLenum,GLsizei,GLsizei,GLsizei);
         void       (WINE_GLAPI *p_glTextureStorage3DEXT)(GLuint,GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei);
+        void       (WINE_GLAPI *p_glTextureStorage3DMultisample)(GLuint,GLsizei,GLenum,GLsizei,GLsizei,GLsizei,GLboolean);
         void       (WINE_GLAPI *p_glTextureStorage3DMultisampleEXT)(GLuint,GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei,GLboolean);
         void       (WINE_GLAPI *p_glTextureStorageSparseAMD)(GLuint,GLenum,GLenum,GLsizei,GLsizei,GLsizei,GLsizei,GLbitfield);
+        void       (WINE_GLAPI *p_glTextureSubImage1D)(GLuint,GLint,GLint,GLsizei,GLenum,GLenum,const void*);
         void       (WINE_GLAPI *p_glTextureSubImage1DEXT)(GLuint,GLenum,GLint,GLint,GLsizei,GLenum,GLenum,const void*);
+        void       (WINE_GLAPI *p_glTextureSubImage2D)(GLuint,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void*);
         void       (WINE_GLAPI *p_glTextureSubImage2DEXT)(GLuint,GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void*);
+        void       (WINE_GLAPI *p_glTextureSubImage3D)(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void*);
         void       (WINE_GLAPI *p_glTextureSubImage3DEXT)(GLuint,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void*);
         void       (WINE_GLAPI *p_glTextureView)(GLuint,GLenum,GLuint,GLenum,GLuint,GLuint,GLuint,GLuint);
         void       (WINE_GLAPI *p_glTrackMatrixNV)(GLenum,GLuint,GLenum,GLenum);
-        void       (WINE_GLAPI *p_glTransformFeedbackAttribsNV)(GLuint,const GLint*,GLenum);
+        void       (WINE_GLAPI *p_glTransformFeedbackAttribsNV)(GLsizei,const GLint*,GLenum);
+        void       (WINE_GLAPI *p_glTransformFeedbackBufferBase)(GLuint,GLuint,GLuint);
+        void       (WINE_GLAPI *p_glTransformFeedbackBufferRange)(GLuint,GLuint,GLuint,GLintptr,GLsizei);
         void       (WINE_GLAPI *p_glTransformFeedbackStreamAttribsNV)(GLsizei,const GLint*,GLsizei,const GLint*,GLenum);
         void       (WINE_GLAPI *p_glTransformFeedbackVaryings)(GLuint,GLsizei,const GLchar*const*,GLenum);
         void       (WINE_GLAPI *p_glTransformFeedbackVaryingsEXT)(GLuint,GLsizei,const GLchar*const*,GLenum);
@@ -2280,6 +2436,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glUnlockArraysEXT)(void);
         GLboolean  (WINE_GLAPI *p_glUnmapBuffer)(GLenum);
         GLboolean  (WINE_GLAPI *p_glUnmapBufferARB)(GLenum);
+        GLboolean  (WINE_GLAPI *p_glUnmapNamedBuffer)(GLuint);
         GLboolean  (WINE_GLAPI *p_glUnmapNamedBufferEXT)(GLuint);
         void       (WINE_GLAPI *p_glUnmapObjectBufferATI)(GLuint);
         void       (WINE_GLAPI *p_glUnmapTexture2DINTEL)(GLuint,GLint);
@@ -2291,7 +2448,7 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glVDPAUFiniNV)(void);
         void       (WINE_GLAPI *p_glVDPAUGetSurfaceivNV)(GLvdpauSurfaceNV,GLenum,GLsizei,GLsizei*,GLint*);
         void       (WINE_GLAPI *p_glVDPAUInitNV)(const void*,const void*);
-        void       (WINE_GLAPI *p_glVDPAUIsSurfaceNV)(GLvdpauSurfaceNV);
+        GLboolean  (WINE_GLAPI *p_glVDPAUIsSurfaceNV)(GLvdpauSurfaceNV);
         void       (WINE_GLAPI *p_glVDPAUMapSurfacesNV)(GLsizei,const GLvdpauSurfaceNV*);
         GLvdpauSurfaceNV (WINE_GLAPI *p_glVDPAURegisterOutputSurfaceNV)(const void*,GLenum,GLsizei,const GLuint*);
         GLvdpauSurfaceNV (WINE_GLAPI *p_glVDPAURegisterVideoSurfaceNV)(const void*,GLenum,GLsizei,const GLuint*);
@@ -2311,27 +2468,33 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glVariantubvEXT)(GLuint,const GLubyte*);
         void       (WINE_GLAPI *p_glVariantuivEXT)(GLuint,const GLuint*);
         void       (WINE_GLAPI *p_glVariantusvEXT)(GLuint,const GLushort*);
-        void       (WINE_GLAPI *p_glVertex2bOES)(GLbyte);
+        void       (WINE_GLAPI *p_glVertex2bOES)(GLbyte,GLbyte);
         void       (WINE_GLAPI *p_glVertex2bvOES)(const GLbyte*);
         void       (WINE_GLAPI *p_glVertex2hNV)(GLhalfNV,GLhalfNV);
         void       (WINE_GLAPI *p_glVertex2hvNV)(const GLhalfNV*);
         void       (WINE_GLAPI *p_glVertex2xOES)(GLfixed);
         void       (WINE_GLAPI *p_glVertex2xvOES)(const GLfixed*);
-        void       (WINE_GLAPI *p_glVertex3bOES)(GLbyte,GLbyte);
+        void       (WINE_GLAPI *p_glVertex3bOES)(GLbyte,GLbyte,GLbyte);
         void       (WINE_GLAPI *p_glVertex3bvOES)(const GLbyte*);
         void       (WINE_GLAPI *p_glVertex3hNV)(GLhalfNV,GLhalfNV,GLhalfNV);
         void       (WINE_GLAPI *p_glVertex3hvNV)(const GLhalfNV*);
         void       (WINE_GLAPI *p_glVertex3xOES)(GLfixed,GLfixed);
         void       (WINE_GLAPI *p_glVertex3xvOES)(const GLfixed*);
-        void       (WINE_GLAPI *p_glVertex4bOES)(GLbyte,GLbyte,GLbyte);
+        void       (WINE_GLAPI *p_glVertex4bOES)(GLbyte,GLbyte,GLbyte,GLbyte);
         void       (WINE_GLAPI *p_glVertex4bvOES)(const GLbyte*);
         void       (WINE_GLAPI *p_glVertex4hNV)(GLhalfNV,GLhalfNV,GLhalfNV,GLhalfNV);
         void       (WINE_GLAPI *p_glVertex4hvNV)(const GLhalfNV*);
         void       (WINE_GLAPI *p_glVertex4xOES)(GLfixed,GLfixed,GLfixed);
         void       (WINE_GLAPI *p_glVertex4xvOES)(const GLfixed*);
+        void       (WINE_GLAPI *p_glVertexArrayAttribBinding)(GLuint,GLuint,GLuint);
+        void       (WINE_GLAPI *p_glVertexArrayAttribFormat)(GLuint,GLuint,GLint,GLenum,GLboolean,GLuint);
+        void       (WINE_GLAPI *p_glVertexArrayAttribIFormat)(GLuint,GLuint,GLint,GLenum,GLuint);
+        void       (WINE_GLAPI *p_glVertexArrayAttribLFormat)(GLuint,GLuint,GLint,GLenum,GLuint);
         void       (WINE_GLAPI *p_glVertexArrayBindVertexBufferEXT)(GLuint,GLuint,GLuint,GLintptr,GLsizei);
+        void       (WINE_GLAPI *p_glVertexArrayBindingDivisor)(GLuint,GLuint,GLuint);
         void       (WINE_GLAPI *p_glVertexArrayColorOffsetEXT)(GLuint,GLuint,GLint,GLenum,GLsizei,GLintptr);
         void       (WINE_GLAPI *p_glVertexArrayEdgeFlagOffsetEXT)(GLuint,GLuint,GLsizei,GLintptr);
+        void       (WINE_GLAPI *p_glVertexArrayElementBuffer)(GLuint,GLuint);
         void       (WINE_GLAPI *p_glVertexArrayFogCoordOffsetEXT)(GLuint,GLuint,GLenum,GLsizei,GLintptr);
         void       (WINE_GLAPI *p_glVertexArrayIndexOffsetEXT)(GLuint,GLuint,GLenum,GLsizei,GLintptr);
         void       (WINE_GLAPI *p_glVertexArrayMultiTexCoordOffsetEXT)(GLuint,GLuint,GLenum,GLint,GLenum,GLsizei,GLintptr);
@@ -2350,6 +2513,8 @@ struct opengl_funcs
         void       (WINE_GLAPI *p_glVertexArrayVertexAttribLOffsetEXT)(GLuint,GLuint,GLuint,GLint,GLenum,GLsizei,GLintptr);
         void       (WINE_GLAPI *p_glVertexArrayVertexAttribOffsetEXT)(GLuint,GLuint,GLuint,GLint,GLenum,GLboolean,GLsizei,GLintptr);
         void       (WINE_GLAPI *p_glVertexArrayVertexBindingDivisorEXT)(GLuint,GLuint,GLuint);
+        void       (WINE_GLAPI *p_glVertexArrayVertexBuffer)(GLuint,GLuint,GLuint,GLintptr,GLsizei);
+        void       (WINE_GLAPI *p_glVertexArrayVertexBuffers)(GLuint,GLuint,GLsizei,const GLuint*,const GLintptr*,const GLsizei*);
         void       (WINE_GLAPI *p_glVertexArrayVertexOffsetEXT)(GLuint,GLuint,GLint,GLenum,GLsizei,GLintptr);
         void       (WINE_GLAPI *p_glVertexAttrib1d)(GLuint,GLdouble);
         void       (WINE_GLAPI *p_glVertexAttrib1dARB)(GLuint,GLdouble);
diff --git a/include/wine/wined3d.h b/include/wine/wined3d.h
index 6e06388..cdb5dc2 100644
--- a/include/wine/wined3d.h
+++ b/include/wine/wined3d.h
@@ -1976,6 +1976,24 @@ struct wined3d_rendertarget_view_desc
     } u;
 };
 
+struct wined3d_sampler_desc
+{
+    enum wined3d_texture_address address_u;
+    enum wined3d_texture_address address_v;
+    enum wined3d_texture_address address_w;
+    float border_color[4];
+    enum wined3d_texture_filter_type mag_filter;
+    enum wined3d_texture_filter_type min_filter;
+    enum wined3d_texture_filter_type mip_filter;
+    float lod_bias;
+    float min_lod;
+    float max_lod;
+    unsigned int max_anisotropy;
+    BOOL compare;
+    enum wined3d_cmp_func comparison_func;
+    BOOL srgb_decode;
+};
+
 struct wined3d_shader_signature_element
 {
     const char *semantic_name;
@@ -2434,7 +2452,8 @@ void * __cdecl wined3d_rendertarget_view_get_sub_resource_parent(const struct wi
 ULONG __cdecl wined3d_rendertarget_view_incref(struct wined3d_rendertarget_view *view);
 void __cdecl wined3d_rendertarget_view_set_parent(struct wined3d_rendertarget_view *view, void *parent);
 
-HRESULT __cdecl wined3d_sampler_create(void *parent, struct wined3d_sampler **sampler);
+HRESULT __cdecl wined3d_sampler_create(struct wined3d_device *device, const struct wined3d_sampler_desc *desc,
+        void *parent, struct wined3d_sampler **sampler);
 ULONG __cdecl wined3d_sampler_decref(struct wined3d_sampler *sampler);
 void * __cdecl wined3d_sampler_get_parent(const struct wined3d_sampler *sampler);
 ULONG __cdecl wined3d_sampler_incref(struct wined3d_sampler *sampler);
diff --git a/tools/wrc/translation.c b/tools/wrc/translation.c
index 74f2017..b7caa07 100644
--- a/tools/wrc/translation.c
+++ b/tools/wrc/translation.c
@@ -614,18 +614,16 @@ static int compare_ver_value(ver_value_t *ver_value1, ver_value_t *ver_value2) {
 	if((ver_value1->type == ver_value2->type)) {
 		switch(ver_value1->type) {
 			case val_str:
-				if(!different && ver_value1->key && ver_value2->key)
+				if(ver_value1->key && ver_value2->key)
 					different = compare_string(ver_value1->key, ver_value2->key);
-				else if(!different &&
-					((ver_value1->key && !ver_value2->key) ||
+				else if(((ver_value1->key && !ver_value2->key) ||
 					(!ver_value1->key && ver_value2->key)))
 						different = 1;
 				break;
 			case val_words:
-				if(!different && ver_value1->key && ver_value2->key)
+				if(ver_value1->key && ver_value2->key)
 					different = compare_string(ver_value1->key, ver_value2->key);
-				else if(!different &&
-					((ver_value1->key && !ver_value2->key) ||
+				else if(((ver_value1->key && !ver_value2->key) ||
 					(!ver_value1->key && ver_value2->key)))
 						different = 1;
 				if(!different && ver_value1->value.words && ver_value2->value.words) {
@@ -644,10 +642,9 @@ static int compare_ver_value(ver_value_t *ver_value1, ver_value_t *ver_value2) {
 						different = 1;
 				break;
 			case val_block:
-				if(!different && ver_value1->value.block && ver_value2->value.block)
+				if(ver_value1->value.block && ver_value2->value.block)
 					different = compare_ver_block(ver_value1->value.block, ver_value2->value.block);
-				else if(!different &&
-					((ver_value1->value.block && !ver_value2->value.block) ||
+				else if(((ver_value1->value.block && !ver_value2->value.block) ||
 					(!ver_value1->value.block && ver_value2->value.block)))
 						different = 1;
 				break;
